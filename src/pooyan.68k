	.macro CLEAR_XC_FLAGS
	move.w	d7,-(a7)
	moveq	#0,d7
	roxl.b	#1,d7
	movem.w	(a7)+,d7
	.endm

	.macro SET_XC_FLAGS
	move.w	d7,-(a7)
	st	d7
	roxl.b	#1,d7
	movem.w	(a7)+,d7
	.endm

	.macro	INVERT_XC_FLAGS
	jcs	0f
	SET_XC_FLAGS
	bra.b	1f
0:
	CLEAR_XC_FLAGS
1:
	.endm

	.macro	SET_X_FROM_C
	jcc	0f
	SET_XC_FLAGS
	bra.b	1f
0:
	CLEAR_XC_FLAGS
1:
	.endm
	.macro	SET_C_FROM_X
	move.w	d7,-(a7)
	roxl.b	#1,d7
	roxr.b	#1,d7
	movem.w	(a7)+,d7
	.endm

	.macro	LOAD_D1_16_FROM_D1D2
	and.l	#0xFFFF,d1
	lsl.w	#8,d1
	move.b	d2,d1
	.endm
	
	.macro	LOAD_D3_16_FROM_D3D4
	and.l	#0xFFFF,d3
	lsl.w	#8,d3
	move.b	d4,d3
	.endm
	.macro	LOAD_D5_16_FROM_D5D6
	and.l	#0xFFFF,d5
	lsl.w	#8,d5
	move.b	d6,d5
	.endm
	.macro	LOAD_D1D2_FROM_D1_16
	move.b	d1,d2
	lsr.w	#8,d1
	.endm
	.macro	LOAD_D5D6_FROM_D5_16
	move.b	d5,d6
	lsr.w	#8,d5
	.endm
	.macro	LOAD_D3D4_FROM_D3_16
	move.b	d3,d4
	lsr.w	#8,d3
	.endm

	.macro	LOAD_D5D6_FROM_A0_RAM
	move.l	a0,d5
	sub.l	a6,d5
	.ifndef	RELEASE
	jpl	110f
	ILLEGAL
110:
	cmp.w	#0x1000,d5
	jcs	111f
	ILLEGAL
111:
	.endif
	bset	#15,d5
	LOAD_D5D6_FROM_D5_16
	.endm
	
	.macro	LOAD_D5D6_FROM_A0_ROM
	move.l	a0,d5
	sub.l	#rom_base,d5
	.ifndef	RELEASE
	jpl	110f
	ILLEGAL
110:
	.endif
	LOAD_D5D6_FROM_D5_16
	.endm
	
	.macro	LOAD_D3D4_FROM_A1_RAM
	move.l	a1,d3
	sub.l	a6,d3
	.ifndef	RELEASE
	jpl	110f
	ILLEGAL
110:
	cmp.w	#0x1000,d3
	jcs	111f
	ILLEGAL
111:
	.endif
	bset	#15,d3
	LOAD_D3D4_FROM_D3_16
	.endm
	
	.macro	LOAD_D3D4_FROM_A1_ROM
	move.l	a0,d3
	sub.l	#rom_base,d3
	.ifndef	RELEASE
	jpl	110f
	ILLEGAL
110:
	.endif
	LOAD_D3D4_FROM_D3_16
	.endm
	
	
	.macro	LOAD_A0_FROM_D5D6
	LOAD_D5_16_FROM_D5D6
	LOAD_A0_FROM_D5
	.endm
	
	.macro	LOAD_A0_FROM_D5
	.ifndef	RELEASE
	cmp.w	#0x9000,d5
	jcs		110f
	illegal
110:
	.endif
	bclr	#15,d5
	jeq		111f
	* >=$8000: RAM
	lea		(a6,d5.w),a0
	jra		112f
111:
	* ROM
	lea	rom_base,a0
	add.w	d5,a0
112:
	.endm
	
	.macro	LOAD_A1_FROM_D3D4
	LOAD_D3_16_FROM_D3D4
	.ifndef	RELEASE
	cmp.w	#0x9000,d3
	jcs		110f
	illegal
110:
	.endif
	bclr	#15,d3
	jeq		111f
	* >=$8000: RAM
	lea		(a6,d3.w),a1
	jra		112f
111:
	* ROM
	lea	rom_base,a1
	add.w	d5,a1
112:
	.endm
	
	.macro	STORE_RAM_POINTER  src,dest
	move.l	d7,-(a7)
	move.l	\src,d7
	sub.l	a6,d7
	add.l	#0x8000,d7
	move.b	d7,\dest
	rol.w	#8,d7
	move.b	d7,1+\dest
	move.l	(a7)+,d7
	.endm

	.macro	LOAD_RAM_POINTER  src,dest
	move.l	d7,-(a7)
	moveq	#0,d7
	move.b	1+\src,d7
	rol.w	#8,d7
	move.b	\src,d7
	add.l	a6,d7
	sub.l	#0x8000,d7
	move.l	d7,\dest
	move.l	(a7)+,d7
	.endm

	.macro	LOAD_RXM_POINTER  src,dest
	move.l	d7,-(a7)
	moveq	#0,d7
	move.b	1+\src,d7
	rol.w	#8,d7
	move.b	\src,d7
	jbsr	load_any_pointer
	move.l	d7,\dest
	move.l	(a7)+,d7
	.endm

	.macro	STORE_ROM_POINTER  src,dest
	move.l	d7,-(a7)
	move.l	\src,d7
	sub.l	#rom_base,d7
	move.b	d7,\dest
	rol.w	#8,d7
	move.b	d7,1+\dest
	move.l	(a7)+,d7
	.endm

	.macro	LOAD_ROM_POINTER  src,dest
	move.l	d7,-(a7)
	moveq	#0,d7
	move.b	1+\src,d7
	rol.w	#8,d7
	move.b	\src,d7
	add.l	#rom_base,d7
	move.l	d7,\dest
	move.l	(a7)+,d7
	.endm

	.macro	LOAD_ROM	src,dest
	lea	rom_base+\src,\dest
	.endm
	
	.macro	STORE_RXM_POINTER  src,dest
	move.l	d7,-(a7)
	move.l	\src,d7
	jbsr	store_any_pointer
	move.b	d7,\dest
	rol.w	#8,d7
	move.b	d7,1+\dest
	move.l	(a7)+,d7
	.endm


	.macro	STORE_WORD  src,dest
	move.b	\src,\dest
	rol.w	#8,\src
	move.b	\src,1+\dest
	rol.w	#8,\src
	.endm

	.macro	LOAD_WORD  src,dest
	move.b	1+\src,\dest
	rol.w	#8,\dest
	move.b	\src,\dest
	.endm

store_any_pointer:
	sub.l	a6,d7
	cmp.l	#0x1000,d7
	jcs		0f
	add.l	a6,d7
	sub.l	#rom_base,d7
	rts
0:
	* RAM
	bset	#15,d7
	rts
	
load_any_pointer:
	bclr	#15,d7
	jne	0f
	add.l	#rom_base,d7
	rts
0:
	add.l	a6,d7	
	rts
	
read_ixl_in_d0:
	move.l	a2,d0
	sub.l	a6,d0
	rts
read_iyl_in_d0:
	move.l	a3,d0
	sub.l	a6,d0
	rts
	
	.global	pooyan_reset
	.global	pooyan_irq
	.include "data.inc"
	
*
* Pooyan disassembly by JOTD
*
*	map(0x0000, 0x7fff).rom();
*	map(0x8000, 0x83ff).ram().w(FUNC(pooyan_state::colorram_w)).share(m_colorram);
*	map(0x8400, 0x87ff).ram().w(FUNC(pooyan_state::videoram_w)).share(m_videoram);
*	map(0x8800, 0x8fff).ram();  2k of ram
*	map(0x9000, 0x90ff).mirror(0x0b00).ram().share(m_spriteram[0]);
*	map(0x9400, 0x94ff).mirror(0x0b00).ram().share(m_spriteram[1]);
*	map(0xa000, 0xa000).mirror(0x5e7f).portr("DSW1");
*	map(0xa080, 0xa080).mirror(0x5e1f).portr("IN0");
*	map(0xa0a0, 0xa0a0).mirror(0x5e1f).portr("IN1");
*	map(0xa0c0, 0xa0c0).mirror(0x5e1f).portr("IN2");
*	map(0xa0e0, 0xa0e0).mirror(0x5e1f).portr("DSW0");
*	map(0xa000, 0xa000).mirror(0x5e7f).w("watchdog", FUNC(watchdog_timer_device::reset_w));
*	map(0xa100, 0xa100).mirror(0x5e7f).w("timeplt_audio", FUNC(timeplt_audio_device::sound_data_w));
*	map(0xa180, 0xa187).mirror(0x5e78).w("mainlatch", FUNC(ls259_device::write_d0));

x_pos_06 = 6
sprite_attributes_10 = 0x10
y_pos_04 = 4
sprite_code_0f = 0xf

GAME_IN_PLAY_03 = 3

pooyan_reset:
	clr.b	d0                               	| [$0000: xor  a]
	jbsr	osd_interrupt_control               	| [$0001: ld   (mainlatch_a180),a]
	jra	bootup_0092                        	| [$0004: jp   bootup_0092]


*write_consecutive_bytes_0008:
*	move.b	d0,(a0)+                         	| [$0008: ld   (hl),a]
*	addq.b	#1,d0                           	| [$0009: inc  a]
*	                           	| [$000a: inc  hl]
*	move.b	d0,(a0)+                         	| [$000b: ld   (hl),a]
*	                           	| [$000c: inc  a]
*	add.w	d3,a0                            	| [$000d: add  hl,de]
*	rts                                    	| [$000e: ret]

* fill (hl) b times with a value
fill_area_0010:
l_0010:
	move.b	d0,(a0)+                         	| [$0010: ld   (hl),a]
	                           	| [$0011: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0010                             	| [$0012: djnz $0010]
	rts                                    	| [$0014: ret]
fill_area_0010_video:
0:
	jbsr	osd_w_videoram                         	| [$0010: ld   (hl),a]
	addq	#1,a0                           	| [$0011: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	0b                             	| [$0012: djnz $0010]
	rts                                    	| [$0014: ret]

*fill_area_0018:
*l_0018:
*	move.b	d0,(a0)+                         	| [$0018: ld   (hl),a]
*	                           	| [$0019: inc  hl]
*	subq.b	#1,d1                           	| [...]
*	jne	l_0018                             	| [$001a: djnz $0018]
*	subq.w	#1,d2                           	| [$001c: dec  c]
*	jne	l_0018                             	| [$001d: jr   nz,$0018]
*	rts                                    	| [$001f: ret]

* read byte at hl+a into a
read_byte_a0_plus_d0_0020:
             	| [$0020: add  a,l]
            	| [$0021: ld   l,a]
             	| [$0022: ld   a,$00]
            	| [$0024: adc  a,h]

    and.w	#0xFF,d0        	| [$0025: ld   h,a]
	add.w	d0,a0
	move.b	(a0),d0                         	| [$0026: ld   a,(hl)]
	rts                                    	| [$0027: ret]

* jump to location using a jump table just after the rst call
jump_from_table_below_0028:
	add.b	d0,d0                            	| [$0028: add  a,a]
	add.b	d0,d0                            	| [$0028: add  a,a]
	move.l	(sp)+,a0                        	| [$0029: pop  hl]
	clr.w	d3                               	| [$002b: ld   d,$00]
	move.b	d0,d3                           	| [$002a: ld   e,a]
	add.w	d3,a0                            	| [$002d: add  hl,de]
	move.l	(a0),a0                         	| [$002e: ld   e,(hl)]
												| [$002f: inc  hl]
												| [$0030: ld   d,(hl)]
												| [$0031: ex   de,hl]
	jra	(a0)                               	| [$0032: jp   (hl)]

* < D3.W

update_88A0_0038:
	move.l	a0,-(sp)                        	| [$0038: push hl]
	move.w	d3,-(sp)
	LOAD_D3D4_FROM_D3_16
	lea	l_8800(a6),a0                        	| [$0039: ld   h,$88]
	moveq	#0,D6			| a0/d6 coherence
	moveq	#0,d0
	move.b	l_88A0(a6),d0                   	| [$003b: ld   a,($88A0)]
	add.w	d0,a0                           	| [$003e: ld   l,a]
	add.b	d0,D6                           	| [$003e: ld   l,a] a0/d6 coherence
	btst.b	#7,(a0)                         	| [$003f: bit  7,(hl)]
	jeq	l_0051                             	| [$0041: jr   z,$0051]
	move.b	d3,(a0)+                        	| [$0043: ld   (hl),d]
	move.b	d4,(a0)+                         	| [$0045: ld   (hl),e]
	addq.b	#2,D6				| a0/d6 coherence
	move.b	D6,d0                           	| [$0047: ld   a,l]
	cmp.b	#0xC0,d0                         	| [$0048: cp   $C0]
	jcc	l_004e                             	| [$004a: jr   nc,$004E]
	move.b	#0xC0,d0                        	| [$004c: ld   a,$C0]
l_004e:
	move.b	d0,l_88A0(a6)                   	| [$004e: ld   ($88A0),a]
l_0051:
	move.w	(sp)+,d3
	move.l	(sp)+,a0                        	| [$0051: pop  hl]
	rts                                    	| [$0052: ret]

irq_0066:
	jra	irq_066D                           	| [$0066: jp   irq_066D]


bootup_0092:
	                	| [$0092: ld   (watchdog_a000),a]
	*move	ram_top_9000,sp                   	| [$0095: ld   sp,ram_top_9000]
	move.b	d0,l_8800(a6)                   	| [$0098: ld   ($8800),a] set to 0
												| [$009b: ld   b,$08]
												| [$009d: push bc]
	                      	| [$009e: ld   hl,$0000] 0
	                      	| [$00a1: ld   ix,$0079] 121


										| [$00a5: ld   de,$0000] 0
										| [$00a8: ld   c,d]
									
										| [$00a9: ld   a,e]
										| [$00aa: add  a,(hl)]
										| [$00ab: ld   e,a]
									| [$00ac: jr   nc,$00B2]
									
										| [$00ae: inc  d]
									| [$00af: jr   nz,$00B2]
										| [$00b1: inc  c]
									
									
									| [$00b2: inc  l]
											| [$00b3: jr   nz,$00A9]
											| [$00b5: inc  h]
											| [$00b6: ld   a,h]
											| [$00b7: and  $0F]
											| [$00b9: jr   nz,$00A9]
										| [$00bb: ld   (watchdog_a000),a]
											| [$00be: ld   a,e]
											| [$00bf: cp   (ix+$00)]
												| [$00c2: jr   nz,$00D0]
											| [$00c4: ld   a,d]
											| [$00c5: cp   (ix+$01)]
												| [$00c8: jr   nz,$00D0]
											| [$00ca: ld   a,c]
											| [$00cb: cp   (ix+$02)]
											| [$00ce: jr   z,$00D2]
										
										
											| [$00d0: jr   $00D8]

	* game reaches there 8 times during boot, and value
	* initialized to 8 at start
	* rom check or whatever. Not useful now as I've disabled
	* the check. Damn this game has so many ROM checksums and compares
	move.l	a0,-(sp)                        	| [$00d2: push hl]
	lea	rom_pass_check_8FFF(a6),a0                      	| [$00d3: ld   hl,$8FFF]
	move.b	#0x10,(a0)                         	| [$00d6: inc  (hl)]
	move.l	(sp)+,a0                        	| [$00d7: pop  hl]

	                         	| [$00d8: inc  ix]
	            	| [$00da: inc  ix] * 2
	                         	| [...]
	                        	| [$00de: djnz $00A5]
								
	jbsr	osd_read_dsw0                    	| [$00e0: ld   a,(dsw0_a0e0)]
	and.b	#0x0F,d0                         	| [$00e3: and  $0F]
	LOAD_ROM		0x0069,a0                      	| [$00e5: ld   hl,$0069] 105
	jbsr	read_byte_a0_plus_d0_0020                            	| [$00e8: rst  $20]
	move.b	(a0),d0                         	| [$00e9: ld   a,(hl)]
	or.b	d0,d0                             	| [$00ea: or   a]
                             	| [$00eb: jr   $0103]



	                	| [$0103: ld   (watchdog_a000),a]
	lea	l_8800(a6),a0                      	| [$0106: ld   hl,$8800]
	lea	l_8801(a6),a1                      	| [$0109: ld   de,$8801]
	move.w	#0x07FD,d1                          	| [$010c: ld   bc,$07FD]
	clr.b	(a0)                             	| [$010f: ld   (hl),$00]
* clear RAM
	jbsr	ldir                              	| [$0111: ldir]
	move.b	#0x08,d0                        	| [$0113: ld   a,$08]
	move.b	d0,l_8A42(a6)                   	| [$0115: ld   ($8A42),a]
	lea	l_88C0(a6),a0                      	| [$0118: ld   hl,$88C0]
* put FF $40 times
	move.b	#0x40,d1                        	| [$011b: ld   b,$40]
	st.b	d0                                	| [$011d: ld   a,$FF]
	jbsr	fill_area_0010                            	| [$011f: rst  $10]
	lea	l_8A43(a6),a0                      	| [$0120: ld   hl,$8A43]
	move.b	#0x1C,d1                        	| [$0123: ld   b,$1C]
	jbsr	fill_area_0010                            	| [$0125: rst  $10]
	LOAD_ROM	0x4343,a0                          	| [$0126: ld   hl,$4343]
	STORE_ROM_POINTER	a0,rom_pointer_8A40(a6)            	| [$0129: ld   ($8A40),hl]
	
	                	| [$012c: ld   (watchdog_a000),a]
	move.b	#0x01,d0                        	| [$012f: ld   a,$01]
	*move.b	d0,l_A187                       	| [$0131: ld   ($A187),a]
	move.b	d0,cabinet_upright_881F(a6)                   	| [$0134: ld   ($881F),a]
	move.w	#0xC0C0,d5                          	| [$0137: ld   hl,$C0C0]
	STORE_WORD	d5,l_88A0(a6)            	| [$013a: ld   ($88A0),hl]
	
* put $10 in color ram
	lea	l_8000(a6),a0                      	| [$013d: ld   hl,$8000]
	                      	| [$0140: ld   de,$8001]
	move.b	#0x10,d0                      	| [$0143: ld   (hl),$10]
	move.w	#0x03FF,d1                          	| [$0145: ld   bc,$0400]
0:
	move.b	d0,(a0)+
	dbf		d1,0b
	                              	| [$0148: ldir]
	jbsr	l_02e6                            	| [$014a: call $02E6]
	                	| [$014d: ld   (watchdog_a000),a]
	jbsr	osd_read_dsw1                    	| [$0150: ld   a,(dsw1_a000)]
	not.b	d0                               	| [$0153: cpl]
	ror.b	#2,d0                            	| [$0154: rrca] * 2
	move.b	d0,d1                           	| [$0156: ld   b,a]
	and.b	#0x01,d0                         	| [$0157: and  $01]
	move.b	d0,l_880F(a6)                   	| [$0159: ld   ($880F),a]
	move.b	d1,d0                           	| [$015c: ld   a,b]
	ror.b	#1,d0                            	| [$015d: rrca]
	move.b	d0,d1                           	| [$015e: ld   b,a]
	and.b	#0x01,d0                         	| [$015f: and  $01]
	move.b	d0,l_8800(a6)                   	| [$0161: ld   ($8800),a]
	move.b	d1,d0                           	| [$0164: ld   a,b]
	ror.b	#1,d0                            	| [$0165: rrca]
	move.b	d0,d1                           	| [$0166: ld   b,a]
	and.b	#0x07,d0                         	| [$0167: and  $07]
	move.b	d0,l_8820(a6)                   	| [$0169: ld   ($8820),a]
	move.b	d1,d0                           	| [$016c: ld   a,b]
	ror.b	#3,d0                            	| [$016d: rrca] * 3
	move.b	d0,d1                           	| [$0170: ld   b,a]
	and.b	#0x01,d0                         	| [$0171: and  $01]
	move.b	d0,l_8821(a6)                   	| [$0173: ld   ($8821),a]
	jbsr	osd_read_dsw1                    	| [$0176: ld   a,(dsw1_a000)]
	not.b	d0                               	| [$0179: cpl]
	and.b	#0x03,d0                         	| [$017a: and  $03]
	cmp.b	#0x03,d0                         	| [$017c: cp   $03]
	jeq	l_0184                             	| [$017e: jr   z,$0184]
	addq.b	#0x03,d0                        	| [$0180: add  a,$03]
	jra	l_0186                             	| [$0182: jr   $0186]
l_0184:
	st.b	d0                                	| [$0184: ld   a,$FF]
l_0186:
	move.b	d0,l_8807(a6)                   	| [$0186: ld   ($8807),a]
	jbsr	osd_read_dsw0                    	| [$0189: ld   a,(dsw0_a0e0)]
	move.b	d0,d1                           	| [$018c: ld   b,a]
	and.b	#0xF0,d0                         	| [$018d: and  $F0]
	ror.b	#4,d0                            	| [$018f: rrca] * 4
	LOAD_ROM	0x0053,a0                      	| [$0193: ld   hl,$0053] 83
	jbsr	read_byte_a0_plus_d0_0020                            	| [$0196: rst  $20]
	move.b	d0,l_882F(a6)                   	| [$0197: ld   ($882F),a]
	move.b	d1,d0                           	| [$019a: ld   a,b]
	and.b	#0x0F,d0                         	| [$019b: and  $0F]
	LOAD_ROM	0x0053,a0                      	| [$019d: ld   hl,$0053] 83
	jbsr	read_byte_a0_plus_d0_0020                            	| [$01a0: rst  $20]
	move.b	d0,l_882C(a6)                   	| [$01a1: ld   ($882C),a]
	                	| [$01a4: ld   (watchdog_a000),a]
	jbsr	fill_video_ram_and_sprites_01ea                            	| [$01a7: call $01EA]
	clr.b	d0                               	| [$01aa: xor  a]
	jbsr	audio_shit_0E8F                   	| [$01ab: call audio_shit_0E8F]
	move.b	#0x01,d0                        	| [$01ae: ld   a,$01]
	jbsr	osd_interrupt_control               	| [$01b0: ld   (mainlatch_a180),a]
	lea	l_8A00(a6),a0                      	| [$01b3: ld   hl,$8A00]
	move.b	#0x0A,d1                        	| [$01b6: ld   b,$0A]
l_01b8:
	clr.b	(a0)+                             	| [$01b8: ld   (hl),$00]
	                           	| [$01ba: inc  l]
	clr.b	(a0)+                             	| [$01bb: ld   (hl),$00]
	                           	| [$01bd: inc  l]
	move.b	#0x01,(a0)+                      	| [$01be: ld   (hl),$01]
	                           	| [$01c0: inc  l]
	subq.b	#1,d1                           	| [...]
	jne	l_01b8                             	| [$01c1: djnz $01B8]
	lea	high_score_88AA(a6),a0                      	| [$01c3: ld   hl,$88AA]
	move.b	#0x01,(a0)                      	| [$01c6: ld   (hl),$01]
	                	| [$01c8: ld   (watchdog_a000),a]
	lea	l_89C0(a6),a0                      	| [$01cb: ld   hl,$89C0]
	clr.b	d0                               	| [$01ce: xor  a]
	move.b	#0x1E,d1                        	| [$01cf: ld   b,$1E]
	jbsr	fill_area_0010                            	| [$01d1: rst  $10]
	jra	l_020f                             	| [$01d2: jp   $020F]
						
								| [$01d5: ld   (watchdog_a000),a]
* unreached???													| [$01d8: jr   $01D5]
l_01da:
	subq.w	#1,a4                           	| [$01da: dec  bc]
	                	| [$01db: ld   (watchdog_a000),a]
	jbsr	osd_read_inputs_0                     	| [$01de: ld   a,(in0_a080)]
	btst.b	#3,d0                           	| [$01e1: bit  3,a]
	beq.b	0f                               	| [...]
	rts                                    	| [$01e3: ret  nz] [...]
0:
	move.b	d1,d0                           	| [$01e4: ld   a,b]
	or.b	d2,d0                             	| [$01e5: or   c]
	jne	l_01da                             	| [$01e6: jr   nz,$01DA]
	SET_XC_FLAGS                           	| [$01e8: scf]
	rts                                    	| [$01e9: ret]
	
	
fill_video_ram_and_sprites_01ea:
	lea	sprite_ram_9000+0x410,a0                          	| [$01ea: ld   hl,$9410]
	move.b	#0x30,d1                        	| [$01ed: ld   b,$30]
	jbsr	fill_area_0010                            	| [$01ef: rst  $10]
	lea	sprite_ram_9000+0x10,a0                          	| [$01f0: ld   hl,$9010]
	move.b	#0x30,d1                        	| [$01f3: ld   b,$30]
	jbsr	fill_area_0010                            	| [$01f5: rst  $10]
	lea	l_8440(a6),a0                      	| [$01f6: ld   hl,$8440]
	                      	| [$01f9: ld   de,$8441]
	move.w	#0x03C0,d1                          	| [$01fc: ld   bc,$03BF]
	move.b	#0x1E,d0                      	| [$01ff: ld   (hl),$1E]
0:
	jbsr	osd_w_videoram							| [$0201: ldir]
	addq.w	#1,a0
	dbf		d1,0b
				
							| [$0203: nop]
							| [$0204: nop]
							| [$0205: nop]
								| [...]
							| [$0206: djnz $0203]
	                	| [$0208: ld   (watchdog_a000),a]
	                           	| [$020b: dec  c]
	                          	| [$020c: jr   nz,$0203]
	rts                                    	| [$020e: ret]

l_020f:
	move.b	#0x88,d5                        	| [$020f: ld   h,$88]
	move.b	lsb_index_88A1(a6),d0                   	| [$0211: ld   a,($88A1)]
	move.b	d0,d6                           	| [$0214: ld   l,a]
	LOAD_A0_FROM_D5D6
	move.b	(a0),d0                         	| [$0215: ld   a,(hl)]
	add.b	d0,d0                            	| [$0216: add  a,a]
	jcc	l_021e                             	| [$0217: jr   nc,$021E]
	jbsr	l_0254                            	| [$0219: call $0254]
	jra	l_020f                             	| [$021c: jr   $020F]
l_021e:
	and.b	#0x1F,d0                         	| [$021e: and  $1F]
	clr.w	d1                               	| [$0221: ld   b,$00]
	move.b	d0,d1                           	| [$0220: ld   c,a]
	st.b	(a0)+                      	| [$0223: ld   (hl),$FF]
	                           	| [$0225: inc  hl]
	move.b	(a0),d4                         	| [$0226: ld   e,(hl)]
	st.b	(a0)+                      	| [$0227: ld   (hl),$FF]
	                           	| [$0229: inc  l]
	LOAD_D5D6_FROM_A0_RAM
	move.b	D6,d0                         	| [$022a: ld   a,l]
	cmp.b	#0xC0,d0                         	| [$022b: cp   $C0]
	jcc	l_0231                             	| [$022d: jr   nc,$0231]
	move.b	#0xC0,d0                        	| [$022f: ld   a,$C0]
l_0231:
	move.b	d0,lsb_index_88A1(a6)                   	| [$0231: ld   ($88A1),a]
	* argument for function, seems to increase like 0,1, 2... and
	* stops after ??
	move.b	d4,d0                           	| [$0234: ld   a,e]
	lea	jump_table_0242(pc),a0                          	| [$0235: ld   hl,$0242]
	add.w	d1,a0                            	| [$0238: add  hl,bc]
	add.w	d1,a0                            	| [$0238: add  hl,bc]
	move.l	(a0),a0                         	| [$0239: ld   e,(hl)]
	                        	| [$023a: inc  hl]
	                        	| [$023b: ld   d,(hl)]
	pea	l_020f(pc)                          	| [$023c: ld   hl,$020F]

	                        	| [$023f: push hl]
	                              	| [$0240: ex   de,hl]
	jra	(a0)                               	| [$0241: jp   (hl)]

jump_table_0242:
  .long	l_039B 
  .long	display_nb_lives_03c2 
  .long	display_high_scores_table_03E9 
  .long	something_on_start_screen_0496 
  .long	zero_and_display_highscores_0552 
  .long	display_score_056B 
  .long	display_string_05b2 
  .long	display_credits_05EE
  .long	l_0644

l_0254:
	move.b	l_883F(a6),d0					| [$0254: ld   a,($883F)    ]
	move.b	d0,d1                           	| [$0257: ld   b,a]
	and.b	#0x0F,d0                         	| [$0258: and  $0F]
	jeq	l_0261                             	| [$025a: jp   z,$0261]
	*jbsr	anti_hack_check_208C              	| [$025d: call anti_hack_check_208C]
	rts                                    	| [$0260: ret]
l_0261:
	move.b	l_8806(a6),d0                   	| [$0261: ld   a,($8806)]
	                               	| [$0264: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0265: ret  z] [...]
0:
	move.w    #-0x20,d3                          	| [$0266: ld   de,$FFE0]
	lea	l_84E0(a6),a0                      	| [$0269: ld   hl,$84E0]
	tst.b	two_player_mode_880E(a6)                   	| [$026c: ld   a,($880E)]
	                               	| [$026f: and  a]
	jeq	l_0294                             	| [$0270: jr   z,$0294]
	* write 2UP
	move.b	#0x02,d0                      	| [$0272: ld   (hl),$02]
	jbsr	osd_w_videoram
	jbsr	write_up_02aa                            	| [$0274: call $02AA]
l_0277:
	lea	l_8740(a6),a0                      	| [$0277: ld   hl,$8740]
	jbsr	write_1up_02a8                            	| [$027a: call $02A8]
	move.b	current_player_is_p2_880D(a6),d0                   	| [$027d: ld   a,($880D)]
	                               	| [$0280: and  a]
	lea	l_8740(a6),a0                      	| [$0281: ld   hl,$8740]
	jeq	l_0289                             	| [$0284: jr   z,$0289]
	lea	l_84E0(a6),a0                      	| [$0286: ld   hl,$84E0]
l_0289:
	btst.b	#4,d1                           	| [$0289: bit  4,b]
	bne.b	0f                               	| [...]
	rts                                    	| [$028b: ret  z] [...]
0:
	move.b	l_8806(a6),d0                   	| [$028c: ld   a,($8806)]
	ror.b	#1,d0                            	| [$028f: rrca]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0290: ret  nc] [...]
0:
	jra	clear_3_chars_02b1                             	| [$0291: jp   $02B1]
l_0294:
	lea	l_84E0(a6),a0                      	| [$0294: ld   hl,$84E0]
	jbsr	clear_3_chars_02b1                            	| [$0297: call $02B1]
	lea	player_2_score_screen_address_8521(a6),a0                      	| [$029a: ld   hl,$8521]
	jbsr	clear_3_chars_02b1                            	| [$029d: call $02B1]
	jbsr	clear_3_chars_02b1                            	| [$02a0: call $02B1]
	jbsr	clear_3_chars_02b1                            	| [$02a3: call $02B1]
	jra	l_0277                             	| [$02a6: jr   $0277]
write_1up_02a8:
	move.b	#0x01,d0                      	| [$02a8: ld   (hl),$01]
	jbsr	osd_w_videoram	
write_up_02aa:
	add.w	d3,a0                            	| [$02aa: add  hl,de]
	move.b	#0x25,d0                      	| [$02ab: ld   (hl),$25]  'U'
	jbsr	osd_w_videoram
	add.w	d3,a0                            	| [$02ad: add  hl,de]
	move.b	#0x20,d0                      	| [$02ae: ld   (hl),$20]  'P'
	jbsr	osd_w_videoram
	rts                                    	| [$02b0: ret]
clear_3_chars_02b1:
	move.b	#0x10,d0                        	| [$02b1: ld   a,$10]
	jbsr	osd_w_videoram                         	| [$02b3: ld   (hl),a]
	add.w	d3,a0                            	| [$02b4: add  hl,de]
	jbsr	osd_w_videoram                         	| [$02b5: ld   (hl),a]
	add.w	d3,a0                            	| [$02b6: add  hl,de]
	jbsr	osd_w_videoram                         	| [$02b7: ld   (hl),a]
	rts                                    	| [$02b8: ret]
l_02b9:
	lea	sprite_shadow_ram_8840(a6),a0      	| [$02b9: ld   hl,sprite_shadow_ram_8840]
	move.b	#0x60,d1                        	| [$02bc: ld   b,$60]
	CLEAR_XC_FLAGS                         	| [$02be: xor  a]
	clr.b	d0                               	| [$02be: xor  a]
	jbsr	fill_area_0010                            	| [$02bf: rst  $10]
	lea	player_structure_8A80(a6),a0      	| [$02c0: ld   hl,player_structure_8A80]
	jbsr	fill_area_0010                            	| [$02c3: rst  $10]
	jbsr	fill_area_0010                            	| [$02c4: rst  $10]
	move.b	#0x37,d1                        	| [$02c5: ld   b,$37]
	jbsr	fill_area_0010                            	| [$02c7: rst  $10]
	rts                                    	| [$02c8: ret]

erase_a_column_02c9:
	jbsr	l_02b9                            	| [$02c9: call $02B9]
	move.b	#0x1D,d1                        	| [$02cc: ld   b,$1D]
erase_a_column_02ce:
	move.b	#0x20,d0                        	| [$02ce: ld   a,$20]
	sub.b	d1,d0                            	| [$02d0: sub  b]
	moveq	#0,d3                               	| [$02d2: ld   d,$00]
	move.b	d0,d3                           	| [$02d1: ld   e,a]
	LOAD_RAM_POINTER	video_ram_pointer_880b(a6),a0             	| [$02d4: ld   hl,($880B)]

	move.b	#0x10,d0                        	| [$02d7: ld   a,$10]
	jbsr	fill_area_0010_video                            	| [$02d9: rst  $10]
	add.w	d3,a0                            	| [$02da: add  hl,de]
	STORE_RAM_POINTER	a0,video_ram_pointer_880b(a6)            	| [$02db: ld   ($880B),hl]
	
	lea	nb_columns_to_erase_8809(a6),a0                      	| [$02de: ld   hl,$8809]
	subq.b	#1,(a0)                         	| [$02e1: dec  (hl)]
	rts                                    	| [$02e2: ret]

l_02e3:
	lea	l_8402(a6),a0                      	| [$02e3: ld   hl,$8402]
l_02e6:
	STORE_RAM_POINTER	a0,video_ram_pointer_880b(a6)            	| [$02e6: ld   ($880B),hl]
	
	move.b	#0x20,d0                        	| [$02e9: ld   a,$20]
	move.b	d0,nb_columns_to_erase_8809(a6)                   	| [$02eb: ld   ($8809),a]
	rts                                    	| [$02ee: ret]

update_sprite_shadows_02EF:
	lea	sprite_shadow_ram_8840(a6),a0      	| [$02ef: ld   hl,sprite_shadow_ram_8840]
	lea	player_structure_8A80(a6),a2      	| [$02f2: ld   ix,player_structure_8A80]
	move.w	#0x0018,d3                      	| [$02f6: ld   de,$0018] 24
	move.b	#0x02,d1                        	| [$02f9: ld   b,$02]
	jbsr	update_sprite_shadow_0321         	| [$02fb: call update_sprite_shadow_0321]
	lea	l_8C90(a6),a2                      	| [$02fe: ld   ix,$8C90]
	move.b	#0x02,d1                        	| [$0302: ld   b,$02]
	jbsr	update_sprite_shadow_0321         	| [$0304: call update_sprite_shadow_0321]
	lea	l_8AE0(a6),a2                      	| [$0307: ld   ix,$8AE0]
	move.b	#0x12,d1                        	| [$030b: ld   b,$12]
	jbsr	l_0343                            	| [$030d: call $0343]
	lea	l_8AB0(a6),a2                      	| [$0310: ld   ix,$8AB0]
	move.b	#0x02,d1                        	| [$0314: ld   b,$02]
	jbsr	update_sprite_shadow_0321         	| [$0316: call update_sprite_shadow_0321]
	lea	l_8898(a6),a0                      	| [$0319: ld   hl,$8898]
	subq.b	#1,(a0)                         	| [$031c: dec  (hl)]
	lea	l_889C(a6),a0                      	| [$031d: ld   hl,$889C]
l_0320:
	subq.b	#1,(a0)                         	| [$0320: dec  (hl)]
	move.b	cabinet_upright_881F(a6),d0                   	| [$0321: ld   a,($881F)]
	                               	| [$0324: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$0325: ret  nz] [...]
0:
	jbsr	l_0378                            	| [$0326: call $0378]
	rts                                    	| [$0329: ret]

* < HL: 88xx (to write to shadow sprite ram)
* < IX: character structure X,Y, ...
update_sprite_shadow_0321:
	move.b	(x_pos_06,a2),d0                	| [$032a: ld   a,(ix+x_pos_06)]
	move.b	d0,(a0)+                         	| [$032d: ld   (hl),a]
	                           	| [$032e: inc  l]
	move.b	(sprite_attributes_10,a2),d0    	| [$032f: ld   a,(ix+sprite_attributes_10)]
	move.b	d0,(a0)+                         	| [$0332: ld   (hl),a]
	                           	| [$0333: inc  l]
	move.b	(y_pos_04,a2),d0                	| [$0334: ld   a,(ix+y_pos_04)]
	move.b	d0,(a0)+                         	| [$0337: ld   (hl),a]
	                           	| [$0338: inc  l]
	move.b	(sprite_code_0f,a2),d0          	| [$0339: ld   a,(ix+sprite_code_0f)]
	move.b	d0,(a0)+                         	| [$033c: ld   (hl),a]
	                           	| [$033d: inc  l]
	add.w	d3,a2                            	| [$033e: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	update_sprite_shadow_0321          	| [$0340: djnz update_sprite_shadow_0321]
	rts                                    	| [$0342: ret]

l_0343:
	move.b	(0x05,a2),d2                    	| [$0343: ld   c,(ix+$05)]
	move.b	(0x06,a2),d0                    	| [$0346: ld   a,(ix+$06)]
	rol.b	#1,d2                            	| [$0349: rlc  c]
	SET_X_FROM_C
	roxl.b	#1,d0                           	| [$034b: rla]
	rol.b	#1,d2                            	| [$034c: rlc  c]
	SET_X_FROM_C
	roxl.b	#1,d0                           	| [$034e: rla]
	rol.b	#1,d2                            	| [$034f: rlc  c]
	SET_X_FROM_C
	roxl.b	#1,d0                           	| [$0351: rla]
	sub.b	#0x08,d0                         	| [$0352: sub  $08]
	move.b	d0,(a0)+                         	| [$0354: ld   (hl),a]
	                           	| [$0355: inc  l]
	move.b	(0x10,a2),d0                    	| [$0356: ld   a,(ix+$10)]
	move.b	d0,(a0)+                         	| [$0359: ld   (hl),a]
	                           	| [$035a: inc  l]
	move.b	(0x04,a2),d0                    	| [$035b: ld   a,(ix+$04)]
	move.b	(0x03,a2),d2                    	| [$035e: ld   c,(ix+$03)]
	rol.b	#1,d2                            	| [$0361: rlc  c]
	SET_X_FROM_C
	roxl.b	#1,d0                           	| [$0363: rla]
	rol.b	#1,d2                            	| [$0364: rlc  c]
	SET_X_FROM_C
	roxl.b	#1,d0                           	| [$0366: rla]
	rol.b	#1,d2                            	| [$0367: rlc  c]
	SET_X_FROM_C
	roxl.b	#1,d0                           	| [$0369: rla]
	sub.b	#0x08,d0                         	| [$036a: sub  $08]
	move.b	d0,(a0)+                         	| [$036c: ld   (hl),a]
	                           	| [$036d: inc  l]
	move.b	(0x0f,a2),d0                    	| [$036e: ld   a,(ix+$0f)]
	move.b	d0,(a0)+                         	| [$0371: ld   (hl),a]
	                           	| [$0372: inc  l]
	add.w	d3,a2                            	| [$0373: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0343                             	| [$0375: djnz $0343]
	rts                                    	| [$0377: ret]

l_0378:
	lea	sprite_shadow_ram_8840(a6),a1      	| [$0378: ld   de,sprite_shadow_ram_8840]
	move.b	#0x18,d1                        	| [$037b: ld   b,$18]
l_037d:
	move.b	(a1),d0                         	| [$037d: ld   a,(de)]
	neg.b	d0                               	| [$037e: neg]
	sub.b	#0x10,d0                         	| [$0380: sub  $10]
	move.b	d0,(a1)+                         	| [$0382: ld   (de),a]
	                           	| [$0383: inc  e]
	move.b	(a1),d0                         	| [$0384: ld   a,(de)]
	and.b	#0xC0,d0                         	| [$0385: and  $C0]
	eor.b	#0xC0,d0                         	| [$0387: xor  $C0]
	move.b	d0,d2                           	| [$0389: ld   c,a]
	move.b	(a1),d0                         	| [$038a: ld   a,(de)]
	and.b	#0x0F,d0                         	| [$038b: and  $0F]
	or.b	d2,d0                             	| [$038d: or   c]
	move.b	d0,(a1)+                         	| [$038e: ld   (de),a]
	                           	| [$038f: inc  e]
	move.b	(a1),d0                         	| [$0390: ld   a,(de)]
	neg.b	d0                               	| [$0391: neg]
	sub.b	#0x10,d0                         	| [$0393: sub  $10]
	move.b	d0,(a1)                         	| [$0395: ld   (de),a]
	addq.w	#2,a1                           	| [$0396: inc  e]
	subq.b	#1,d1                           	| [...]
	jne	l_037d                             	| [$0398: djnz $037D]
	rts                                    	| [$039a: ret]
l_039B:
	move.b	l_8806(a6),d0                   	| [$039b: ld   a,($8806)]
	                               	| [$039e: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$039f: ret  z] [...]
0:
	lea	l_8482(a6),a0                      	| [$03a0: ld   hl,$8482]
	move.w	#0x0020,d3                      	| [$03a3: ld   de,$0020] 32
	move.b	player_structure_8A80(a6),d0   	| [$03a6: ld   a,(player_structure_8A80)]
	addq.b	#1,d0                           	| [$03a9: inc  a]
	cmp.b	#0x08,d0                         	| [$03aa: cp   $08]
	jcs	l_03b0                             	| [$03ac: jr   c,$03B0]
	move.b	#0x08,d0                        	| [$03ae: ld   a,$08]
l_03b0:
	move.b	d0,d2                           	| [$03b0: ld   c,a]
	move.b	d0,d1                           	| [$03b1: ld   b,a]
l_03b2:
	move.b	#0x0C,(a0)                      	| [$03b2: ld   (hl),$0C]
	add.w	d3,a0                            	| [$03b4: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_03b2                             	| [$03b5: djnz $03B2]
	move.b	#0x08,d0                        	| [$03b7: ld   a,$08]
	sub.b	d2,d0                            	| [$03b9: sub  c]
	bne.b	0f                               	| [...]
	rts                                    	| [$03ba: ret  z] [...]
0:
	move.b	d0,d1                           	| [$03bb: ld   b,a]
l_03bc:
	move.b	#0x10,(a0)                      	| [$03bc: ld   (hl),$10]
	add.w	d3,a0                            	| [$03be: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_03bc                             	| [$03bf: djnz $03BC]
	rts                                    	| [$03c1: ret]

display_nb_lives_03c2:
	lea	l_863F(a6),a0                      	| [$03c2: ld   hl,$863F]
	move.w    #0xFFE0,d3                          	| [$03c5: ld   de,$FFE0]
	move.b	nb_lives_8908(a6),d0            	| [$03c8: ld   a,(nb_lives_8908)]
	                               	| [$03cb: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$03cc: ret  z] [...]
0:
	subq.b	#1,d0                           	| [$03cd: dec  a]
	move.b	d0,d2                           	| [$03ce: ld   c,a]
	jeq	l_03de                             	| [$03cf: jr   z,$03DE]
	cmp.b	#0x05,d0                         	| [$03d1: cp   $05]
	jcs	l_03d7                             	| [$03d3: jr   c,$03D7]
	move.b	#0x05,d0                        	| [$03d5: ld   a,$05]
l_03d7:
	move.b	d0,d2                           	| [$03d7: ld   c,a]
	move.b	d0,d1                           	| [$03d8: ld   b,a]
	move.b	#0xB0,d0
l_03d9:
	jbsr	osd_w_videoram                      	| [$03d9: ld   (hl),$B0]
	add.w	d3,a0                            	| [$03db: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_03d9                             	| [$03dc: djnz $03D9]
l_03de:
	move.b	#0x05,d0                        	| [$03de: ld   a,$05]
	sub.b	d2,d0                            	| [$03e0: sub  c]
	bne.b	0f                               	| [...]
	rts                                    	| [$03e1: ret  z] [...]
0:
	move.b	d0,d1                           	| [$03e2: ld   b,a]
	move.b	#0x10,d0
l_03e3:
	jbsr	osd_w_videoram                      	| [$03e3: ld   (hl),$10]
	add.w	d3,a0                            	| [$03e5: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_03e3                             	| [$03e6: djnz $03E3]
	rts                                    	| [$03e8: ret]
display_high_scores_table_03E9:
	* score/ranking, then 1ST, 2ND ...
	move.b	#0x1A,d0                        	| [$03e9: ld   a,$1A]
	move.b	#0x0B,d1                        	| [$03eb: ld   b,$0B]
l_03ed:
	move.w	d0,-(sp)                        	| [$03ed: push af]
	movem.w	d1/d2,-(sp)                    	| [$03ee: push bc]
	jbsr	display_string_05b2                            	| [$03ef: call $05B2]
	movem.w	(sp)+,d1/d2                    	| [$03f2: pop  bc]
	move.w	(sp)+,d0                        	| [$03f3: pop  af]
	addq.b	#1,d0                           	| [$03f4: inc  a]
	subq.b	#1,d1                           	| [...]
	jne	l_03ed                             	| [$03f5: djnz $03ED]
	lea	l_85C7(a6),a0                      	| [$03f7: ld   hl,$85C7]
	move.w	#0x0020,d3                      	| [$03fa: ld   de,$0020] 32
	move.b	#0x0A,d1                        	| [$03fd: ld   b,$0A]
	lea	l_8A00(a6),a2                      	| [$03ff: ld   ix,$8A00]
l_0403:
	jbsr	write_to_screen_0429                            	| [$0403: call $0429]
	jbsr	osd_w_videoram                         	| [$0406: ld   (hl),a]
	add.w	d3,a0                            	| [$0407: add  hl,de]
	addq.w	#1,a2                           	| [$0408: inc  ix]
	jbsr	write_to_screen_0429                            	| [$040a: call $0429]
	jbsr	osd_w_videoram                         	| [$040d: ld   (hl),a]
	add.w	d3,a0                            	| [$040e: add  hl,de]
	addq.w	#1,a2                           	| [$040f: inc  ix]
	jbsr	write_to_screen_0429                            	| [$0411: call $0429]
	jeq	l_0417                             	| [$0414: jr   z,$0417]
	jbsr	osd_w_videoram                         	| [$0416: ld   (hl),a]
l_0417:
	move.w    #0xFF62,d3                          	| [$0417: ld   de,$FF62]
	add.w	d3,a0                            	| [$041a: add  hl,de]
	move.w	#0x0020,d3                      	| [$041b: ld   de,$0020] 32
	addq.w	#1,a2                           	| [$041e: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	l_0403                             	| [$0420: djnz $0403]
	jbsr	l_0439                            	| [$0422: call $0439]
	jbsr	l_0460                            	| [$0425: call $0460]
	rts                                    	| [$0428: ret]
write_to_screen_0429:
	move.b	(0x00,a2),d0                    	| [$0429: ld   a,(ix+$00)]
	move.b	d0,d2                           	| [$042c: ld   c,a]
	and.b	#0x0F,d0                         	| [$042d: and  $0F]
	jbsr	osd_w_videoram                         	| [$042f: ld   (hl),a]
	add.w	d3,a0                            	| [$0430: add  hl,de]
	move.b	d2,d0                           	| [$0431: ld   a,c]
	ror.b	#4,d0                            	| [$0432: rrca] * 4
	and.b	#0x0F,d0                         	| [$0436: and  $0F]
	rts                                    	| [$0438: ret]
l_0439:
	lea	l_89C0(a6),a2                      	| [$0439: ld   ix,$89C0]
	lea	l_8467(a6),a0                      	| [$043d: ld   hl,$8467]
	move.b	#0x0A,d1                        	| [$0440: ld   b,$0A]
l_0442:
	move.w	#0x0020,d3                      	| [$0442: ld   de,$0020] 32
	addq.w	#1,a2                           	| [$0445: inc  ix]
	jbsr	write_to_screen_0429                            	| [$0447: call $0429]
	jbsr	osd_w_videoram                         	| [$044a: ld   (hl),a]
	add.w	d3,a0                            	| [$044b: add  hl,de]
	move.b	#0x51,d0
	jbsr	osd_w_videoram                      	| [$044c: ld   (hl),$51]
	add.w	d3,a0                            	| [$044e: add  hl,de]
	addq.w	#1,a2                           	| [$044f: inc  ix]
	jbsr	write_to_screen_0429                            	| [$0451: call $0429]
	jeq	l_0457                             	| [$0454: jr   z,$0457]
	move.b	d0,(a0)                         	| [$0456: ld   (hl),a]
l_0457:
	addq.w	#1,a2                           	| [$0457: inc  ix]
	move.w    #0xFF82,d3                          	| [$0459: ld   de,$FF82]
	add.w	d3,a0                            	| [$045c: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0442                             	| [$045d: djnz $0442]
	rts                                    	| [$045f: ret]
l_0460:
	lea	l_8E00(a6),a2                      	| [$0460: ld   ix,$8E00]
	lea	l_8567(a6),a0                      	| [$0464: ld   hl,$8567]
	move.b	#0x0A,d1                        	| [$0467: ld   b,$0A]
l_0469:
	move.w    #0xFFE0,d3                          	| [$0469: ld   de,$FFE0]
	move.b	(0x00,a2),d0                    	| [$046c: ld   a,(ix+$00)]
	                               	| [$046f: and  a]
	jne	l_0474                             	| [$0470: jr   nz,$0474]
	move.b	#0x40,d0                        	| [$0472: ld   a,$40]
l_0474:
	move.b	d0,(a0)                         	| [$0474: ld   (hl),a]
	add.w	d3,a0                            	| [$0475: add  hl,de]
	addq.w	#1,a2                           	| [$0476: inc  ix]
	move.b	(0x00,a2),d0                    	| [$0478: ld   a,(ix+$00)]
	                               	| [$047b: and  a]
	jne	l_0480                             	| [$047c: jr   nz,$0480]
	move.b	#0x40,d0                        	| [$047e: ld   a,$40]
l_0480:
	move.b	d0,(a0)                         	| [$0480: ld   (hl),a]
	add.w	d3,a0                            	| [$0481: add  hl,de]
	addq.w	#1,a2                           	| [$0482: inc  ix]
	move.b	(0x00,a2),d0                    	| [$0484: ld   a,(ix+$00)]
	                               	| [$0487: and  a]
	jne	l_048c                             	| [$0488: jr   nz,$048C]
	move.b	#0x40,d0                        	| [$048a: ld   a,$40]
l_048c:
	move.b	d0,(a0)                         	| [$048c: ld   (hl),a]
	addq.w	#1,a2                           	| [$048d: inc  ix]
	move.w	#0x0042,d3                      	| [$048f: ld   de,$0042] 66
	add.w	d3,a0                            	| [$0492: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0469                             	| [$0493: djnz $0469]
	rts                                    	| [$0495: ret]
something_on_start_screen_0496:
	move.b	d0,d2                           	| [$0496: ld   c,a]
	move.b	l_8806(a6),d0                   	| [$0497: ld   a,($8806)]
	ror.b	#1,d0                            	| [$049a: rrca]
	bcs.b	0f                               	| [...]
	rts                                    	| [$049b: ret  nc] [...]
0:
	move.b	d2,d0                           	| [$049c: ld   a,c]
	                               	| [$049d: and  a]
	jeq	l_04e7                             	| [$049e: jr   z,$04E7]
	jbsr	l_04f2                            	| [$04a0: call $04F2]
	add.b	d0,d0                            	| [$04a3: add  a,a]
	add.b	d2,d0                            	| [$04a4: add  a,c]
	clr.w	d1                               	| [$04a6: ld   b,$00]
	move.b	d0,d1                           	| [$04a5: ld   c,a]
	LOAD_ROM	0x0501,a0                          	| [$04a8: ld   hl,$0501]
	add.w	d1,a0                            	| [$04ab: add  hl,bc]
	CLEAR_XC_FLAGS                               	| [$04ac: and  a]
	move.w	#0x03-1,d1                        	| [$04ad: ld   b,$03]
l_04af:
	move.b	(a1),d0                         	| [$04af: ld   a,(de)]
	move.b	(a0)+,d7
	abcd	d7,d0                         	| [$04b0: adc  a,(hl)] + daa
	move.b	d0,(a1)+                         	| [$04b2: ld   (de),a]
	                           	| [$04b3: inc  de]
	                           	| [$04b4: inc  hl]
	dbf	d1,l_04af                             	| [$04b5: djnz $04AF]
	move.l	a1,-(sp)                        	| [$04b7: push de]
	move.b	current_player_is_p2_880D(a6),d0                   	| [$04b8: ld   a,($880D)]
	ror.b	#1,d0                            	| [$04bb: rrca]
	jcc	l_04c0                             	| [$04bc: jr   nc,$04C0]
	move.b	#0x01,d0                        	| [$04be: ld   a,$01]
l_04c0:
	jbsr	display_score_056B                            	| [$04c0: call $056B]
	move.l	(sp)+,a1                        	| [$04c3: pop  de]
	subq.w	#1,a1                           	| [$04c4: dec  de]
	lea	high_score_88AA(a6),a0                      	| [$04c5: ld   hl,$88AA]
	move.b	#0x03,d1                        	| [$04c8: ld   b,$03]
l_04ca:
	move.b	(a1),d0                         	| [$04ca: ld   a,(de)]
	cmp.b	(a0),d0                          	| [$04cb: cp   (hl)]
	bcc.b	0f                               	| [...]
	rts                                    	| [$04cc: ret  c] [...]
0:
	jne	l_04d4                             	| [$04cd: jr   nz,$04D4]
	subq.w	#1,a1                           	| [$04cf: dec  de]
	subq.w	#1,a0                           	| [$04d0: dec  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_04ca                             	| [$04d1: djnz $04CA]
	rts                                    	| [$04d3: ret]
l_04d4:
	jbsr	l_04f2                            	| [$04d4: call $04F2]
	lea	l_88A8(a6),a0                      	| [$04d7: ld   hl,$88A8]
	move.b	#0x03,d1                        	| [$04da: ld   b,$03]
l_04dc:
	move.b	(a1)+,d0                         	| [$04dc: ld   a,(de)]
	move.b	d0,(a0)+                         	| [$04dd: ld   (hl),a]
	                           	| [$04de: inc  de]
	                           	| [$04df: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_04dc                             	| [$04e0: djnz $04DC]
	move.b	#0x02,d0                        	| [$04e2: ld   a,$02]
	jra	display_score_056B                             	| [$04e4: jp   $056B]
l_04e7:
	jbsr	l_04f2                            	| [$04e7: call $04F2]
	lea	l_88AB(a6),a0                      	| [$04ea: ld   hl,$88AB]
	tst.b	d0                               	| [$04ed: and  a]
	move.b	#0x03,d1                        	| [$04ee: ld   b,$03]
	jra	l_04af                             	| [$04f0: jr   $04AF]
l_04f2:
	move.w	d0,-(sp)                        	| [$04f2: push af]
	move.b	current_player_is_p2_880D(a6),d0                   	| [$04f3: ld   a,($880D)]
	lea	l_88A2(a6),a1                      	| [$04f6: ld   de,$88A2]
	ror.b	#1,d0                            	| [$04f9: rrca]
	jcc	l_04ff                             	| [$04fa: jr   nc,$04FF]
	lea	l_88A5(a6),a1                      	| [$04fc: ld   de,$88A5]
l_04ff:
	move.w	(sp)+,d0                        	| [$04ff: pop  af]
	rts                                    	| [$0500: ret]

zero_and_display_highscores_0552:
	move.w	d0,-(sp)                        	| [$0552: push af]
	lea	l_88A2(a6),a0                      	| [$0553: ld   hl,$88A2]
	tst.b	d0                               	| [$0556: and  a]
	jeq	l_0562                             	| [$0557: jr   z,$0562]
	lea	player_1_score_88A4+1(a6),a0                      	| [$0559: ld   hl,$88A5]
	subq.b	#1,d0                           	| [$055c: dec  a]
	jeq	l_0562                             	| [$055d: jr   z,$0562]
	lea	player_2_score_88A7+1(a6),a0                      	| [$055f: ld   hl,$88A8]
l_0562:
	clr.b	(a0)+                             	| [$0562: ld   (hl),$00]
	                           	| [$0564: inc  hl]
	clr.b	(a0)+                             	| [$0565: ld   (hl),$00]
	                           	| [$0567: inc  hl]
	clr.b	(a0)                             	| [$0568: ld   (hl),$00]
	move.w	(sp)+,d0                        	| [$056a: pop  af]
display_score_056B:
	lea	player_1_score_88A4(a6),a0                      	| [$056B: ld   hl,$88A4]
	lea	l_8781(a6),a2                      	| [$056e: ld   ix,$8781]
	tst.b	d0                               	| [$0572: and  a]
	jeq	l_0586                             	| [$0573: jr   z,$0586]
	lea	player_2_score_88A7(a6),a0                      	| [$0575: ld   hl,$88A7]
	lea	player_2_score_screen_address_8521(a6),a2                      	| [$0578: ld   ix,$8521]
	subq.b	#1,d0                           	| [$057c: dec  a]
	jeq	l_0586                             	| [$057d: jr   z,$0586]
	lea	high_score_88AA(a6),a0                      	| [$057f: ld   hl,$88AA]
	lea	l_8641(a6),a2                      	| [$0582: ld   ix,$8641]
l_0586:
	move.w    #0xFFE0,d3                          	| [$0586: ld   de,$FFE0]
	move.b	#0x03,d1                        	| [$0589: ld   b,$03]
	move.b	#0x04,d2                        	| [$058b: ld   c,$04]
l_058d:
	move.b	(a0),d0                         	| [$058d: ld   a,(hl)]
	ror.b	#4,d0                            	| [$058e: rrca] * 4
	jbsr	l_059d                            	| [$0592: call $059D]
	move.b	(a0),d0                         	| [$0595: ld   a,(hl)]
	jbsr	l_059d                            	| [$0596: call $059D]
	subq.w	#1,a0                           	| [$0599: dec  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_058d                             	| [$059a: djnz $058D]
	rts                                    	| [$059c: ret]
l_059d:
	and.b	#0x0F,d0                         	| [$059d: and  $0F]
	jeq	l_05a9                             	| [$059f: jr   z,$05A9]
	clr.b	d2                               	| [$05a1: ld   c,$00]
l_05a3:
	exg	a0,a2
	jbsr	osd_w_videoram                    	| [$05a3: ld   (ix+$00),a]
	exg	a0,a2
	add.w	d3,a2                            	| [$05a6: add  ix,de]
	rts                                    	| [$05a8: ret]
l_05a9:
	move.b	d2,d0                           	| [$05a9: ld   a,c]
	                               	| [$05aa: and  a]
	jeq	l_05a3                             	| [$05ab: jr   z,$05A3]
	move.b	#0x10,d0                        	| [$05ad: ld   a,$10]
	subq.b	#1,d2                           	| [$05af: dec  c]
	jra	l_05a3                             	| [$05b0: jr   $05A3]

* < D0: string index for table lookup

display_string_05b2:
	add.b	d0,d0                            	| [$05b2: add  a,a]
	scs	d7
	move.w	d0,-(sp)                        	| [$05b3: push af]
	lea	string_table_7A0D,a0                          	| [$05b4: ld   hl,$7A0D]
	and.b	#0x7F,d0                         	| [$05b7: and  $7F]
	clr.w	d3                               	| [$05ba: ld   d,$00]
	move.b	d0,d3                           	| [$05b9: ld   e,a]
	add.w	d3,a0                            	| [$05bc: add  hl,de]
	add.w	d3,a0                            	| [$05bc: add  hl,de]
	move.w	(sp)+,d0                        	| [$05bd: pop  af]
	* get pointer on screen address + text
	move.l	(a0)+,a1                         	| [$05be: ld   e,(hl)]
	                           	| [$05bf: inc  hl]
								| [$05c0: ld   d,(hl)]
		
		
	exg	a1,a0                              	| [$05c1: ex   de,hl]
l_05c2:
	* get screen address
	move.b	(a0)+,D4                         	| [$05c2: ld   e,(hl)]
	                           	| [$05c3: inc  hl]
	move.b	(a0)+,D3                         	| [$05c4: ld   d,(hl)]
	                           	| [$05c5: inc  hl]
	LOAD_A1_FROM_D3D4
	* now a1 is the screen address
	exg	a1,a0                              	| [$05c6: ex   de,hl]
	move.w	#-0x20,d1                          	| [$05c7: ld   bc,$FFE0]
	tst.b	d7
	jne	l_05e0                             	| [$05ca: jr   c,$05E0]
l_05cc:
	* read character to display
	move.b	(a1),d0                         	| [$05cc: ld   a,(de)]
	cmp.b	#0x2E,d0                         	| [$05cd: cp   $2E]
	jeq	continues_to_next_line_05dc                             	| [$05cf: jr   z,$05DC]
	cmp.b	#0x3F,d0                         	| [$05d1: cp   $3F]
	bne.b	0f                               	| [...]
	* end of string
	rts                                    	| [$05d3: ret  z] [...]
0:
	sub.b	#0x30,d0                         	| [$05d4: sub  $30]
	jbsr	osd_w_videoram                         	| [$05d6: ld   (hl),a]
	addq.w	#1,a1                           	| [$05d7: inc  de]
	* advance to next column to the right
	add.w	d1,a0                            	| [$05d8: add  hl,bc]
	jra	l_05cc                             	| [$05d9: jr   $05CC]
l_05db:
	st.b	d7                           	| [$05db: scf]
continues_to_next_line_05dc:
	exg	a1,a0                              	| [$05dc: ex   de,hl]
	addq.w	#1,a0                           	| [$05dd: inc  hl]
	jra	l_05c2                             	| [$05de: jr   $05C2]
l_05e0:
	move.b	(a1),d0                         	| [$05e0: ld   a,(de)]
	cmp.b	#0x2E,d0                         	| [$05e1: cp   $2E]
	jeq	l_05db                             	| [$05e3: jr   z,$05DB]
	cmp.b	#0x3F,d0                         	| [$05e5: cp   $3F]
	bne.b	0f                               	| [...]
	rts                                    	| [$05e7: ret  z] [...]
0:
	move.b	#0x10,d0                      	| [$05e8: ld   (hl),$10]
	jbsr	osd_w_videoram
	addq.w	#1,a1                           	| [$05ea: inc  de]
	add.w	d1,a0                            	| [$05eb: add  hl,bc]
	jra	l_05e0                             	| [$05ec: jr   $05E0]

display_credits_05EE:
	move.b	#0x05,d0                        	| [$05ee: ld   a,$05]
	jbsr	display_string_05b2                            	| [$05f0: call $05B2]
	move.b	nb_credits_8802(a6),d0          	| [$05f3: ld   a,(nb_credits_8802)]
	cmp.b	#0x63,d0                         	| [$05f6: cp   $63]
	jcs	l_05fc                             	| [$05f8: jr   c,$05FC]
	move.b	#0x63,d0                        	| [$05fa: ld   a,$63]
l_05fc:
	jbsr	l_062a                            	| [$05fc: call $062A]
	move.b	d0,d1                           	| [$05ff: ld   b,a]
	and.b	#0xF0,d0                         	| [$0600: and  $F0]
	jeq	l_060b                             	| [$0602: jr   z,$060B]
* display number of credits up to 99
	ror.b	#4,d0                            	| [$0604: rrca] * 4
	lea		video_address_of_10_credit_86BF(a6),a0	| [$0608: ld   (video_address_of_10_credit_86BF),a]
	jbsr	osd_w_videoram
l_060b:
	move.b	d1,d0                           	| [$060b: ld   a,b]
	and.b	#0x0F,d0                         	| [$060c: and  $0F]
	lea		video_address_of_credit_unit_869F(a6),a0	| [$060e: ld   (video_address_of_credit_unit_869F),a]
	jbsr	osd_w_videoram
                       	| [$0611: cp   $02]
                       	| [...]
	rts                                    	| [$0613: ret  nz] [...]
0:
 	| [$0614: ld   de,$64C8]
  	| [$0617: ld   bc,$001F] 31


  	| [$061a: ld   a,(de)]
  	| [$061b: dec  de]
   	| [$061c: add  a,b]
  	| [$061d: ld   b,a]
  	| [$061e: dec  c]
 	| [$061f: jr   nz,$061A]
   	| [$0621: cp   $8C]
   	| [...]
 	| [$0623: ret  z] [...]

 	| [$0624: ld   hl,$451E]
   	| [$0627: add  hl,hl]

  	| [$0628: inc  (hl)] changes 8a3c when checksum fails
 	| [$0629: ret]

l_062a:
	move.b	d0,d1                           	| [$062a: ld   b,a]
	and.b	#0x0F,d0                         	| [$062b: and  $0F]
	moveq	#0,d7
	abcd	d7,d0                        	| [$062d: add  a,$00] + daa
	move.b	d0,d2                           	| [$0630: ld   c,a]
	move.b	d1,d0                           	| [$0631: ld   a,b]
	and.b	#0xF0,d0                         	| [$0632: and  $F0]
	jeq	l_0641                             	| [$0634: jr   z,$0641]
	ror.b	#4,d0                            	| [$0636: rrca] * 4
	move.b	d0,d1                           	| [$063a: ld   b,a]
	subq	#1,d1
	CLEAR_XC_FLAGS                         	| [$063b: xor  a]
	clr.b	d0                               	| [$063b: xor  a]
	move.b	#0x16,d7
l_063c:
	abcd	d7,d0                         	| [$063c: add  a,$16] + daa
	dbf	d1,l_063c                             	| [$063f: djnz $063C]
l_0641:
	abcd	d2,d0                            	| [$0641: add  a,c] + daa
	rts                                    	| [$0643: ret]
	
l_0644:
	LOAD_ROM	0x778A,a2                          	| [$0644: ld   ix,$778A]
	clr.b	d3                               	| [$0648: ld   d,$00]
	move.b	(0x00,a2),d0                    	| [$064a: ld   a,(ix+$00)]
	cmp.b	#0xC8,d0                         	| [$064d: cp   $C8]
	jne	l_0667                             	| [$064f: jr   nz,$0667]
	add.b	(0x01,a2),d0                     	| [$0651: add  a,(ix+$01)]
	jcc	l_0657                             	| [$0654: jr   nc,$0657]
	addq.b	#1,d3                           	| [$0656: inc  d]
l_0657:
	add.b	(0x02,a2),d0                     	| [$0657: add  a,(ix+$02)]
	jcc	l_065d                             	| [$065a: jr   nc,$065D]
	addq.b	#1,d3                           	| [$065c: inc  d]
l_065d:
	add.b	(0x03,a2),d0                     	| [$065d: add  a,(ix+$03)]
	jcc	l_0663                             	| [$0660: jr   nc,$0663]
	addq.b	#1,d3                           	| [$0662: inc  d]
l_0663:
	sub.b	d3,d0                            	| [$0663: sub  d]
	cmp.b	#0x59,d0                         	| [$0664: cp   $59]
	bne.b	0f                               	| [...]
	rts                                    	| [$0666: ret  z] [...]
0:
l_0667:
	move.b	#0x01,d0                        	| [$0667: ld   a,$01]
	move.b	d0,l_8DF8(a6)                   	| [$0669: ld   ($8DF8),a]
	rts                                    	| [$066c: ret]

pooyan_irq:
irq_066D:
	move.w	d0,-(sp)                        	| [$066d: push af]
	movem.w	d1/d2,-(sp)                    	| [$066e: push bc]
	move.l	a4,-(sp)                        	| [$066e: push bc]
	movem.w	D3/D4,-(sp)                    	| [$066f: push de]
	move.l	a1,-(sp)                        	| [$066f: push de]

	move.l	a0,-(sp)                        	| [$0670: push hl]
	move.w	d7,-(sp)                              	| [$0671: ex   af,af']
	jbsr	exx                               	| [$0672: exx]
	move.w	d0,-(sp)                        	| [$0673: push af]
	movem.w	d1/d2,-(sp)                    	| [$0674: push bc]
	move.l	a4,-(sp)                        	| [$0674: push bc]
	movem.w	D3/D4,-(sp)                    	| [$0675: push de]
	move.l	a1,-(sp)                        	| [$0675: push de]

	move.l	a0,-(sp)                        	| [$0676: push hl]

	move.l	a2,-(sp)                        	| [$0677: push ix]

	move.l	a3,-(sp)                        	| [$0679: push iy]
	CLEAR_XC_FLAGS                         	| [$067b: xor  a]
	            	| [$067b: xor  a]
	               	| [$067c: ld   (mainlatch_a180),a]
	lea	sprite_shadow_ram_8840(a6),a0      	| [$067f: ld   hl,sprite_shadow_ram_8840]
	lea	sprite_ram_9000+0x410,a2                          	| [$0682: ld   ix,$9410]
	lea	sprite_ram_9000+0x10,a1                          	| [$0686: ld   de,$9010]
	move.b	#0x04,d1                        	| [$0689: ld   b,$04]
	move.b	in_game_sub_state_880A(a6),d0   	| [$068b: ld   a,(in_game_sub_state_880A)]
	cmp.b	#0x04,d0                         	| [$068e: cp   $04]
	jeq	l_0696                             	| [$0690: jr   z,$0696]
	move.b	#0x18,d1                        	| [$0692: ld   b,$18]
	jra	l_06ae                             	| [$0694: jr   $06AE]
l_0696:
	jbsr	update_sprites_0714               	| [$0696: call update_sprites_0714]
	lea	sprite_shadow_ram_8840+0x3C(a6),a0     	| [$0699: ld   hl,sprite_shadow_ram_8840+$3C]
	move.b	#0x03,d1                        	| [$069c: ld   b,$03]
	jbsr	update_sprites_0714               	| [$069e: call update_sprites_0714]
	lea	sprite_shadow_ram_8840+0x10(a6),a0     	| [$06a1: ld   hl,sprite_shadow_ram_8840+$10]
	move.b	#0x0B,d1                        	| [$06a4: ld   b,$0B]
	jbsr	update_sprites_0714               	| [$06a6: call update_sprites_0714]
	lea	sprite_shadow_ram_8840+0x48(a6),a0     	| [$06a9: ld   hl,sprite_shadow_ram_8840+$48]
	move.b	#0x06,d1                        	| [$06ac: ld   b,$06]
l_06ae:
	jbsr	update_sprites_0714               	| [$06ae: call update_sprites_0714]
	                	| [$06b1: ld   (watchdog_a000),a]
	move.b	l_8815(a6),d0                   	| [$06b4: ld   a,($8815)]
	move.b	d0,l_8816(a6)                   	| [$06b7: ld   ($8816),a]
	move.b	l_8813(a6),d0                   	| [$06ba: ld   a,($8813)]
	move.b	d0,l_8815(a6)                   	| [$06bd: ld   ($8815),a]
	LOAD_RAM_POINTER	copy_of_inputs_8810(a6),a0             	| [$06c0: ld   hl,($8810)]
	STORE_RAM_POINTER	a0,l_8813(a6)            	| [$06c3: ld   ($8813),hl]
	
	*lea	l_8812(a6),a0                      	| [$06c6: ld   hl,$8812]
	*move.b	in2_a0c0,d0                     	| [$06c9: ld   a,(in2_a0c0)]
	*not.b	d0                               	| [$06cc: cpl]
	*move.b	d0,(a0)                         	| [$06cd: ld   (hl),a]
	subq.w	#1,a0                           	| [$06ce: dec  hl]
	*move.b	in1_a0a0,d0                     	| [$06cf: ld   a,(in1_a0a0)]
	*not.b	d0                               	| [$06d2: cpl]
	*move.b	d0,(a0)                         	| [$06d3: ld   (hl),a]
	*subq.w	#1,a0                           	| [$06d4: dec  hl]
	lea		copy_of_inputs_8810(a6),a0
	jbsr	osd_read_inputs_0                     	| [$06d5: ld   a,(in0_a080)]
	not.b	d0                               	| [$06d8: cpl]
	move.b	d0,(a0)                         	| [$06d9: ld   (hl),a]
	lea	l_883F(a6),a0                      	| [$06da: ld   hl,$883F]
	subq.b	#1,(a0)                         	| [$06dd: dec  (hl)]
	lea	l_8A5F(a6),a0                      	| [$06de: ld   hl,$8A5F]
	subq.b	#1,(a0)                         	| [$06e1: dec  (hl)]
	jbsr	l_59e8                            	| [$06e2: call $59E8]
	jbsr	l_0e64                            	| [$06e5: call $0E64]
	lea	continue_06FA,a0                   	| [$06e8: ld   hl,continue_06FA]

	move.l	a0,-(sp)                        	| [$06eb: push hl]
	move.b	game_state_8805(a6),d0          	| [$06ec: ld   a,(game_state_8805)]
	jbsr	jump_from_table_below_0028                            	| [$06ef: rst  $28]
jump_table_06FF:
	.long	title_erase_a_column_072d
	.long	title_screens_0899
	.long	push_start_screen_0C4E
	.long	in_game_159B
	.long	l_0e53

continue_06FA:
	move.b	cabinet_upright_881F(a6),d0                   	| [$06fa: ld   a,($881F)]
	*move.b	d0,l_A187                       	| [$06fd: ld   ($A187),a]
	move.l	(sp)+,a3                        	| [$0700: pop  iy]
	move.l	(sp)+,a2                        	| [$0702: pop  ix]
	move.l	(sp)+,a0                        	| [$0704: pop  hl]
	move.l	(sp)+,a1                        	| [$0705: pop  de]
	movem.w	(sp)+,D3/D4                    	| [$0705: pop  de]
	move.l	(sp)+,a4                        	| [$0706: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$0706: pop  bc]
	move.w	(sp)+,d0                        	| [$0707: pop  af]
	jbsr	exx                               	| [$0708: exx]
	move.w	(sp)+,d7                              	| [$0709: ex   af,af']
	move.l	(sp)+,a0                        	| [$070a: pop  hl]
	move.l	(sp)+,a1                        	| [$070b: pop  de]
	movem.w	(sp)+,D3/D4                    	| [$070b: pop  de]
	move.l	(sp)+,a4                        	| [$070c: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$070c: pop  bc]
											| [$070d: ld   a,$01]
											| [$070f: ld   (mainlatch_a180),a]
	move.w	(sp)+,d0                        	| [$0712: pop  af]
	rts                                    	| [$0713: ret]

* < HL: source
* < IX: sprite pointer $90xx
* < B: number of sprites to update
update_sprites_0714:
	move.b	(a0)+,d0                         	| [$0714: ld   a,(hl)]
	move.b	d0,(0x01,a2)                    	| [$0715: ld   (ix+$01),a]
	                           	| [$0718: inc  l]
	move.b	(a0)+,d0                         	| [$0719: ld   a,(hl)]
	move.b	d0,(a2)                    	| [$071a: ld   (ix+$00),a]
	                           	| [$071d: inc  l]
	move.b	(a0)+,(a1)+                         	| [$071e: ld   a,(hl)]
	                        	| [$071f: ld   (de),a]
	                           	| [$0720: inc  de]
	                           	| [$0721: inc  l]
	move.b	(a0)+,(a1)+                         	| [$0722: ld   a,(hl)]
	                       	| [$0723: ld   (de),a]
	                       	| [$0724: inc  de]
	                       	| [$0725: inc  l]
	                           	| [$0726: inc  ix]

	addq.w	#2,a2                           	| [$0728: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	update_sprites_0714                	| [$072a: djnz update_sprites_0714]
	rts                                    	| [$072c: ret]

title_erase_a_column_072d:
	move.b	#0x20,d1                        	| [$072d: ld   b,$20]
	jbsr	erase_a_column_02ce                            	| [$072f: call $02CE]
	beq.b	0f                               	| [...]
	rts                                    	| [$0732: ret  nz] [...]
0:
	* all columns erased from screen
	                  	| [$0733: ld   a,($8FFF)]
											| [$0736: cp   $10]
										| [$0738: jp   nz,$020F]
	lea	l_8806(a6),a0                      	| [$073b: ld   hl,$8806]
	clr.b	(a0)                             	| [$073e: ld   (hl),$00]
	subq.w	#1,a0                           	| [$0740: dec  hl]
	move.b	#0x01,(a0)                      	| [$0741: ld   (hl),$01]
	clr.b	d0                               	| [$0743: xor  a]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$0744: ld   (in_game_sub_state_880A),a]
	LOAD_ROM	0x0779,a4                          	| [$0747: ld   bc,$0779]
	jbsr	l_075d                            	| [$074a: call $075D]
	move.w	#0x0604,d3                          	| [$074d: ld   de,$0604]
	jbsr	update_88A0_0038                            	| [$0750: rst  $38]
	move.w	#0x0500,d3                          	| [$0751: ld   de,$0500]
	jbsr	update_88A0_0038                            	| [$0754: rst  $38]
	move.b	#0x02,d3                        	| [$0755: ld   e,$02]
	jbsr	update_88A0_0038                            	| [$0757: rst  $38]
	clr.b	d0                               	| [$0758: xor  a]
	move.b	d0,title_sub_state_8E51(a6)     	| [$0759: ld   (title_sub_state_8E51),a]
	rts                                    	| [$075c: ret]

* < A4
l_075d:
	lea	l_8040(a6),a0                      	| [$075d: ld   hl,$8040]
	move.w	#0x0020,d3                      	| [$0760: ld   de,$0020] 32
l_0763:
	move.b	(a4),d0                         	| [$0763: ld   a,(bc)]
	move.b	d0,(a0)                         	| [$0764: ld   (hl),a]
	add.w	d3,a0                            	| [$0765: add  hl,de]
	LOAD_D5D6_FROM_A0_RAM
	move.b	d5,d0                           	| [$0766: ld   a,h]
	cmp.b	#0x84,d0                         	| [$0767: cp   $84]
	jcs	l_0763                             	| [$0769: jr   c,$0763]
	move.b	#0x80,d5                        	| [$076b: ld   h,$80]
	bset.b	#6,d6                           	| [$076d: set  6,l]
	LOAD_A0_FROM_D5D6
	addq.w	#1,a4                           	| [$076f: inc  bc]
	addq.w	#1,a0                           	| [$0770: inc  l]
	LOAD_D5D6_FROM_A0_RAM
	move.b	d6,d0                           	| [$0771: ld   a,l]
	and.b	#0x1F,d0                         	| [$0772: and  $1F]
	cmp.b	#0x1F,d0                         	| [$0774: cp   $1F]
	jcs	l_0763                             	| [$0776: jr   c,$0763]
	rts                                    	| [$0778: ret]

title_screens_0899:
	pea	l_0bb5(pc)                          	| [$0899: ld   hl,$0BB5]

	                        	| [$089c: push hl]
	move.b	title_sub_state_8E51(a6),d0     	| [$089d: ld   a,(title_sub_state_8E51)]
	jbsr	jump_from_table_below_0028                            	| [$08a0: rst  $28]
	.long	init_title_screens_08B3
	.long	title_display_play_08E9
	.long	clear_screen_092c
	.long	wait_while_score_table_shown_0986
	.long	clear_screen_introduce_characters_099c
	.long	animate_characters_0ac8
	.long	character_introduction_related_0b32
	.long	pigs_arrive_during_title_7442
	.long	intro_balloons_rise_76ea

init_title_screens_08B3:
l_08b3:
	CLEAR_XC_FLAGS                         	| [$08b3: xor  a]
	clr.b	d0                               	| [$08b3: xor  a]
											| [$08b4: ld   ($A028),a]
	move.b	d0,l_8819(a6)                   	| [$08b7: ld   ($8819),a]
	jbsr	l_02e3                            	| [$08ba: call $02E3]
	lea	title_sub_state_8E51(a6),a0        	| [$08bd: ld   hl,title_sub_state_8E51]
	addq.b	#1,(a0)                         	| [$08c0: inc  (hl)]
											| [$08c1: ld   bc,$64D5]
												| [$08c4: ld   l,$00]
											| [$08c6: ld   h,l]
										
											| [$08c7: ld   a,(bc)]
												| [$08c8: cp   $96]
											| [$08ca: jr   z,$08D4]
												| [$08cc: add  a,h]
											| [$08cd: jr   nc,$08D0]
											| [$08cf: inc  l]
										
											| [$08d0: ld   h,a]
											| [$08d1: dec  bc]
											| [$08d2: jr   $08C7]
										
												| [$08d4: sub  l]
												| [$08d5: cp   $8F]
											| [$08d7: jr   z,$08DE]
											| [$08d9: ld   a,$01]
															| [$08db: ld   ($89FB),a]
l_08de:
	CLEAR_XC_FLAGS                         	| [$08de: xor  a]
	clr.b	d0                               	| [$08de: xor  a]
	move.b	d0,l_8806(a6)                   	| [$08df: ld   ($8806),a]
	jbsr	l_02b9                            	| [$08e2: call $02B9]
	jbsr	l_1d0d                            	| [$08e5: call $1D0D]
	rts                                    	| [$08e8: ret]

title_display_play_08E9:
l_08e9:
	move.b	#0x1D,d1                        	| [$08e9: ld   b,$1D]
	jbsr	erase_a_column_02ce                            	| [$08eb: call $02CE]
	beq.b	0f                               	| [...]
	rts                                    	| [$08ee: ret  nz] [...]
0:
	jbsr	l_02e3                            	| [$08ef: call $02E3]
l_08f2:
	LOAD_ROM	0x0859,a0                          	| [$08f2: ld   hl,$0859]
	move.b	#0x1F,d1                        	| [$08f5: ld   b,$1F]
	move.b	(a0),d0                         	| [$08f7: ld   a,(hl)]
l_08f8:
	addq.w	#1,a0                           	| [$08f8: inc  hl]
	add.b	(a0),d0                          	| [$08f9: add  a,(hl)]
	subq.b	#1,d1                           	| [...]
	jne	l_08f8                             	| [$08fa: djnz $08F8]
	cmp.b	#0x63,d0                         	| [$08fc: cp   $63]
	jne	l_08f2                             	| [$08fe: jr   nz,$08F2]
	LOAD_ROM	0x0859,a4                          	| [$0900: ld   bc,$0859]
	jbsr	l_075d                            	| [$0903: call $075D]
	LOAD_ROM	0x0831,a0                          	| [$0906: ld   hl,$0831]
	move.b	#0x08,d1                        	| [$0909: ld   b,$08]
	move.b	(a0),d0                         	| [$090b: ld   a,(hl)]
l_090c:
	addq.w	#1,a0                           	| [$090c: inc  hl]
	add.b	(a0),d0                          	| [$090d: add  a,(hl)]
	subq.b	#1,d1                           	| [...]
	jne	l_090c                             	| [$090e: djnz $090C]
	cmp.b	#0xAA,d0                         	| [$0910: cp   $AA]
	jne	l_08f2                             	| [$0912: jr   nz,$08F2]
	jbsr	l_0e54                            	| [$0914: call $0E54]
	move.w	#0x0611,d3                          	| [$0917: ld   de,$0611]
	jbsr	update_88A0_0038                            	| [$091a: rst  $38]
	move.b	#0x0B,d3                        	| [$091b: ld   e,$0B]
	jbsr	update_88A0_0038                            	| [$091d: rst  $38]
	lea	title_sub_state_8E51(a6),a0        	| [$091e: ld   hl,title_sub_state_8E51]
* change state to 7
	move.b	#0x07,(a0)                      	| [$0921: ld   (hl),$07]
	rts                                    	| [$0923: ret]
l_0937:
	ILLEGAL
l_0929:
	move.b	d1,d1                           	| [$0929: ld   b,b]
	SET_C_FROM_X
	jcs	l_0937                             	| [$092a: jr   c,$0937]

clear_screen_092c:
	move.b	#0x19,d1                        	| [$092c: ld   b,$19]
l_092e:
	jbsr	erase_a_column_02ce                            	| [$092e: call $02CE]
	beq.b	0f                               	| [...]
	rts                                    	| [$0931: ret  nz] [...]
0:
	jbsr	l_02e3                            	| [$0932: call $02E3]
	* next title state (after title has displayed)
	lea	title_sub_state_8E51(a6),a0        	| [$0935: ld   hl,title_sub_state_8E51]
	addq.b	#1,(a0)                         	| [$0938: inc  (hl)]
	jbsr	l_02b9                            	| [$0939: call $02B9]
												| [$093c: ld   hl,$07F5]
												| [$093f: ld   a,$11]
							
												| [$0941: cp   (hl)]
												| [$0942: jr   nz,$0941]
												| [$0944: ld   ix,$0838]
												| [$0948: ld   b,$07]
l_094a:
	* another code checksum or rom compare, just after
	* title is displayed. If rom corrupt, reboots
											| [$094a: ld   hl,$0976]
												| [$094d: ld   a,b]
																	| [$094e: call $0C45]
												| [$0951: ld   a,$1C]
												| [$0953: add  a,e]
												| [$0954: ld   e,a]
											| [$0955: jr   nc,$0958]
												| [$0957: inc  d]
										
												| [$0958: ld   a,(de)]
												| [$0959: ld   c,a]
												| [$095a: ld   a,(ix+$00)]
												| [$095d: cp   c]
												| [$095e: jr   nz,$0976]
												| [$0960: dec  ix]
												| [...]
												| [$0962: djnz $094A]
	LOAD_ROM	0x07D9,a4                          	| [$0964: ld   bc,$07D9]
	jbsr	l_075d                            	| [$0967: call $075D]
	move.w	#0x068B,d3                          	| [$096a: ld   de,$068B]
	jbsr	update_88A0_0038                            	| [$096d: rst  $38]
	move.b	#0x8E,d3                        	| [$096e: ld   e,$8E]
	jbsr	update_88A0_0038                            	| [$0970: rst  $38]
	move.w	#0x0200,d3                          	| [$0971: ld   de,$0200]
	jbsr	update_88A0_0038                            	| [$0974: rst  $38]
	rts                                    	| [$0975: ret]

wait_while_score_table_shown_0986:
	lea	high_score_table_timer_8E50(a6),a0                      	| [$0986: ld   hl,$8E50]
	subq.b	#1,(a0)                         	| [$0989: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$098a: ret  nz] [...]
0:
	jbsr	l_02b9                            	| [$098b: call $02B9]
	jbsr	l_02e3                            	| [$098e: call $02E3]
	lea	title_sub_state_8E51(a6),a0        	| [$0991: ld   hl,title_sub_state_8E51]
	addq.b	#1,(a0)                         	| [$0994: inc  (hl)]
	LOAD_ROM	0x0B26,a0                          	| [$0995: ld   hl,$0B26]
	STORE_ROM_POINTER	a0,ram_pointer_8f48(a6)            	| [$0998: ld   ($8F48),hl]
	
	rts                                    	| [$099b: ret]

clear_screen_introduce_characters_099c:
	move.b	#0x19,d1                        	| [$099c: ld   b,$19]
	jbsr	erase_a_column_02ce                            	| [$099e: call $02CE]
	beq.b	0f                               	| [...]
	rts                                    	| [$09a1: ret  nz] [...]
0:
											| [$09a2: ld   d,$0D]
										| [$09a4: ld   hl,$0A65]
										| [$09a7: ld   bc,$07C9]
								
											| [$09aa: ld   a,(bc)]
											| [$09ab: sub  (hl)]
										| [$09ac: jr   nz,$09AA]
											| [$09ae: inc  bc]
											| [$09af: inc  hl]
											| [$09b0: dec  d]
										| [$09b1: jr   nz,$09AA]
	LOAD_ROM	0x07B9,a4                          	| [$09b3: ld   bc,$07B9]
	jbsr	l_075d                            	| [$09b6: call $075D]
	move.w	#0x060D,d3                          	| [$09b9: ld   de,$060D]
	jbsr	update_88A0_0038                            	| [$09bc: rst  $38]
	lea	l_8B70(a6),a0                      	| [$09bd: ld   hl,$8B70]
	CLEAR_XC_FLAGS                         	| [$09c0: xor  a]
	clr.b	d0                               	| [$09c0: xor  a]
	move.b	d0,d1                           	| [$09c1: ld   b,a]
	jbsr	fill_area_0010                            	| [$09c2: rst  $10]
	LOAD_ROM	0x0A76,a0                          	| [$09c3: ld   hl,$0A76]
	LOAD_ROM	0x0A7E,a1                          	| [$09c6: ld   de,$0A7E]
	lea	l_8B70(a6),a2                      	| [$09c9: ld   ix,$8B70]
l_09cd:
	jbsr	l_0a0c                            	| [$09cd: call $0A0C]
	move.w	#0x0018,d1                      	| [$09d0: ld   bc,$0018] 24
	add.w	d1,a2                            	| [$09d3: add  ix,bc]
	move.b	(a1),d0                         	| [$09d5: ld   a,(de)]
	addq.b	#1,d0                           	| [$09d6: inc  a]
	jne	l_09cd                             	| [$09d7: jr   nz,$09CD]
	jbsr	l_0a52                            	| [$09d9: call $0A52]
	jbsr	l_0a25                            	| [$09dc: call $0A25]
	LOAD_ROM	0x0A87,a0                          	| [$09df: ld   hl,$0A87]
	STORE_ROM_POINTER	a0,rom_pointer_8e54(a6)            	| [$09e2: ld   ($8E54),hl]
	
	lea	l_8648(a6),a0                      	| [$09e5: ld   hl,$8648]
	STORE_RXM_POINTER	a0,ram_or_rom_pointer_8e56(a6)            	| [$09e8: ld   ($8E56),hl]
	
	lea	high_score_table_timer_8E50(a6),a0                      	| [$09eb: ld   hl,$8E50]
	move.b	#0x32,(a0)+                      	| [$09ee: ld   (hl),$32]
	                           	| [$09f0: inc  l]
	addq.b	#1,(a0)+                         	| [$09f1: inc  (hl)]
	                           	| [$09f2: inc  l]
	move.b	#0x0D,(a0)+                      	| [$09f3: ld   (hl),$0D]
	                           	| [$09f5: inc  l]
	move.b	#0x05,(a0)                      	| [$09f6: ld   (hl),$05]
l_09f8:
	lea	l_8B70(a6),a2                      	| [$09f8: ld   ix,$8B70]
	move.b	#0x04,d1                        	| [$09fc: ld   b,$04]
	move.w	#0x0018,d3                      	| [$09fe: ld   de,$0018] 24
l_0a01:
	jbsr	l_4006                            	| [$0a01: call $4006]
	add.w	d3,a2                            	| [$0a04: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0a01                             	| [$0a06: djnz $0A01]
	jbsr	update_sprite_shadows_02EF        	| [$0a08: call update_sprite_shadows_02EF]
	rts                                    	| [$0a0b: ret]
l_0a0c:
	move.b	(a1)+,d0                         	| [$0a0c: ld   a,(de)]
	move.b	d0,(0x06,a2)                    	| [$0a0d: ld   (ix+$06),a]
	                           	| [$0a10: inc  de]
	move.b	(a1)+,d0                         	| [$0a11: ld   a,(de)]
	                           	| [$0a12: inc  de]
	move.b	d0,(0x04,a2)                    	| [$0a13: ld   (ix+$04),a]
	move.b	(a0)+,d0                         	| [$0a16: ld   a,(hl)]
	move.b	d0,(0x0c,a2)                    	| [$0a17: ld   (ix+$0c),a]
	                           	| [$0a1a: inc  hl]
	move.b	(a0)+,d0                         	| [$0a1b: ld   a,(hl)]
	move.b	d0,(0x0d,a2)                    	| [$0a1c: ld   (ix+$0d),a]
	clr.b	(0x0e,a2)                        	| [$0a1f: ld   (ix+$0e),$00]
	                           	| [$0a23: inc  hl]
	rts                                    	| [$0a24: ret]
l_0a25:
	lea	character_animation_timer_8D41(a6),a0                      	| [$0a25: ld   hl,$8D41]
l_0a28:
	move.b	#0x0A,(a0)                      	| [$0a28: ld   (hl),$0A]
	                           	| [$0a2a: dec  l]
	move.b	-(a0),d0                         	| [$0a2b: ld   a,(hl)]
	addq.b	#1,(a0)                         	| [$0a2c: inc  (hl)]
	and.b	#0x03,d0                         	| [$0a2d: and  $03]
	LOAD_ROM	0x26F6,a0                          	| [$0a2f: ld   hl,$26F6]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$0a32: call $0C45]
	move.l	a1,-(sp)                        	| [$0a35: push de]
	lea	l_866A(a6),a0                      	| [$0a36: ld   hl,$866A]
	jbsr	l_0a40                            	| [$0a39: call $0A40]
	move.l	(sp)+,a1                        	| [$0a3c: pop  de]
	lea	l_86AA(a6),a0                      	| [$0a3d: ld   hl,$86AA]
l_0a40:
	move.w	#0x0020,d1                      	| [$0a40: ld   bc,$0020] 32
	move.b	(a1)+,d0                         	| [$0a43: ld   a,(de)]
	move.b	d0,(a0)+                         	| [$0a44: ld   (hl),a]
	                           	| [$0a45: inc  l]
	                           	| [$0a46: inc  de]
	move.b	(a1)+,d0                         	| [$0a47: ld   a,(de)]
	move.b	d0,(a0)                         	| [$0a48: ld   (hl),a]
	add.w	d1,a0                            	| [$0a49: add  hl,bc]
	                           	| [$0a4a: inc  de]
	move.b	(a1)+,d0                         	| [$0a4b: ld   a,(de)]
	move.b	d0,(a0)                         	| [$0a4c: ld   (hl),a]
	subq.w	#1,a0                           	| [$0a4d: dec  l]
	                           	| [$0a4e: inc  de]
	move.b	(a1),d0                         	| [$0a4f: ld   a,(de)]
	move.b	d0,(a0)                         	| [$0a50: ld   (hl),a]
	rts                                    	| [$0a51: ret]
l_0a52:
	lea	l_82AA(a6),a0                      	| [$0a52: ld   hl,$82AA]
	LOAD_ROM	0x0A72,a1                          	| [$0a55: ld   de,$0A72]
	jbsr	l_0a40                            	| [$0a58: call $0A40]
	lea	l_826A(a6),a0                      	| [$0a5b: ld   hl,$826A]
	LOAD_ROM	0x0A72,a1                          	| [$0a5e: ld   de,$0A72]
	jbsr	l_0a40                            	| [$0a61: call $0A40]
	rts                                    	| [$0a64: ret]

animate_characters_0ac8:
	lea		character_animation_timer_8D41(a6),a0	| [$0ac8: ld   hl,$8D41]
	subq.b	#1,(a0)                         	| [$0acb: dec  (hl)]
	jne	l_0ad1                             	| [$0acc: jr   nz,$0AD1]
	jbsr	l_0a28                            	| [$0ace: call $0A28]
l_0ad1:
	jbsr	l_09f8                            	| [$0ad1: call $09F8]
	lea	high_score_table_timer_8E50(a6),a0                      	| [$0ad4: ld   hl,$8E50]
	subq.b	#1,(a0)                         	| [$0ad7: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$0ad8: ret  nz] [...]
0:
	move.b	#0x02,d0                      	| [$0ad9: ld   (hl),$02]
	jbsr	osd_w_videoram
	LOAD_ROM_POINTER	rom_pointer_8e54(a6),a0             	| [$0adb: ld   hl,($8E54)]
	move.b	(a0)+,d0                         	| [$0ade: ld   a,(hl)]
	                           	| [$0adf: inc  hl]
	STORE_ROM_POINTER	a0,rom_pointer_8e54(a6)            	| [$0ae0: ld   ($8E54),hl]
	
	LOAD_RXM_POINTER	ram_or_rom_pointer_8e56(a6),a0             	| [$0ae3: ld   hl,($8E56)]

	jbsr	osd_w_videoram                         	| [$0ae6: ld   (hl),a] write name of character to screen
	move.w	#-0x20,d3                          	| [$0ae7: ld   de,$FFE0] next char
	add.w	d3,a0                            	| [$0aea: add  hl,de]
	STORE_RXM_POINTER	a0,ram_or_rom_pointer_8e56(a6)            	| [$0aeb: ld   ($8E56),hl]
	
	lea	l_8E52(a6),a0                      	| [$0aee: ld   hl,$8E52]
	subq.b	#1,(a0)                         	| [$0af1: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$0af2: ret  nz] [...]
0:
	move.b	#0x0D,(a0)                      	| [$0af3: ld   (hl),$0D]
	lea	high_score_table_timer_8E50(a6),a0                      	| [$0af5: ld   hl,$8E50]
	move.b	#0x14,(a0)+                      	| [$0af8: ld   (hl),$14]
	                           	| [$0afa: inc  l]
	addq.b	#1,(a0)                         	| [$0afb: inc  (hl)]
	LOAD_RXM_POINTER	ram_or_rom_pointer_8e56(a6),a0             	| [$0afc: ld   hl,($8E56)]
	move.w	#0x0000,d3                      	| [$0aff: ld   de,$0000] 0
	move.b	#0x0E,d1                        	| [$0b02: ld   b,$0E]
l_0b04:
	move.b	(a0),d0                         	| [$0b04: ld   a,(hl)]
	add.b	d4,d0                            	| [$0b05: add  a,e]
	move.b	d0,d4                           	| [$0b06: ld   e,a]
	SET_C_FROM_X
	jcc	l_0b0a                             	| [$0b07: jr   nc,$0B0A]
	addq.b	#1,d3                           	| [$0b09: inc  d]
l_0b0a:
	add.w	#0x20,a0                        	| [$0b0a: ld   a,$20]
												| [$0b0c: add  a,l]
												| [$0b0d: ld   l,a]
												| [$0b0e: jr   nc,$0B11]
											
												| [$0b10: inc  h]
l_0b11:
	subq.b	#1,d1                           	| [...]
	jne	l_0b04                             	| [$0b11: djnz $0B04]
	LOAD_RAM_POINTER	ram_pointer_8f48(a6),a0             	| [$0b13: ld   hl,($8F48)]
	move.b	(a0),d0                         	| [$0b16: ld   a,(hl)]
	cmp.b	d4,d0                            	| [$0b17: cp   e]
	jne	pigs_arrive_during_title_7442      	| [$0b18: jp   nz,pigs_arrive_during_title_7442]
	addq.w	#1,a0                           	| [$0b1b: inc  hl]
	move.b	(a0),d0                         	| [$0b1c: ld   a,(hl)]
	cmp.b	d3,d0                            	| [$0b1d: cp   d]
	jne	intro_balloons_rise_76ea                             	| [$0b1e: jp   nz,$76EA]
	addq.w	#1,a0                           	| [$0b21: inc  hl]
	STORE_RAM_POINTER	a0,ram_pointer_8f48(a6)            	| [$0b22: ld   ($8F48),hl]
	
	rts                                    	| [$0b25: ret]


* called until next character name is displayed
character_introduction_related_0b32:
	lea	l_82BC(a6),a0                      	| [$0b32: ld   hl,$82BC]
	move.w    #0xFFE0,d3                          	| [$0b35: ld   de,$FFE0]
	move.b	#0x0A,d1                        	| [$0b38: ld   b,$0A]
l_0b3a:
	move.b	(a0),d0                         	| [$0b3a: ld   a,(hl)]
	add.w	d3,a0                            	| [$0b3b: add  hl,de]
	cmp.b	(a0),d0                          	| [$0b3c: cp   (hl)]
	jne	l_08b3                             	| [$0b3d: jp   nz,$08B3]
	subq.b	#1,d1                           	| [...]
	jne	l_0b3a                             	| [$0b40: djnz $0B3A]
	lea	character_animation_timer_8D41(a6),a0                      	| [$0b42: ld   hl,$8D41]
	subq.b	#1,(a0)                         	| [$0b45: dec  (hl)]
	jne	l_0b4b                             	| [$0b46: jr   nz,$0B4B]
	jbsr	l_0a28                            	| [$0b48: call $0A28]
l_0b4b:
	jbsr	l_09f8                            	| [$0b4b: call $09F8]
	lea	high_score_table_timer_8E50(a6),a0                      	| [$0b4e: ld   hl,$8E50]
	subq.b	#1,(a0)                         	| [$0b51: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$0b52: ret  nz] [...]
0:
	move.b	#0x01,(a0)+                      	| [$0b53: ld   (hl),$01]
	                           	| [$0b55: inc  l]
	subq.b	#1,(a0)                         	| [$0b56: dec  (hl)]
	move.b	l_8E53(a6),d0                   	| [$0b57: ld   a,($8E53)]
	subq.b	#1,d0                           	| [$0b5a: dec  a]
	LOAD_ROM	0x0BAB,a0                          	| [$0b5b: ld   hl,$0BAB]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$0b5e: call $0C45]
	STORE_RXM_POINTER	a1,ram_or_rom_pointer_8e56(a6)            	| [$0b61: ld   ($8E56),de]
	
	lea	l_8E53(a6),a0                      	| [$0b65: ld   hl,$8E53]
	subq.b	#1,(a0)                         	| [$0b68: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$0b69: ret  nz] [...]
0:
	lea	high_score_table_timer_8E50(a6),a0                      	| [$0b6a: ld   hl,$8E50]
	move.b	#0x96,(a0)+                      	| [$0b6d: ld   (hl),$96]
	                           	| [$0b6f: inc  l]
	clr.b	d0                               	| [$0b70: xor  a]
	move.b	d0,(a0)                         	| [$0b71: ld   (hl),a]
	lea	l_8462(a6),a0                      	| [$0b72: ld   hl,$8462]
	move.b	d0,d3                           	| [$0b75: ld   d,a]
	move.b	d0,d4                           	| [$0b76: ld   e,a]
	move.b	#0x0E,d2                        	| [$0b77: ld   c,$0E]
l_0b79:
	move.b	#0x1D,d1                        	| [$0b79: ld   b,$1D]
l_0b7b:
	move.b	d4,d0                           	| [$0b7b: ld   a,e]
	add.b	(a0),d0                          	| [$0b7c: add  a,(hl)]
	jcc	l_0b80                             	| [$0b7d: jr   nc,$0B80]
	addq.b	#1,d3                           	| [$0b7f: inc  d]
l_0b80:
	move.b	d0,d4                           	| [$0b80: ld   e,a]
	addq.w	#1,a0                           	| [$0b81: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0b7b                             	| [$0b82: djnz $0B7B]
	                           	| [$0b84: ld   a,l]
	addq.w	#0x03,a0                        	| [$0b85: add  a,$03]
												| [$0b87: ld   l,a]
												| [$0b88: jr   nc,$0B8B]
												| [$0b8a: inc  h]
l_0b8b:
	subq.b	#1,d2                           	| [$0b8b: dec  c]
	jne	l_0b79                             	| [$0b8c: jr   nz,$0B79]
	LOAD_RAM_POINTER	ram_pointer_8f48(a6),a0             	| [$0b8e: ld   hl,($8F48)]
	move.b	d4,d0                           	| [$0b91: ld   a,e]
	cmp.b	(a0),d0                          	| [$0b92: cp   (hl)]
	jne	l_08b3                             	| [$0b93: jp   nz,$08B3]
	addq.w	#1,a0                           	| [$0b96: inc  hl]
	move.b	(a0),d0                         	| [$0b97: ld   a,(hl)]
	cmp.b	d3,d0                            	| [$0b98: cp   d]
	jne	l_08e9                             	| [$0b99: jp   nz,$08E9]
	clr.b	d0                               	| [$0b9c: xor  a]
	move.b	d0,ram_pointer_8f48(a6)                   	| [$0b9d: ld   ($8F48),a]
	move.b	d0,l_8F49(a6)                   	| [$0ba0: ld   ($8F49),a]
	move.b	#0x03,d0                        	| [$0ba3: ld   a,$03]
	move.b	d0,game_state_8805(a6)          	| [$0ba5: ld   (game_state_8805),a]
	jra	init_play_0E00                     	| [$0ba8: jp   init_play_0E00]

l_0bb5:
	move.b	l_8806(a6),d0                   	| [$0bb5: ld   a,($8806)]
	                               	| [$0bb8: and  a]
	jne	l_0bfc                             	| [$0bb9: jr   nz,$0BFC]
	move.b	game_state_8805(a6),d0          	| [$0bbb: ld   a,(game_state_8805)]
	subq.b	#1,d0                           	| [$0bbe: dec  a]
	jne	l_0bfc                             	| [$0bbf: jr   nz,$0BFC]
	move.b	title_sub_state_8E51(a6),d0     	| [$0bc1: ld   a,(title_sub_state_8E51)]
	cmp.b	#0x03,d0                         	| [$0bc4: cp   $03]
	jeq	l_0bd0                             	| [$0bc6: jr   z,$0BD0]
	cmp.b	#0x05,d0                         	| [$0bc8: cp   $05]
	jeq	l_0bd0                             	| [$0bca: jr   z,$0BD0]
	cmp.b	#0x08,d0                         	| [$0bcc: cp   $08]
	jne	l_0bfc                             	| [$0bce: jr   nz,$0BFC]
l_0bd0:
	move.w    #0xFFE0,d3                          	| [$0bd0: ld   de,$FFE0]
	lea	l_8EFE(a6),a0                      	| [$0bd3: ld   hl,$8EFE]
	addq.b	#1,(a0)                         	| [$0bd6: inc  (hl)]
	* another rom checksum!!				| [$0bd7: ld   hl,$86BC]
											| [$0bda: ld   bc,$20C2]
										
											| [$0bdd: ld   a,(bc)]
											| [$0bde: sub  (hl)]
											| [$0bdf: jr   nz,$0BF7]
											| [$0be1: add  hl,de]
											| [$0be2: inc  bc]
											| [$0be3: ld   a,(bc)]
											| [$0be4: inc  a]
											| [$0be5: jr   nz,$0BDD]
												| [$0be7: ld   de,$FBC0]
											| [$0bea: add  hl,de]
											| [$0beb: ex   de,hl]
											| [$0bec: ld   hl,$20CB]
											| [$0bef: ld   a,(title_sub_state_8E51)]
																| [$0bf2: rst  $20]
											| [$0bf3: ex   de,hl]
											| [$0bf4: cp   (hl)]
											| [$0bf5: jr   z,$0BFC]
										
											| [$0bf7: ld   a,$01]
															| [$0bf9: ld   ($89E5),a]
l_0bfc:
	move.b	l_882C(a6),d0                   	| [$0bfc: ld   a,($882C)]
	cmp.b	#0x0F,d0                         	| [$0bff: cp   $0F]
	jne	l_0c1c                             	| [$0c01: jr   nz,$0C1C]
	move.b	copy_of_inputs_8810(a6),d0                   	| [$0c03: ld   a,($8810)]
	btst.b	#3,d0                           	| [$0c06: bit  3,a]
	jeq	l_0c13                             	| [$0c08: jr   z,$0C13]
	jbsr	l_0ecf                            	| [$0c0a: call $0ECF]
	move.w	#0x0000,d5                      	| [$0c0d: ld   hl,$0000] 0
	jra	l_0dab                             	| [$0c10: jp   $0DAB]
l_0c13:
	btst.b	#4,d0                           	| [$0c13: bit  4,a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0c15: ret  z] [...]
0:
	jbsr	l_0ecf                            	| [$0c16: call $0ECF]
	jra	l_0da8                             	| [$0c19: jp   $0DA8]
l_0c1c:
	move.b	nb_credits_8802(a6),d0          	| [$0c1c: ld   a,(nb_credits_8802)]
	                               	| [$0c1f: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0c20: ret  z] [...]
0:
	lea	game_state_8805(a6),a0             	| [$0c21: ld   hl,game_state_8805]
	addq.b	#1,(a0)                         	| [$0c24: inc  (hl)]
	CLEAR_XC_FLAGS                         	| [$0c25: xor  a]
	clr.b	d0                               	| [$0c25: xor  a]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$0c26: ld   (in_game_sub_state_880A),a]
	rts                                    	| [$0c29: ret]
	* not reached?
	jbsr	osd_read_inputs_0                     	| [$0c2a: ld   a,(in0_a080)]
	btst.b	#3,d0                           	| [$0c2d: bit  3,a]
	beq.b	0f                               	| [...]
	rts                                    	| [$0c2f: ret  nz] [...]
0:
	move.b	#0x09,d0                        	| [$0c30: ld   a,$09]
	move.b	d0,title_sub_state_8E51(a6)     	| [$0c32: ld   (title_sub_state_8E51),a]
	lea	l_8400(a6),a0                      	| [$0c35: ld   hl,$8400]
	move.b	#0x10,d4                        	| [$0c38: ld   e,$10]
	move.w	#0x03FF,d1                          	| [$0c3a: ld   bc,$03FF]
	LOAD_D1D2_FROM_D1_16
l_0c3d:
	move.b	d4,(a0)                         	| [$0c3d: ld   (hl),e]
	addq.w	#1,a0                           	| [$0c3e: inc  hl]
	subq.w	#1,a4                           	| [$0c3f: dec  bc]
	move.b	d1,d0                           	| [$0c40: ld   a,b]
	or.b	d2,d0                             	| [$0c41: or   c]
	jne	l_0c3d                             	| [$0c42: jr   nz,$0C3D]
	rts                                    	| [$0c44: ret]

* loads a rom pointer or just 16 bit value in some cases...
* > d3 (16 bit rom offset/value)
* > a1: pointer
* < a0: input table
load_16bit_rom_pointer_0c45:
	add.b	d0,d0                            	| [$0c45: add  a,a]
	clr.w	d3                               	| [$0c46: ld   d,$00]
	move.b	d0,d3                           	| [$0c48: ld   e,a]
	add.w	d3,a0                            	| [$0c49: add  hl,de]
	move.b	(a0)+,d4                         	| [$0c4a: ld   e,(hl)]
												| [$0c4b: inc  hl]
	move.b	(a0),d3                         	| [$0c4c: ld   d,(hl)]
	LOAD_D3_16_FROM_D3D4
	move.w	d3,a1
	add.l	#rom_base,a1
	rts                                    	| [$0c4d: ret]

push_start_screen_0C4E:
	LOAD_ROM	0x0D78,a0                          	| [$0c4e: ld   hl,$0D78]

	move.l	a0,-(sp)                        	| [$0c51: push hl]
	move.b	in_game_sub_state_880A(a6),d0   	| [$0c52: ld   a,(in_game_sub_state_880A)]
	jbsr	jump_from_table_below_0028                            	| [$0c55: rst  $28]
jump_table_0C56:
	.long	init_clear_screen_as_first_credit_inserted_0c5c
	.long	clear_screen_as_first_credit_inserted_0c77
	.long	wait_for_start_pushed_0d61

init_clear_screen_as_first_credit_inserted_0c5c:
	CLEAR_XC_FLAGS                         	| [$0c5c: xor  a]
	clr.b	d0                               	| [$0c5c: xor  a]
	move.b	d0,l_8819(a6)                   	| [$0c5d: ld   ($8819),a]
	                       	| [$0c60: ld   ($A028),a]
	move.b	d0,l_8806(a6)                   	| [$0c63: ld   ($8806),a]
	lea	l_8442(a6),a0                      	| [$0c66: ld   hl,$8442]
	STORE_RAM_POINTER	a0,video_ram_pointer_880b(a6)            	| [$0c69: ld   ($880B),hl]
	
	lea	nb_columns_to_erase_8809(a6),a0                      	| [$0c6c: ld   hl,$8809]
	move.b	#0x0F,(a0)                      	| [$0c6f: ld   (hl),$0F]
	addq.w	#1,a0                           	| [$0c71: inc  hl]
	addq.b	#1,(a0)                         	| [$0c72: inc  (hl)]
	jbsr	l_02b9                            	| [$0c73: call $02B9]
	rts                                    	| [$0c76: ret]

clear_screen_as_first_credit_inserted_0c77:
	LOAD_RAM_POINTER	video_ram_pointer_880b(a6),a0             	| [$0c77: ld   hl,($880B)]
	move.b	#0x1D,d1                        	| [$0c7a: ld   b,$1D]
	move.b	#0x10,d0                        	| [$0c7c: ld   a,$10]
	jbsr	fill_area_0010_video                            	| [$0c7e: rst  $10]
	move.w	#0x0003,d3                      	| [$0c7f: ld   de,$0003] 3
	add.w	d3,a0                            	| [$0c82: add  hl,de]
	move.b	#0x1D,d1                        	| [$0c83: ld   b,$1D]
	jbsr	fill_area_0010_video                            	| [$0c85: rst  $10]
	add.w	d3,a0                            	| [$0c86: add  hl,de]
	STORE_RAM_POINTER	a0,video_ram_pointer_880b(a6)            	| [$0c87: ld   ($880B),hl]
	
	lea	nb_columns_to_erase_8809(a6),a0                      	| [$0c8a: ld   hl,$8809]
	subq.b	#1,(a0)                         	| [$0c8d: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$0c8e: ret  nz] [...]
0:
	addq.w	#1,a0                           	| [$0c8f: inc  l]
	addq.b	#1,(a0)                         	| [$0c90: inc  (hl)]
										| [$0c91: ld   hl,$0779]
										| [$0c94: ld   bc,$0000] 0
										| [$0c94: ld   bc,$0000] 0
										| [$0c97: ld   a,(hl)]
							
										| [$0c98: inc  hl]
										| [$0c99: add  a,(hl)]
										| [$0c9a: jr   nc,$0C9D]
										| [$0c9c: inc  c]
							
										| [...]
										| [$0c9d: djnz $0C98]
										| [$0c9f: cp   $C1]
										| [$0ca1: jr   nz,$0C98]
										| [$0ca3: ld   a,c]
										| [$0ca4: cp   $0C]
										| [$0ca6: jr   nz,$0C98]
	LOAD_ROM	0x0779,a4                          	| [$0ca8: ld   bc,$0779]
	jbsr	l_075d                            	| [$0cab: call $075D]
	move.b	d0,current_player_is_p2_880D(a6)                   	| [$0cae: ld   ($880D),a]
	jbsr	l_0e54                            	| [$0cb1: call $0E54]
	jbsr	l_0cf8                            	| [$0cb4: call $0CF8]
	move.w	#0x0601,d3                          	| [$0cb7: ld   de,$0601]
	jbsr	update_88A0_0038                            	| [$0cba: rst  $38]
	move.b	#0x11,d3                        	| [$0cbb: ld   e,$11]
	jbsr	update_88A0_0038                            	| [$0cbd: rst  $38]
	move.b	#0x16,d3                        	| [$0cbe: ld   e,$16]
	jbsr	update_88A0_0038                            	| [$0cc0: rst  $38]
	addq.w	#1,d3                           	| [$0cc1: inc  e]
	move.b	l_8800(a6),d0                   	| [$0cc2: ld   a,($8800)]
	and.b	#0x01,d0                         	| [$0cc5: and  $01]
	jeq	l_0ccb                             	| [$0cc7: jr   z,$0CCB]
	move.b	#0x28,d3                        	| [$0cc9: ld   e,$28]
l_0ccb:
	jbsr	update_88A0_0038                            	| [$0ccb: rst  $38]
	move.b	#0x2A,d3                        	| [$0ccc: ld   e,$2A]
	move.b	l_8800(a6),d0                   	| [$0cce: ld   a,($8800)]
	and.b	#0x01,d0                         	| [$0cd1: and  $01]
	jeq	l_0cd6                             	| [$0cd3: jr   z,$0CD6]
	subq.w	#1,d3                           	| [$0cd5: dec  e]
l_0cd6:
	jbsr	update_88A0_0038                            	| [$0cd6: rst  $38]
	jbsr	l_0f4e                            	| [$0cd7: call $0F4E]
	* legacy rom check...                          	| [$0cda: ld   hl,$0B26]
											| [$0cdd: ld   de,$0000] 0
											| [$0cdd: ld   de,$0000] 0
													| [$0ce0: ld   b,$20]
											
													| [$0ce2: ld   a,(hl)]
													| [$0ce3: add  a,e]
													| [$0ce4: ld   e,a]
												| [$0ce5: jr   nc,$0CE8]
											
													| [$0ce7: inc  d]
											
													| [$0ce8: inc  hl]
													| [...]
												| [$0ce9: djnz $0CE2]
													| [$0ceb: ld   a,e]
													| [$0cec: cp   $D3]
* looks like code was patched, to remove a zillionth checksum check
* but maybe they got fed of that shit!
	                                    	| [$0cee: nop]
	                                    	| [$0cef: nop]
	                                    	| [$0cf0: nop]
	                       	| [$0cf1: ld   a,$0B]
	                        	| [$0cf3: cp   d]
	                                    	| [$0cf4: nop]
	                                    	| [$0cf5: nop]
	                                    	| [$0cf6: nop]
	rts                                    	| [$0cf7: ret]

l_0cf8:
	LOAD_ROM	0x0D2F,a0                          	| [$0cf8: ld   hl,$0D2F]
	lea	l_86A7(a6),a2                      	| [$0cfb: ld   ix,$86A7]
	move.w    #0xFFE0,d3                          	| [$0cff: ld   de,$FFE0]
	move.b	#0x0C,d1                        	| [$0d02: ld   b,$0C]
l_0d04:
	move.b	(a0),d0                         	| [$0d04: ld   a,(hl)]
	move.b	d0,(0x00,a2)                    	| [$0d05: ld   (ix+$00),a]
	addq.w	#1,a0                           	| [$0d08: inc  hl]
	add.w	d3,a2                            	| [$0d09: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0d04                             	| [$0d0b: djnz $0D04]
	move.b	(a0),d0                         	| [$0d0d: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$0d0e: cp   $FF]
	jeq	l_0d21                             	| [$0d10: jr   z,$0D21]
	cmp.b	#0xEE,d0                         	| [$0d12: cp   $EE]
	bne.b	0f                               	| [...]
	rts                                    	| [$0d14: ret  z] [...]
0:
	move.w	#0x0181,d3                          	| [$0d15: ld   de,$0181]
	add.w	d3,a2                            	| [$0d18: add  ix,de]
	move.w    #0xFFE0,d3                          	| [$0d1a: ld   de,$FFE0]
	move.b	#0x0C,d1                        	| [$0d1d: ld   b,$0C]
	jra	l_0d04                             	| [$0d1f: jr   $0D04]
l_0d21:
	LOAD_ROM	0x0D48,a0                          	| [$0d21: ld   hl,$0D48]
	lea	l_82A7(a6),a2                      	| [$0d24: ld   ix,$82A7]
	move.w    #0xFFE0,d3                          	| [$0d28: ld   de,$FFE0]
	move.b	#0x0C,d1                        	| [$0d2b: ld   b,$0C]
	jra	l_0d04                             	| [$0d2d: jr   $0D04]

wait_for_start_pushed_0d61:
	move.b	nb_credits_8802(a6),d0                   	| [$0d61: ld   a,($8802)]
	                               	| [$0d64: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0d65: ret  z] [...]
0:
	subq.b	#1,d0                           	| [$0d66: dec  a]
	move.w	#0x0618,d3                          	| [$0d67: ld   de,$0618]
	jeq	l_0d6d                             	| [$0d6a: jr   z,$0D6D]
	addq.w	#1,d3                           	| [$0d6c: inc  e]
l_0d6d:
	jbsr	update_88A0_0038                            	| [$0d6d: rst  $38]
	move.w	#0x0300,d3                          	| [$0d6e: ld   de,$0300]
	jbsr	update_88A0_0038                            	| [$0d71: rst  $38]
	move.b	#0x02,d0                        	| [$0d72: ld   a,$02]
	move.b	d0,game_state_8805(a6)          	| [$0d74: ld   (game_state_8805),a]
	rts                                    	| [$0d77: ret]
l_0d78:
	move.b	copy_of_inputs_8810(a6),d0                   	| [$0d78: ld   a,($8810)]
	btst.b	#3,d0                           	| [$0d7b: bit  3,a]
	jne	l_0de4                             	| [$0d7d: jp   nz,$0DE4]
	btst.b	#4,d0                           	| [$0d80: bit  4,a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0d82: ret  z] [...]
0:
	move.b	nb_credits_8802(a6),d0          	| [$0d83: ld   a,(nb_credits_8802)]
	cmp.b	#0x02,d0                         	| [$0d86: cp   $02]
	bcc.b	0f                               	| [...]
	rts                                    	| [$0d88: ret  c] [...]
0:
	subq.b	#0x02,d0                        	| [$0d89: sub  $02]
	move.b	d0,nb_credits_8802(a6)          	| [$0d8b: ld   (nb_credits_8802),a]
												| [$0d8e: ld   hl,$776B]
												| [$0d91: ld   b,$14]
												| [$0d93: ld   e,b]
												| [$0d94: ld   d,e]
									
												| [$0d95: ld   a,(hl)]
												| [$0d96: add  a,e]
												| [$0d97: ld   e,a]
									
												| [$0d98: jr   nc,$0D9B]
												| [$0d9a: inc  d]
									
												| [$0d9b: inc  hl]
												| [...]
												| [$0d9c: djnz $0D95]
												| [$0d9e: ld   a,e]
												| [$0d9f: add  a,d]
												| [$0da0: and  $AB]
												| [$0da2: jr   z,$0DA8]
												| [$0da4: ld   hl,$89EA]
												| [$0da7: inc  (hl)]
l_0da8:
	move.w	#0x0100,d5                          	| [$0da8: ld   hl,$0100]
l_0dab:
	STORE_WORD	d5,current_player_is_p2_880D(a6)            	| [$0dab: ld   ($880D),hl]
	
	jbsr	l_0e54                            	| [$0dae: call $0E54]
	CLEAR_XC_FLAGS                         	| [$0db1: xor  a]
	clr.b	d0                               	| [$0db1: xor  a]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$0db2: ld   (in_game_sub_state_880A),a]
	move.b	#0x03,d0                        	| [$0db5: ld   a,$03]
	move.b	d0,game_state_8805(a6)          	| [$0db7: ld   (game_state_8805),a]
	move.b	#0x01,d0                        	| [$0dba: ld   a,$01]
	move.b	d0,l_8806(a6)                   	| [$0dbc: ld   ($8806),a]
	move.b	d0,cabinet_upright_881F(a6)                   	| [$0dbf: ld   ($881F),a]
	move.w	#0x0604,d3                          	| [$0dc2: ld   de,$0604]
	jbsr	update_88A0_0038                            	| [$0dc5: rst  $38]
	jbsr	init_play_0E00                    	| [$0dc6: call init_play_0E00]
	lea	l_8D21(a6),a0                      	| [$0dc9: ld   hl,$8D21]
	clr.b	(a0)+                             	| [$0dcc: ld   (hl),$00]
	                           	| [$0dce: inc  l]
	move.b	#0x20,(a0)                      	| [$0dcf: ld   (hl),$20]
	move.w	#0x0400,d3                          	| [$0dd1: ld   de,$0400]
	jbsr	update_88A0_0038                            	| [$0dd4: rst  $38]
	move.b	two_player_mode_880E(a6),d0                   	| [$0dd5: ld   a,($880E)]
	ror.b	#1,d0                            	| [$0dd8: rrca]
	bcs.b	0f                               	| [...]
	rts                                    	| [$0dd9: ret  nc] [...]
0:
	addq.w	#1,d3                           	| [$0dda: inc  e]
	jbsr	update_88A0_0038                            	| [$0ddb: rst  $38]
	CLEAR_XC_FLAGS                         	| [$0ddc: xor  a]
	clr.b	d0                               	| [$0ddc: xor  a]
	lea	ram_pointer_8e1f(a6),a0                      	| [$0ddd: ld   hl,$8E1F]
	move.b	#0x0C,d1                        	| [$0de0: ld   b,$0C]
	jbsr	fill_area_0010                            	| [$0de2: rst  $10]
	rts                                    	| [$0de3: ret]
l_0de4:
	move.b	nb_credits_8802(a6),d0          	| [$0de4: ld   a,(nb_credits_8802)]
	                               	| [$0de7: and  a]
	jeq	l_0df4                             	| [$0de8: jr   z,$0DF4]
	subq.b	#1,d0                           	| [$0dea: dec  a]
	move.b	d0,nb_credits_8802(a6)          	| [$0deb: ld   (nb_credits_8802),a]
	move.w	#0x0000,d5                      	| [$0dee: ld   hl,$0000] 0
	jra	l_0dab                             	| [$0df1: jp   $0DAB]
l_0df4:
	move.b	in_game_sub_state_880A(a6),d0   	| [$0df4: ld   a,(in_game_sub_state_880A)]
	cmp.b	#0x0E,d0                         	| [$0df7: cp   $0E]
	bne.b	0f                               	| [...]
	rts                                    	| [$0df9: ret  z] [...]
0:
	move.b	#0x01,d0                        	| [$0dfa: ld   a,$01]
	move.b	d0,game_state_8805(a6)          	| [$0dfc: ld   (game_state_8805),a]
	rts                                    	| [$0dff: ret]

init_play_0E00:
	lea	play_variables_player_1_8900(a6),a0 	| [$0e00: ld   hl,play_variables_player_1_8900]
	CLEAR_XC_FLAGS                         	| [$0e03: xor  a]
	clr.b	d0                               	| [$0e03: xor  a]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$0e04: ld   (in_game_sub_state_880A),a]
	move.b	d0,l_89E1(a6)                   	| [$0e07: ld   ($89E1),a]
	move.b	d0,l_89E2(a6)                   	| [$0e0a: ld   ($89E2),a]
	move.b	d0,l_89E3(a6)                   	| [$0e0d: ld   ($89E3),a]
	move.b	d0,l_8F5B(a6)                   	| [$0e10: ld   ($8F5B),a]
* clear block 8900-BF
	move.b	#0xBF,d1                        	| [$0e13: ld   b,$BF]
	jbsr	fill_area_0010                            	| [$0e15: rst  $10]
	move.b	l_8807(a6),d0                   	| [$0e16: ld   a,($8807)]
	move.b	d0,l_8948(a6)                   	| [$0e19: ld   ($8948),a]
	move.b	d0,l_8988(a6)                   	| [$0e1c: ld   ($8988),a]
	move.b	#0x20,d0                        	| [$0e1f: ld   a,$20]
	move.b	d0,l_8941(a6)                   	| [$0e21: ld   ($8941),a]
	move.b	d0,l_8981(a6)                   	| [$0e24: ld   ($8981),a]
	move.b	l_8820(a6),d0                   	| [$0e27: ld   a,($8820)]
	move.b	d0,l_8940(a6)                   	| [$0e2a: ld   ($8940),a]
	move.b	d0,play_variables_player_2_8980(a6)                   	| [$0e2d: ld   ($8980),a]
	jbsr	l_02e3                            	| [$0e30: call $02E3]
	move.b	l_8806(a6),d0                   	| [$0e33: ld   a,($8806)]
	                               	| [$0e36: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0e37: ret  z] [...]
0:
	CLEAR_XC_FLAGS                         	| [$0e38: xor  a]
	clr.b	d0                               	| [$0e38: xor  a]
	move.b	d0,l_8F3F(a6)                   	| [$0e39: ld   ($8F3F),a]
	move.b	d0,l_8F30(a6)                   	| [$0e3c: ld   ($8F30),a]
	move.b	d0,l_8F0E(a6)                   	| [$0e3f: ld   ($8F0E),a]
	move.b	d0,meat_speed_8F0F(a6)          	| [$0e42: ld   (meat_speed_8F0F),a]
	rts                                    	| [$0e45: ret]
	move.w	#0x0004,d3                      	| [$0e46: ld   de,$0004] 4
	move.b	#0x06,d1                        	| [$0e49: ld   b,$06]
l_0e4b:
	move.b	#0xFB,d0                        	| [$0e4b: ld   a,$FB]
	and.b	(a0),d0                          	| [$0e4d: and  (hl)]
	move.b	d0,(a0)                         	| [$0e4e: ld   (hl),a]
	add.w	d3,a0                            	| [$0e4f: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_0e4b                             	| [$0e50: djnz $0E4B]
	rts                                    	| [$0e52: ret]

l_0e53:
	rts                                    	| [$0e53: ret]
l_0e54:
	move.w	#0x0701,d3                          	| [$0e54: ld   de,$0701]
	jbsr	update_88A0_0038                            	| [$0e57: rst  $38]
	move.b	l_882C(a6),d0                   	| [$0e58: ld   a,($882C)]
	cmp.b	#0x0F,d0                         	| [$0e5b: cp   $0F]
	jne	l_0e63                             	| [$0e5d: jr   nz,$0E63]
	move.w	#0x0606,d3                          	| [$0e5f: ld   de,$0606]
	jbsr	update_88A0_0038                            	| [$0e62: rst  $38]
l_0e63:
	rts                                    	| [$0e63: ret]
l_0e64:
	lea	l_8A41(a6),a1                      	| [$0e64: ld   de,$8A41]
	move.b	(a1),d0                         	| [$0e67: ld   a,(de)]
	move.b	d0,d6                           	| [$0e68: ld   l,a]
	move.b	#0x8A,d5                        	| [$0e69: ld   h,$8A]
	LOAD_A0_FROM_D5D6
	move.b	(a0),d0                         	| [$0e6b: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$0e6c: cp   $FF]
	bne.b	0f                               	| [...]
	rts                                    	| [$0e6e: ret  z] [...]
0:
	move.b	d0,d1                           	| [$0e6f: ld   b,a]
	move.b	l_8821(a6),d0                   	| [$0e70: ld   a,($8821)]
	and.b	#0x01,d0                         	| [$0e73: and  $01]
	jne	l_0e7d                             	| [$0e75: jr   nz,$0E7D]
	move.b	l_8806(a6),d0                   	| [$0e77: ld   a,($8806)]
	                               	| [$0e7a: and  a]
	jeq	l_0e81                             	| [$0e7b: jr   z,$0E81]
l_0e7d:
	move.b	d1,d0                           	| [$0e7d: ld   a,b]
	jbsr	audio_shit_0E8F                   	| [$0e7e: call audio_shit_0E8F]
l_0e81:
	move.b	#0xFF,(a0)                      	| [$0e81: ld   (hl),$FF]
	LOAD_D5D6_FROM_A0_RAM
	move.b	d6,d0                           	| [$0e83: ld   a,l]
	cmp.b	#0x5E,d0                         	| [$0e84: cp   $5E]
	jeq	l_0e8b                             	| [$0e86: jr   z,$0E8B]
	addq.b	#1,d0                           	| [$0e88: inc  a]
	move.b	d0,(a1)                         	| [$0e89: ld   (de),a]
	rts                                    	| [$0e8a: ret]
l_0e8b:
	move.b	#0x43,d0                        	| [$0e8b: ld   a,$43]
	move.b	d0,(a1)                         	| [$0e8d: ld   (de),a]
	rts                                    	| [$0e8e: ret]

audio_shit_0E8F:
	               	| [$0e8f: ld   (audio_a100),a]
	               	| [$0e92: ld   a,$01]
	               	| [$0e94: ld   ($A181),a]
								
											| [$0e97: nop]
											| [$0e98: nop]
											| [$0e99: nop]
											| [$0e9a: nop]
											| [$0e9b: nop]
											| [$0e9c: nop]
											| [$0e9d: dec  a]
											| [$0e9e: ld   ($A181),a]
	rts                                    	| [$0ea1: ret]

l_0ea2:
	move.b	d0,l_8D20(a6)                   	| [$0ea2: ld   ($8D20),a]
	move.b	l_8806(a6),d0                   	| [$0ea5: ld   a,($8806)]
	                               	| [$0ea8: and  a]
	jne	l_0eb0                             	| [$0ea9: jr   nz,$0EB0]
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$0eab: ld   a,($8F50)]
	                               	| [$0eae: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0eaf: ret  z] [...]
0:
l_0eb0:
	move.b	l_8D20(a6),d0                   	| [$0eb0: ld   a,($8D20)]
l_0eb3:
	movem.w	d1/d2,-(sp)                    	| [$0eb3: push bc]
	move.l	a4,-(sp)                        	| [$0eb3: push bc]
	movem.w	d3/d4,-(sp)                    	| [$0eb4: push de]
	move.l	a1,-(sp)                        	| [$0eb4: push de]
	move.l	a0,-(sp)                        	| [$0eb5: push hl]
	move.b	d0,d1                           	| [$0eb6: ld   b,a]
	lea	rom_pointer_8A40(a6),a1                      	| [$0eb7: ld   de,$8A40]
	move.b	(a1),d0                         	| [$0eba: ld   a,(de)]
	move.b	d0,D6                           	| [$0ebb: ld   l,a]
	move.b	#0x8A,D5                        	| [$0ebc: ld   h,$8A]
	LOAD_A0_FROM_D5D6
	move.b	d1,(a0)                         	| [$0ebe: ld   (hl),b]
	move.b	D6,d0                           	| [$0ebf: ld   a,l]
	cmp.b	#0x5E,d0                         	| [$0ec0: cp   $5E]
	jeq	l_0ec8                             	| [$0ec2: jr   z,$0EC8]
	addq.b	#1,d0                           	| [$0ec4: inc  a]
	move.b	d0,(a1)                         	| [$0ec5: ld   (de),a]
	jra	l_0ecb                             	| [$0ec6: jr   $0ECB]
l_0ec8:
	move.b	#0x43,d0                        	| [$0ec8: ld   a,$43]
	move.b	d0,(a1)                         	| [$0eca: ld   (de),a]
l_0ecb:
	move.l	(sp)+,a0                        	| [$0ecb: pop  hl]
	move.l	(sp)+,a1                        	| [$0ecc: pop  de]
	movem.w	(sp)+,D3/D4                    	| [$0ecc: pop  de]
	move.l	(sp)+,a4                        	| [$0ecd: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$0ecd: pop  bc]
	rts                                    	| [$0ece: ret]
l_0ecf:
	CLEAR_XC_FLAGS                         	| [$0ecf: xor  a]
	clr.b	d0                               	| [$0ecf: xor  a]
	jra	l_0eb3                             	| [$0ed0: jr   $0EB3]
l_0ed2:
	move.b	#0x01,d0                        	| [$0ed2: ld   a,$01]
	jra	l_0ea2                             	| [$0ed4: jr   $0EA2]
l_0ed6:
	move.b	#0x02,d0                        	| [$0ed6: ld   a,$02]
	jra	l_0eb3                             	| [$0ed8: jr   $0EB3]
l_0eda:
	move.b	#0x82,d0                        	| [$0eda: ld   a,$82]
	jbsr	l_0eb3                            	| [$0edc: call $0EB3]
	move.b	#0x03,d0                        	| [$0edf: ld   a,$03]
	jra	l_0eb3                             	| [$0ee1: jr   $0EB3]
l_0ee3:
	move.b	l_8F24(a6),d0                   	| [$0ee3: ld   a,($8F24)]
	                               	| [$0ee6: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$0ee7: ret  nz] [...]
0:
	move.b	l_8D32(a6),d0                   	| [$0ee8: ld   a,($8D32)]
	                               	| [$0eeb: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$0eec: ret  nz] [...]
0:
	move.b	#0x04,d0                        	| [$0eed: ld   a,$04]
	jra	l_0ea2                             	| [$0eef: jr   $0EA2]
l_0ef1:
	move.b	#0x05,d0                        	| [$0ef1: ld   a,$05]
	jra	l_0eb3                             	| [$0ef3: jr   $0EB3]
l_0ef5:
	move.b	#0x06,d0                        	| [$0ef5: ld   a,$06]
	jra	l_0ea2                             	| [$0ef7: jr   $0EA2]
l_0ef9:
	move.b	#0x07,d0                        	| [$0ef9: ld   a,$07]
	jra	l_0ea2                             	| [$0efb: jr   $0EA2]
l_0efd:
	move.b	#0x08,d0                        	| [$0efd: ld   a,$08]
	jra	l_0ea2                             	| [$0eff: jr   $0EA2]
l_0f01:
	move.b	#0x09,d0                        	| [$0f01: ld   a,$09]
	jra	l_0eb3                             	| [$0f03: jr   $0EB3]
l_0f05:
	move.b	#0x0A,d0                        	| [$0f05: ld   a,$0A]
	jra	l_0ea2                             	| [$0f07: jr   $0EA2]
l_0f09:
	move.b	#0x0B,d0                        	| [$0f09: ld   a,$0B]
	jra	audio_shit_0E8F                    	| [$0f0b: jr   audio_shit_0E8F]
l_0f0d:
	move.b	#0x0B,d0                        	| [$0f0d: ld   a,$0B]
	jra	l_0ea2                             	| [$0f0f: jr   $0EA2]
l_0f11:
	move.b	#0x0C,d0                        	| [$0f11: ld   a,$0C]
	jra	l_0ea2                             	| [$0f13: jr   $0EA2]
l_0f15:
	move.b	#0x0D,d0                        	| [$0f15: ld   a,$0D]
	jra	l_0ea2                             	| [$0f17: jr   $0EA2]
l_0f19:
	move.b	#0x0E,d0                        	| [$0f19: ld   a,$0E]
	jra	l_0ea2                             	| [$0f1b: jr   $0EA2]
l_0f1d:
	move.b	#0x0F,d0                        	| [$0f1d: ld   a,$0F]
	jra	l_0ea2                             	| [$0f1f: jr   $0EA2]
l_0f21:
	move.b	#0x95,d0                        	| [$0f21: ld   a,$95]
	jbsr	l_0ea2                            	| [$0f23: call $0EA2]
	move.b	#0x10,d0                        	| [$0f26: ld   a,$10]
	jra	l_0ea2                             	| [$0f28: jp   $0EA2]
l_0f2b:
	move.b	#0x11,d0                        	| [$0f2b: ld   a,$11]
	jra	l_0ea2                             	| [$0f2d: jp   $0EA2]
l_0f30:
	move.b	#0x95,d0                        	| [$0f30: ld   a,$95]
	jbsr	l_0ea2                            	| [$0f32: call $0EA2]
	move.b	#0x03,d0                        	| [$0f35: ld   a,$03]
	jbsr	l_0ea2                            	| [$0f37: call $0EA2]
	move.b	#0x11,d0                        	| [$0f3a: ld   a,$11]
	jra	l_0ea2                             	| [$0f3c: jp   $0EA2]
l_0f3f:
	move.b	#0x12,d0                        	| [$0f3f: ld   a,$12]
	jra	l_0ea2                             	| [$0f41: jp   $0EA2]
l_0f44:
	move.b	#0x13,d0                        	| [$0f44: ld   a,$13]
	jra	l_0ea2                             	| [$0f46: jp   $0EA2]
l_0f49:
	move.b	#0x14,d0                        	| [$0f49: ld   a,$14]
	jra	l_0ea2                             	| [$0f4b: jp   $0EA2]
l_0f4e:
	move.b	#0x82,d0                        	| [$0f4e: ld   a,$82]
	jbsr	l_0eb3                            	| [$0f50: call $0EB3]
	move.b	#0x95,d0                        	| [$0f53: ld   a,$95]
	jra	l_0eb3                             	| [$0f55: jp   $0EB3]
l_0f58:
	move.b	#0x96,d0                        	| [$0f58: ld   a,$96]
	jbsr	l_0ea2                            	| [$0f5a: call $0EA2]
	move.b	#0x97,d0                        	| [$0f5d: ld   a,$97]
	jbsr	l_0ea2                            	| [$0f5f: call $0EA2]
	move.b	#0x18,d0                        	| [$0f62: ld   a,$18]
	jbsr	l_0eb3                            	| [$0f64: call $0EB3]
	move.b	#0x15,d0                        	| [$0f67: ld   a,$15]
	jra	l_0eb3                             	| [$0f69: jp   $0EB3]
l_0f6c:
	move.b	#0x19,d0                        	| [$0f6c: ld   a,$19]
	jbsr	l_0eb3                            	| [$0f6e: call $0EB3]
	move.b	#0x15,d0                        	| [$0f71: ld   a,$15]
	jra	l_0eb3                             	| [$0f73: jp   $0EB3]
l_0f76:
	move.b	l_8D68(a6),d0                   	| [$0f76: ld   a,($8D68)]
	or.b	d0,d0                             	| [$0f79: or   a]
	beq.b	0f                               	| [...]
	rts                                    	| [$0f7a: ret  nz] [...]
0:
	move.b	round_number_8907(a6),d0                   	| [$0f7b: ld   a,($8907)]
	and.b	#0x01,d0                         	| [$0f7e: and  $01]
	add.b	#0x1A,d0                         	| [$0f80: add  a,$1A]
	jbsr	l_0ea2                            	| [$0f82: call $0EA2]
	jra	l_0fc3                             	| [$0f85: jp   $0FC3]
l_0f88:
	move.b	#0x82,d0                        	| [$0f88: ld   a,$82]
	jbsr	l_0ea2                            	| [$0f8a: call $0EA2]
	move.b	#0x1C,d0                        	| [$0f8d: ld   a,$1C]
	jra	l_0fc3                             	| [$0f8f: jp   $0FC3]
l_0f92:
	move.b	#0x1D,d0                        	| [$0f92: ld   a,$1D]
	jra	l_0fc3                             	| [$0f94: jp   $0FC3]
l_0f97:
	move.b	round_number_8907(a6),d0                   	| [$0f97: ld   a,($8907)]
	ror.b	#1,d0                            	| [$0f9a: rrca]
	and.b	#0x03,d0                         	| [$0f9b: and  $03]
	add.b	#0x1E,d0                         	| [$0f9d: add  a,$1E]
	jra	l_0fc3                             	| [$0f9f: jp   $0FC3]
l_0fa2:
	move.b	round_number_8907(a6),d0                   	| [$0fa2: ld   a,($8907)]
	ror.b	#1,d0                            	| [$0fa5: rrca]
	and.b	#0x03,d0                         	| [$0fa6: and  $03]
	add.b	#0x22,d0                         	| [$0fa8: add  a,$22]
	jra	l_0fc3                             	| [$0faa: jp   $0FC3]
l_0fad:
	move.b	#0x26,d0                        	| [$0fad: ld   a,$26]
	jra	l_0fc3                             	| [$0faf: jp   $0FC3]
l_0fb2:
	move.b	#0x27,d0                        	| [$0fb2: ld   a,$27]
	jbsr	l_0eb3                            	| [$0fb4: call $0EB3]
	move.b	#0x15,d0                        	| [$0fb7: ld   a,$15]
	jra	l_0eb3                             	| [$0fb9: jp   $0EB3]
l_0fbc:
	move.b	#0x28,d0                        	| [$0fbc: ld   a,$28]
	jra	l_0fc3                             	| [$0fbe: jp   $0FC3]
l_0fc1:
	move.b	#0x29,d0                        	| [$0fc1: ld   a,$29]
l_0fc3:
	jbsr	l_0ea2                            	| [$0fc3: call $0EA2]
	move.b	#0x15,d0                        	| [$0fc6: ld   a,$15]
	jbsr	l_0ea2                            	| [$0fc8: call $0EA2]
	move.b	#0x16,d0                        	| [$0fcb: ld   a,$16]
	jbsr	l_0ea2                            	| [$0fcd: call $0EA2]
	move.b	#0x17,d0                        	| [$0fd0: ld   a,$17]
	jra	l_0ea2                             	| [$0fd2: jp   $0EA2]
l_0fd5:
	move.b	l_8F5C(a6),d0                   	| [$0fd5: ld   a,($8F5C)]
	and.b	#0x07,d0                         	| [$0fd8: and  $07]
	cmp.b	#0x02,d0                         	| [$0fda: cp   $02]
	jcs	l_0fe2                             	| [$0fdc: jr   c,$0FE2]
	LOAD_ROM	0x1035,a0                          	| [$0fde: ld   hl,$1035]

	move.l	a0,-(sp)                        	| [$0fe1: push hl]
l_0fe2:
	jbsr	jump_from_table_below_0028                            	| [$0fe2: rst  $28]
	.long	l_0FEF
	.long	l_1016
	.long	l_1090
	.long	l_10a2
	.long	l_113c
	.long	l_114f

l_0FEF:
	move.b	#0xF,d0							| [$0f3e: ld   a,$0F]
	lea	nb_wolves_8901(a6),a0              	| [$0ff1: ld   hl,nb_wolves_8901]
	move.b	d0,(a0)                         	| [$0ff4: ld   (hl),a]
	*move.b	#0x07,d6                        	| [$0ff5: ld   l,$07]
	*btst.b	#2,(a0)                         	| [$0ff7: bit  2,(hl)]
	*jeq	l_0ffe                             	| [$0ff9: jr   z,$0FFE]
	*jbsr	rom_protection_check_50f1                            	| [$0ffb: call $50F1]
l_0ffe:
	move.b	#0x01,d0                        	| [$0ffe: ld   a,$01]
	move.b	d0,l_8F61(a6)                   	| [$1000: ld   ($8F61),a]
	move.b	d0,l_8F3F(a6)                   	| [$1003: ld   ($8F3F),a]
	move.b	d0,l_8F5C(a6)                   	| [$1006: ld   ($8F5C),a]
	jbsr	l_0fbc                            	| [$1009: call $0FBC]
												| [$100c: ld   hl,$8A38]
									| [$100f: ld   a,(hl)]
									| [$1010: inc  hl]
									| [$1011: or   a]
									| [...]
	rts                                    	| [$1012: ret  z] [...]
0:
	move.b	d0,l_8F5C(a6)                   	| [$1013: ld   ($8F5C),a]
l_1016:
	jbsr	l_1583                            	| [$1016: call $1583]
	jbsr	l_1042                            	| [$1019: call $1042]
	jbsr	l_107d                            	| [$101c: call $107D]
	jbsr	l_20d4                            	| [$101f: call $20D4]
	jbsr	l_511b                            	| [$1022: call $511B]
	jbsr	l_1219                            	| [$1025: call $1219]
	jbsr	l_40bd                            	| [$1028: call $40BD]
	jbsr	update_sprite_shadows_02EF        	| [$102b: call update_sprite_shadows_02EF]
	jbsr	l_5ae4                            	| [$102e: call $5AE4]
	jbsr	l_0e64                            	| [$1031: call $0E64]
	rts                                    	| [$1034: ret]

	jbsr	l_2157                            	| [$1035: call $2157]
	jbsr	l_1219                            	| [$1038: call $1219]
	jbsr	l_40bd                            	| [$103b: call $40BD]
	jbsr	update_sprite_shadows_02EF        	| [$103e: call update_sprite_shadows_02EF]
	rts                                    	| [$1041: ret]
l_1042:
	move.b	#0x01,d0                        	| [$1042: ld   a,$01]
	move.b	d0,l_8F3F(a6)                   	| [$1044: ld   ($8F3F),a]
	lea	player_structure_8A80(a6),a2      	| [$1047: ld   ix,player_structure_8A80]
	lea	l_8C90(a6),a3                      	| [$104b: ld   iy,$8C90]
	move.b	(0x02,a2),d0                    	| [$104f: ld   a,(ix+$02)]
	                               	| [$1052: and  a]
	jne	l_1078                             	| [$1053: jr   nz,$1078]
	move.b	l_8F24(a6),d0                   	| [$1055: ld   a,($8F24)]
	lea	l_8F57(a6),a0                      	| [$1058: ld   hl,$8F57]
	or.b	(a0),d0                           	| [$105b: or   (hl)]
	jne	l_1078                             	| [$105c: jr   nz,$1078]
	                   	| [$105e: ld   a,($881F)]
	                               	| [$1061: and  a]
	jbsr	osd_read_inputs_1                     	| [$1062: ld   a,(in1_a0a0)]
	                 	| [$1065: jr   nz,$106A]
	                  	| [$1067: ld   a,(in2_a0c0)]
l_106a:
	not.b	d0                               	| [$106a: cpl]
	move.b	d0,(0x07,a2)                    	| [$106b: ld   (ix+$07),a]
	move.b	(0x1e,a2),d0                    	| [$106e: ld   a,(ix+$1e)]
	                               	| [$1071: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$1072: ret  nz] [...]
0:
	bclr.b	#4,(0x07,a2)                    	| [$1073: res  4,(ix+$07)]
	rts                                    	| [$1077: ret]
l_1078:
	clr.b	(0x07,a2)                        	| [$1078: ld   (ix+$07),$00]
	rts                                    	| [$107c: ret]
l_107d:
	move.b	nb_wolves_8901(a6),d0           	| [$107d: ld   a,(nb_wolves_8901)]
	                               	| [$1080: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$1081: ret  nz] [...]
0:
	lea	l_8F5C(a6),a0                      	| [$1082: ld   hl,$8F5C]
	addq.b	#1,(a0)                         	| [$1085: inc  (hl)]
	move.w	#0x0635,d3                          	| [$1086: ld   de,$0635]
	jbsr	update_88A0_0038                            	| [$1089: rst  $38]
	move.b	#0x40,d0                        	| [$108a: ld   a,$40]
	move.b	d0,l_8F62(a6)                   	| [$108c: ld   ($8F62),a]
	rts                                    	| [$108f: ret]
l_1090:
	lea	l_8F62(a6),a0                      	| [$1090: ld   hl,$8F62]
	move.b	(a0),d0                         	| [$1093: ld   a,(hl)]
	                               	| [$1094: and  a]
	jeq	l_1099                             	| [$1095: jr   z,$1099]
	subq.b	#1,(a0)                         	| [$1097: dec  (hl)]
	rts                                    	| [$1098: ret]
l_1099:
	lea	l_8F5C(a6),a0                      	| [$1099: ld   hl,$8F5C]
	addq.b	#1,(a0)                         	| [$109c: inc  (hl)]
	move.w	#0x0634,d3                          	| [$109d: ld   de,$0634]
	jbsr	update_88A0_0038                            	| [$10a0: rst  $38]
	rts                                    	| [$10a1: ret]
l_10a2:
	move.b	l_8F5D(a6),d0                   	| [$10a2: ld   a,($8F5D)]
	cmp.b	#0x0A,d0                         	| [$10a5: cp   $0A]
	jcs	l_10ad                             	| [$10a7: jr   c,$10AD]
	move.b	d0,d1                           	| [$10a9: ld   b,a]
	jbsr	convert_number_to_bcd_1131                            	| [$10aa: call $1131]
l_10ad:
	lea	l_8650(a6),a0                      	| [$10ad: ld   hl,$8650]
	jbsr	write_2_digits_to_screen_1119                            	| [$10b0: call $1119]
	move.b	l_8F5D(a6),d0                   	| [$10b3: ld   a,($8F5D)]
	                               	| [$10b6: and  a]
	jeq	l_10df                             	| [$10b7: jr   z,$10DF]
	cmp.b	#0x0C,d0                         	| [$10b9: cp   $0C]
	jcc	l_10df                             	| [$10bb: jr   nc,$10DF]
	move.b	#0x05,d1                        	| [$10bf: ld   b,$05]
	subq.b	#0x07,d0                        	| [$10bd: sub  $07]
	jeq	l_10d0                             	| [$10c1: jr   z,$10D0]
	jcc	l_10cb                             	| [$10c3: jr   nc,$10CB]
l_10c5:
	addq.b	#1,d1                           	| [$10c5: inc  b]
	addq.b	#1,d0                           	| [$10c6: inc  a]
	jne	l_10c5                             	| [$10c7: jr   nz,$10C5]
	jra	l_10d0                             	| [$10c9: jr   $10D0]
l_10cb:
	subq.b	#1,d1                           	| [$10cb: dec  b]
	subq.b	#1,d0                           	| [$10cc: dec  a]
	jne	l_10cb                             	| [$10cd: jr   nz,$10CB]
	move.b	d1,d0                           	| [$10cf: ld   a,b]
l_10d0:
	move.b	d1,d0                           	| [$10d0: ld   a,b]
	move.b	d0,l_8F62(a6)                   	| [$10d1: ld   ($8F62),a]
	asl.b	#1,d1                            	| [$10d4: sla  b]
	jbsr	convert_number_to_bcd_1131                            	| [$10d6: call $1131]
	lea	l_85D0(a6),a0                      	| [$10d9: ld   hl,$85D0]
	jbsr	write_2_digits_to_screen_1119                            	| [$10dc: call $1119]
l_10df:
	move.b	l_8F5E(a6),d0                   	| [$10df: ld   a,($8F5E)]
	cmp.b	#0x0A,d0                         	| [$10e2: cp   $0A]
	jcs	l_10ea                             	| [$10e4: jr   c,$10EA]
	move.b	d0,d1                           	| [$10e6: ld   b,a]
	jbsr	convert_number_to_bcd_1131                            	| [$10e7: call $1131]
l_10ea:
	lea	l_8652(a6),a0                      	| [$10ea: ld   hl,$8652]
	jbsr	write_2_digits_to_screen_1119                            	| [$10ed: call $1119]
	lea	l_8F60(a6),a0                      	| [$10f0: ld   hl,$8F60]
	move.b	(a0),d0                         	| [$10f3: ld   a,(hl)]
	                               	| [$10f4: and  a]
	jeq	l_1111                             	| [$10f5: jr   z,$1111]
	move.b	d0,d1                           	| [$10f7: ld   b,a]
	lea	l_8652+0x10(a6),a0                        	| [$10f8: ld   l,$62]
	add.b	(a0),d0                          	| [$10fa: add  a,(hl)]
	move.b	d0,(a0)                         	| [$10fb: ld   (hl),a]
	asl.b	#1,d1                            	| [$10fc: sla  b]
	jbsr	convert_number_to_bcd_1131                            	| [$10fe: call $1131]
	move.b	d0,d4                           	| [$1101: ld   e,a]
	move.b	d2,d0                           	| [$1102: ld   a,c]
	                               	| [$1103: and  a]
	jeq	l_110a                             	| [$1104: jr   z,$110A]
	move.b	d2,d0                           	| [$1106: ld   a,c]
	move.b	d0,l_85F2(a6)                   	| [$1107: ld   ($85F2),a]
l_110a:
	lea	l_85D2(a6),a0                      	| [$110a: ld   hl,$85D2]
	move.b	d4,d0                           	| [$110d: ld   a,e]
	jbsr	write_2_digits_to_screen_1119                            	| [$110e: call $1119]
l_1111:
	lea	l_8F5C(a6),a0                      	| [$1111: ld   hl,$8F5C]
	addq.b	#1,(a0)                         	| [$1114: inc  (hl)]
	jbsr	l_0f44                            	| [$1115: call $0F44]
	rts                                    	| [$1118: ret]

* < d0: value
* < a0: screen address
write_2_digits_to_screen_1119:
	move.w	#-0x20,d1                          	| [$1119: ld   bc,$FFE0]
	move.b	d0,d4                           	| [$111c: ld   e,a]
	lsr.b	#4,d0                            	| [$111d: srl  a] * 4
	                               	| [$1125: and  a]
	jne	l_112a                             	| [$1126: jr   nz,$112A]
	move.b	#0x10,d0                        	| [$1128: ld   a,$10]
l_112a:
	jbsr	osd_w_videoram                         	| [$112a: ld   (hl),a]
	add.w	d1,a0                            	| [$112b: add  hl,bc]
	move.b	d4,d0                           	| [$112c: ld   a,e]
	and.b	#0x0F,d0                         	| [$112d: and  $0F]
	jbsr	osd_w_videoram                         	| [$112f: ld   (hl),a]
	rts                                    	| [$1130: ret]

* < D1: number
* > D2: BCD converted
convert_number_to_bcd_1131:
	subq	#1,d1
	and.w	#0xFF,d1
	CLEAR_XC_FLAGS                         	| [$1131: xor  a]
	clr.b	d0                               	| [$1131: xor  a]
	move.b	d0,d2                           	| [$1132: ld   c,a]
	move.b	#1,d7
l_1133:
	abcd	d7,d0                        	| [$1133: add  a,$01]
											| daa
	jcc	l_1139                             	| [$1136: jr   nc,$1139]
	addq.w	#1,d2                           	| [$1138: inc  c]
l_1139:
	dbf	d1,l_1133                             	| [$1139: djnz $1133]
	rts                                    	| [$113b: ret]
l_113c:
	lea	l_8F62(a6),a0                      	| [$113c: ld   hl,$8F62]
	move.b	(a0),d0                         	| [$113f: ld   a,(hl)]
	                               	| [$1140: and  a]
	jeq	l_1149                             	| [$1141: jr   z,$1149]
	subq.b	#1,(a0)                         	| [$1143: dec  (hl)]
	move.w	#0x0315,d3                          	| [$1144: ld   de,$0315]
	jbsr	update_88A0_0038                            	| [$1147: rst  $38]
	rts                                    	| [$1148: ret]
l_1149:
	move.b	#0x80,(a0)                      	| [$1149: ld   (hl),$80]
	lea	l_8F5C(a6),a0                        	| [$114b: ld   l,$5C]
	addq.b	#1,(a0)                         	| [$114d: inc  (hl)]
	rts                                    	| [$114e: ret]
l_114f:
	lea	l_8F62(a6),a0                      	| [$114f: ld   hl,$8F62]
	move.b	(a0),d0                         	| [$1152: ld   a,(hl)]
	                               	| [$1153: and  a]
	jeq	l_1158                             	| [$1154: jr   z,$1158]
	subq.b	#1,(a0)                         	| [$1156: dec  (hl)]
	rts                                    	| [$1157: ret]
l_1158:
	clr.b	d0                               	| [$1158: xor  a]
	move.b	#0x5B,d6                        	| [$1159: ld   l,$5B]
	move.b	#0x09,d1                        	| [$115b: ld   b,$09]
	jbsr	fill_area_0010                            	| [$115d: rst  $10]
	jbsr	l_0ecf                            	| [$115e: call $0ECF]
	* reaches here after the bonus stage
	move.b	#0x06,d0                        	| [$1161: ld   a,$06]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$1163: ld   (in_game_sub_state_880A),a]
	* skipped checksum checks
								| [$1166: ld   hl,$8A3C]
								| [$1169: ld   a,($882B)]
					| [$116c: add  a,(hl)]
					| [$116d: and  a]
					| [...]
	rts                                    	| [$116e: ret  z] [...]


     	| [$116f: jr   $118D]
l_1171:
	lea	l_8D07(a6),a0                      	| [$1171: ld   hl,$8D07]
	move.b	(a0),d0                         	| [$1174: ld   a,(hl)]
	                               	| [$1175: and  a]
	jeq	l_117a                             	| [$1176: jr   z,$117A]
	subq.b	#1,(a0)                         	| [$1178: dec  (hl)]
	rts                                    	| [$1179: ret]
l_117a:
	move.b	nb_wolves_8901(a6),d0           	| [$117a: ld   a,(nb_wolves_8901)]
	lea	l_8D40(a6),a0                        	| [$117d: ld   l,$40]
	sub.b	(a0),d0                          	| [$117f: sub  (hl)]
	bne.b	0f                               	| [...]
	rts                                    	| [$1180: ret  z] [...]
0:
	bcc.b	0f                               	| [...]
	rts                                    	| [$1181: ret  c] [...]
0:
	move.b	d0,d2                           	| [$1182: ld   c,a]
	move.b	(a0),d0                         	| [$1183: ld   a,(hl)]
	cmp.b	#0x06,d0                         	| [$1184: cp   $06]
	bcs.b	0f                               	| [...]
	rts                                    	| [$1186: ret  nc] [...]
0:
	lea	l_8AE0(a6),a2                      	| [$1187: ld   ix,$8AE0]
	move.b	#0x06,d1                        	| [$118b: ld   b,$06]
l_118d:
	move.b	#0x1D,d4                        	| [$118d: ld   e,$1D]
	jbsr	l_119a                            	| [$118f: call $119A]
	move.w	#0x0018,d3                      	| [$1192: ld   de,$0018] 24
	add.w	d3,a2                            	| [$1195: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_118d                             	| [$1197: djnz $118D]
	rts                                    	| [$1199: ret]
l_119a:
	move.b	(0x00,a2),d0                    	| [$119a: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$119d: or   (ix+$01)]
	ror.b	#1,d0                            	| [$11a0: rrca]
	bcc.b	0f                               	| [...]
	rts                                    	| [$11a1: ret  c] [...]
0:
	move.b	d2,d1                           	| [$11a2: ld   b,c]
	move.b	#0x01,(0x00,a2)                 	| [$11a3: ld   (ix+$00),$01]
	move.b	#0x03,(0x02,a2)                 	| [$11a7: ld   (ix+$02),$03]
	move.b	d4,(0x04,a2)                    	| [$11ab: ld   (ix+$04),e]
	CLEAR_XC_FLAGS                         	| [$11ae: xor  a]
	clr.b	d0                               	| [$11ae: xor  a]
	move.b	d0,(0x03,a2)                    	| [$11af: ld   (ix+$03),a]
	move.b	d0,(0x05,a2)                    	| [$11b2: ld   (ix+$05),a]
	move.b	d0,(0x06,a2)                    	| [$11b5: ld   (ix+$06),a]
	move.b	d0,(0x08,a2)                    	| [$11b8: ld   (ix+$08),a]
	move.b	#0x01,(0x07,a2)                 	| [$11bb: ld   (ix+$07),$01]
	move.b	d0,(0x0b,a2)                    	| [$11bf: ld   (ix+$0b),a]
	LOAD_ROM	0x1209,a0                          	| [$11c2: ld   hl,$1209]
	move.b	round_number_8907(a6),d0                   	| [$11c5: ld   a,($8907)]
	and.b	#0x3F,d0                         	| [$11c8: and  $3F]
	lsr.b	#2,d0                            	| [$11ca: srl  a] * 2
	cmp.b	#0x10,d0                         	| [$11ce: cp   $10]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$11d0: rst  $20]
	move.b	d0,(0x09,a2)                    	| [$11d1: ld   (ix+$09),a]
	neg.b	d0                               	| [$11d4: neg]
	move.b	d0,(0x0a,a2)                    	| [$11d6: ld   (ix+$0a),a]
	LOAD_ROM	0x3829,a1                          	| [$11d9: ld   de,$3829]
	jbsr	store_de_in_struct_381e                            	| [$11dc: call $381E]
	LOAD_ROM	0x11F9,a0                          	| [$11df: ld   hl,$11F9]
	move.b	round_number_8907(a6),d0                   	| [$11e2: ld   a,($8907)]
	and.b	#0x3F,d0                         	| [$11e5: and  $3F]
	asr.b	#2,d0                            	| [$11e7: sra  a] * 2
	jbsr	read_byte_a0_plus_d0_0020                            	| [$11eb: rst  $20]
	move.b	d0,l_8D07(a6)                   	| [$11ec: ld   ($8D07),a]
	lea	l_8F5F(a6),a0                      	| [$11ef: ld   hl,$8F5F]
	addq.b	#1,(a0)                         	| [$11f2: inc  (hl)]
	lea	l_8D40(a6),a0                      	| [$11f3: ld   hl,$8D40]
	addq.b	#1,(a0)                         	| [$11f6: inc  (hl)]
	move.w	(sp)+,d0                        	| [$11f7: pop  af]
	rts                                    	| [$11f8: ret]

l_1219:
	lea	l_8AE0(a6),a2                      	| [$1219: ld   ix,$8AE0]
	move.w	#0x0018,d3                      	| [$121d: ld   de,$0018] 24
	move.b	#0x0E,d1                        	| [$1220: ld   b,$0E]
l_1222:
	jbsr	exx                               	| [$1222: exx]
	jbsr	l_122c                            	| [$1223: call $122C]
	jbsr	exx                               	| [$1226: exx]
l_1227:
	add.w	d3,a2                            	| [$1227: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_1222                             	| [$1229: djnz $1222]
	rts                                    	| [$122b: ret]
l_122c:
	move.b	(0x00,a2),d0                    	| [$122c: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$122f: or   (ix+$01)]
	ror.b	#1,d0                            	| [$1232: rrca]
	bcs.b	0f                               	| [...]
	rts                                    	| [$1233: ret  nc] [...]
0:
	move.b	(0x02,a2),d0                    	| [$1234: ld   a,(ix+$02)]
	and.b	#0x1F,d0                         	| [$1237: and  $1F]
	cmp.b	#0x11,d0                         	| [$1239: cp   $11]
	bcs.b	0f                               	| [...]
	rts                                    	| [$123b: ret  nc] [...]
0:
	jbsr	jump_from_table_below_0028                            	| [$123c: rst  $28]

	.long	l_125f
	.long	l_1270
	.long	l_3536
	.long	l_12af
	.long	wolf_updates_baloon_3865
	.long	l_1496
	.long	l_3be3
	.long	l_3c92
	.long	l_14dc
	.long	l_1518
	.long	l_154d
	.long	l_3e69
	.long	l_3e9c
	.long	l_3f5c
	.long	l_3f72
	.long	l_3f7c
	.long	rom_check_3fe9

l_125f:
	subq.b	#1,(0x11,a2)                    	| [$125f: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$1262: ret  nz] [...]
0:
	addq.b	#1,(0x02,a2)                    	| [$1263: inc  (ix+$02)]
	LOAD_ROM	0x3838,a1                          	| [$1266: ld   de,$3838]
	move.b	#0x01,(0x08,a2)                 	| [$1269: ld   (ix+$08),$01]
	jra	store_de_in_struct_381e                             	| [$126d: jp   $381E]
l_1270:
	jbsr	l_4006                            	| [$1270: call $4006]
	move.b	(0x0a,a2),d0                    	| [$1273: ld   a,(ix+$0a)]
	neg.b	d0                               	| [$1276: neg]
	move.b	d0,d1                           	| [$1278: ld   b,a]
	move.b	(0x05,a2),d0                    	| [$1279: ld   a,(ix+$05)]
	cmp.b	d1,d0                            	| [$127c: cp   b]
	jcc	l_1282                             	| [$127d: jr   nc,$1282]
	subq.b	#1,(0x06,a2)                    	| [$127f: dec  (ix+$06)]
l_1282:
	add.b	(0x0a,a2),d0                     	| [$1282: add  a,(ix+$0a)]
	move.b	d0,(0x05,a2)                    	| [$1285: ld   (ix+$05),a]
	move.b	(0x06,a2),d0                    	| [$1288: ld   a,(ix+$06)]
	                               	| [$128b: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$128c: ret  nz] [...]
0:
	jbsr	l_3553                            	| [$128d: call $3553]
	lea	l_8D40(a6),a0                      	| [$1290: ld   hl,$8D40]
	subq.b	#1,(a0)                         	| [$1293: dec  (hl)]
	lea	nb_wolves_8901(a6),a0              	| [$1294: ld   hl,nb_wolves_8901]
	move.b	(a0),d0                         	| [$1297: ld   a,(hl)]
	move.b	d0,d2                           	| [$1298: ld   c,a]
	tst.b	d0                               	| [$1299: and  a]
	jeq	l_129d                             	| [$129a: jr   z,$129D]
	subq.b	#1,(a0)                         	| [$129c: dec  (hl)]
l_129d:
	move.b	in_game_sub_state_880A(a6),d0   	| [$129d: ld   a,(in_game_sub_state_880A)]
	cmp.b	#0x04,d0                         	| [$12a0: cp   $04]
	jne	l_12a6                             	| [$12a2: jr   nz,$12A6]
	addq.w	#1,a0                           	| [$12a4: inc  l]
	addq.b	#1,(a0)                         	| [$12a5: inc  (hl)]
l_12a6:
	move.b	d2,d0                           	| [$12a6: ld   a,c]
	subq.b	#1,d0                           	| [$12a7: dec  a]
	cmp.b	#0x0A,d0                         	| [$12a8: cp   $0A]
	bcs.b	0f                               	| [...]
	rts                                    	| [$12aa: ret  nc] [...]
0:
	move.b	d0,l_8743(a6)                   	| [$12ab: ld   ($8743),a]
	rts                                    	| [$12ae: ret]
l_12af:
	jbsr	l_4006                            	| [$12af: call $4006]
	move.b	(0x08,a2),d0                    	| [$12b2: ld   a,(ix+$08)]
	                               	| [$12b5: and  a]
	jne	l_13fe                             	| [$12b6: jp   nz,$13FE]
	move.b	(0x05,a2),d0                    	| [$12b9: ld   a,(ix+$05)]
	add.b	(0x09,a2),d0                     	| [$12bc: add  a,(ix+$09)]
	jcc	l_12c4                             	| [$12bf: jr   nc,$12C4]
	addq.b	#1,(0x06,a2)                    	| [$12c1: inc  (ix+$06)]
l_12c4:
	move.b	d0,(0x05,a2)                    	| [$12c4: ld   (ix+$05),a]
	move.b	d0,d1                           	| [$12c7: ld   b,a]
	move.b	nb_wolves_8901(a6),d0           	| [$12c8: ld   a,(nb_wolves_8901)]
	cmp.b	#0x03,d0                         	| [$12cb: cp   $03]
	jcs	l_1399                             	| [$12cd: jp   c,$1399]
l_12d0:
	LOAD_ROM	0x12FB,a0                          	| [$12d0: ld   hl,$12FB]
	move.b	round_number_8907(a6),d0                   	| [$12d3: ld   a,($8907)]
	and.b	#0x1F,d0                         	| [$12d6: and  $1F]
	lsr.b	#2,d0                            	| [$12d8: srl  a] * 2
	jbsr	load_16bit_rom_pointer_0c45                            	| [$12dc: call $0C45]
	exg	a1,a0                              	| [$12df: ex   de,hl]
	move.b	character_animation_timer_8D41(a6),d0                   	| [$12e0: ld   a,($8D41)]
	and.b	#0x0F,d0                         	| [$12e3: and  $0F]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$12e5: rst  $20]
	move.b	d0,d2                           	| [$12e6: ld   c,a]
	move.b	(0x06,a2),d0                    	| [$12e7: ld   a,(ix+$06)]
	cmp.b	d2,d0                            	| [$12ea: cp   c]
	jeq	l_1383                             	| [$12eb: jp   z,$1383]
	cmp.b	#0x14,d0                         	| [$12ee: cp   $14]
	bcc.b	0f                               	| [...]
	rts                                    	| [$12f0: ret  c] [...]
0:
	move.b	#0x01,(0x08,a2)                 	| [$12f1: ld   (ix+$08),$01]
	LOAD_ROM	0x3838,a1                          	| [$12f5: ld   de,$3838]
	jra	store_de_in_struct_381e                             	| [$12f8: jp   $381E]

l_1383:
	move.b	d1,d0                           	| [$1383: ld   a,b]
	cmp.b	#0x20,d0                         	| [$1384: cp   $20]
	bcs.b	0f                               	| [...]
	rts                                    	| [$1386: ret  nc] [...]
0:
	jra	l_13bc                             	| [$1387: jr   $13BC]
l_1389:
	btst.b	#0,(0x08,a2)                    	| [$1389: bit  0,(ix+$08)]
	bne.b	0f                               	| [...]
	rts                                    	| [$138d: ret  z] [...]
0:
	jra	l_141c                             	| [$138e: jp   $141C]
l_1391:
	btst.b	#0,(0x08,a2)                    	| [$1391: bit  0,(ix+$08)]
	beq.b	0f                               	| [...]
	rts                                    	| [$1395: ret  nz] [...]
0:
	jra	l_12d0                             	| [$1396: jp   $12D0]
l_1399:
	move.b	(0x06,a2),d0                    	| [$1399: ld   a,(ix+$06)]
	cmp.b	#0x07,d0                         	| [$139c: cp   $07]
	jcs	l_1389                             	| [$139e: jr   c,$1389]
	cmp.b	#0x14,d0                         	| [$13a0: cp   $14]
	jcc	l_1391                             	| [$13a2: jr   nc,$1391]
	lea	l_8D6B(a6),a0                      	| [$13a4: ld   hl,$8D6B]
	move.b	(a0),d0                         	| [$13a7: ld   a,(hl)]
	                               	| [$13a8: and  a]
	jeq	l_13ad                             	| [$13a9: jr   z,$13AD]
	subq.b	#1,(a0)                         	| [$13ab: dec  (hl)]
	rts                                    	| [$13ac: ret]
l_13ad:
	move.b	d1,d0                           	| [$13ad: ld   a,b]
	cmp.b	#0x80,d0                         	| [$13ae: cp   $80]
	bcs.b	0f                               	| [...]
	rts                                    	| [$13b0: ret  nc] [...]
0:
	exg	a1,a0                              	| [$13b1: ex   de,hl]
	LOAD_ROM	0x13D3,a0                          	| [$13b2: ld   hl,$13D3]
	move.b	round_number_8907(a6),d0                   	| [$13b5: ld   a,($8907)]
	and.b	#0x07,d0                         	| [$13b8: and  $07]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$13ba: rst  $20]
	move.b	d0,(a1)                         	| [$13bb: ld   (de),a]
l_13bc:
	lea	l_8B70(a6),a3                      	| [$13bc: ld   iy,$8B70]
	move.w	#0x0018,d3                      	| [$13c0: ld   de,$0018] 24
	move.b	#0x05,d1                        	| [$13c3: ld   b,$05]
l_13c5:
	move.b	(0x00,a3),d0                    	| [$13c5: ld   a,(iy+$00)]
	or.b	(0x01,a3),d0                      	| [$13c8: or   (iy+$01)]
	ror.b	#1,d0                            	| [$13cb: rrca]
	jcc	l_13db                             	| [$13cc: jr   nc,$13DB]
	add.w	d3,a3                            	| [$13ce: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_13c5                             	| [$13d0: djnz $13C5]
	rts                                    	| [$13d2: ret]
	
l_13db:
	lea	character_animation_timer_8D41(a6),a0                      	| [$13db: ld   hl,$8D41]
	addq.b	#1,(a0)                         	| [$13de: inc  (hl)]
	jne	l_13e2                             	| [$13df: jr   nz,$13E2]
	addq.b	#1,(a0)                         	| [$13e1: inc  (hl)]
l_13e2:
	move.b	(a0),d2                         	| [$13e2: ld   c,(hl)]
	move.b	d2,(0x14,a2)                    	| [$13e3: ld   (ix+$14),c]
	LOAD_ROM	0x3988,a0                          	| [$13e6: ld   hl,$3988]
	LOAD_D5D6_FROM_A0_ROM
	move.b	d6,(0x0c,a2)                    	| [$13e9: ld   (ix+$0c),l]
	move.b	d5,(0x0d,a2)                    	| [$13ec: ld   (ix+$0d),h]
	clr.b	(0x0e,a2)                        	| [$13ef: ld   (ix+$0e),$00]
	move.b	#0x28,(0x11,a2)                 	| [$13f3: ld   (ix+$11),$28]
l_13f7:
	move.b	#0x04,(0x02,a2)                 	| [$13f7: ld   (ix+$02),$04]
	jra	l_142c                             	| [$13fb: jp   $142C]
l_13fe:
	move.b	(0x0a,a2),d0                    	| [$13fe: ld   a,(ix+$0a)]
	neg.b	d0                               	| [$1401: neg]
	move.b	d0,d1                           	| [$1403: ld   b,a]
	move.b	(0x05,a2),d0                    	| [$1404: ld   a,(ix+$05)]
	cmp.b	d1,d0                            	| [$1407: cp   b]
	jcc	l_140d                             	| [$1408: jr   nc,$140D]
	subq.b	#1,(0x06,a2)                    	| [$140a: dec  (ix+$06)]
l_140d:
	add.b	(0x0a,a2),d0                     	| [$140d: add  a,(ix+$0a)]
	move.b	d0,(0x05,a2)                    	| [$1410: ld   (ix+$05),a]
	move.b	d0,d1                           	| [$1413: ld   b,a]
	move.b	nb_wolves_8901(a6),d0           	| [$1414: ld   a,(nb_wolves_8901)]
	cmp.b	#0x03,d0                         	| [$1417: cp   $03]
	jcs	l_1399                             	| [$1419: jp   c,$1399]
l_141c:
	move.b	(0x06,a2),d0                    	| [$141c: ld   a,(ix+$06)]
	cmp.b	#0x02,d0                         	| [$141f: cp   $02]
	bcs.b	0f                               	| [...]
	rts                                    	| [$1421: ret  nc] [...]
0:
	clr.b	(0x08,a2)                        	| [$1422: ld   (ix+$08),$00]
	LOAD_ROM	0x3829,a1                          	| [$1426: ld   de,$3829]
	jra	store_de_in_struct_381e                             	| [$1429: jp   $381E]
l_142c:
	move.b	#0x01,(0x00,a3)                 	| [$142c: ld   (iy+$00),$01]
	move.b	#0x04,(0x02,a3)                 	| [$1430: ld   (iy+$02),$04]
	move.b	d2,(0x14,a3)                    	| [$1434: ld   (iy+$14),c]
	CLEAR_XC_FLAGS                         	| [$1437: xor  a]
	clr.b	d0                               	| [$1437: xor  a]
	move.b	d0,(0x07,a3)                    	| [$1438: ld   (iy+$07),a]
	move.b	d0,(0x0e,a3)                    	| [$143b: ld   (iy+$0e),a]
	move.b	(0x05,a2),d0                    	| [$143e: ld   a,(ix+$05)]
	add.b	#0x80,d0                         	| [$1441: add  a,$80]
	move.b	d0,(0x05,a3)                    	| [$1443: ld   (iy+$05),a]
	move.b	(0x03,a2),d0                    	| [$1446: ld   a,(ix+$03)]
	add.b	#0x80,d0                         	| [$1449: add  a,$80]
	move.b	d0,(0x03,a3)                    	| [$144b: ld   (iy+$03),a]
	move.b	(0x04,a2),d0                    	| [$144e: ld   a,(ix+$04)]
	subq.b	#0x01,d0                        	| [$1451: sub  $01]
	move.b	d0,(0x04,a3)                    	| [$1453: ld   (iy+$04),a]
	move.b	(0x06,a2),d0                    	| [$1456: ld   a,(ix+$06)]
	addq.b	#0x01,d0                        	| [$1459: add  a,$01]
	move.b	d0,(0x06,a3)                    	| [$145b: ld   (iy+$06),a]
	move.b	play_variables_player_1_8900(a6),d0	| [$145e: ld   a,(play_variables_player_1_8900)]
	cmp.b	#0x08,d0                         	| [$1461: cp   $08]
	jcs	l_1467                             	| [$1463: jr   c,$1467]
	move.b	#0x07,d0                        	| [$1465: ld   a,$07]
l_1467:
	LOAD_ROM	0x148E,a0                          	| [$1467: ld   hl,$148E]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$146a: rst  $20]
	move.b	round_number_8907(a6),d0                   	| [$146b: ld   a,($8907)]
	and.b	#0x01,d7                         	| [$146e: and  $01]
	move.b	(a0),d0                         	| [$1470: ld   a,(hl)]
	tst.b	d7
	jeq	l_1475                             	| [$1471: jr   z,$1475]
	neg.b	d0                               	| [$1473: neg]
l_1475:
	move.b	d0,(0x0a,a3)                    	| [$1475: ld   (iy+$0a),a]
	move.b	d0,(0x0a,a2)                    	| [$1478: ld   (ix+$0a),a]
	LOAD_ROM	0x38CB,a1                          	| [$147b: ld   de,$38CB]
	move.b	d0,(0x0b,a3)                    	| [$147e: ld   (iy+$0b),a]
	LOAD_D3D4_FROM_A1_ROM
	move.b	d4,(0x0c,a3)                    	| [$1481: ld   (iy+$0c),e]
	move.b	d3,(0x0d,a3)                    	| [$1484: ld   (iy+$0d),d]
	move.b	#0x28,(0x11,a3)                 	| [$1487: ld   (iy+$11),$28]
	jra	l_0ee3                             	| [$148b: jp   $0EE3]
	
l_1496:
	jbsr	l_4006                            	| [$1496: call $4006]
	move.b	(0x0a,a2),d0                    	| [$1499: ld   a,(ix+$0a)]
	neg.b	d0                               	| [$149c: neg]
	move.b	d0,d1                           	| [$149e: ld   b,a]
	move.b	(0x03,a2),d0                    	| [$149f: ld   a,(ix+$03)]
	cmp.b	d1,d0                            	| [$14a2: cp   b]
	jcc	l_14a8                             	| [$14a3: jr   nc,$14A8]
	subq.b	#1,(0x04,a2)                    	| [$14a5: dec  (ix+$04)]
l_14a8:
	add.b	(0x0a,a2),d0                     	| [$14a8: add  a,(ix+$0a)]
	move.b	d0,(0x03,a2)                    	| [$14ab: ld   (ix+$03),a]
	move.b	(0x04,a2),d1                    	| [$14ae: ld   b,(ix+$04)]
	move.b	(0x07,a2),d0                    	| [$14b1: ld   a,(ix+$07)]
	                               	| [$14b4: and  a]
	jeq	l_14c9                             	| [$14b5: jr   z,$14C9]
	move.b	d1,d0                           	| [$14b7: ld   a,b]
	cmp.b	#0x04,d0                         	| [$14b8: cp   $04]
	jcs	l_14c0                             	| [$14ba: jr   c,$14C0]
	move.b	(0x06,a2),d0                    	| [$14bc: ld   a,(ix+$06)]
	rts                                    	| [$14bf: ret]
l_14c0:
	clr.b	(0x02,a2)                        	| [$14c0: ld   (ix+$02),$00]
	move.b	#0x20,(0x11,a2)                 	| [$14c4: ld   (ix+$11),$20]
	rts                                    	| [$14c8: ret]
l_14c9:
	move.b	d1,d0                           	| [$14c9: ld   a,b]
	cmp.b	#0x02,d0                         	| [$14ca: cp   $02]
	bcs.b	0f                               	| [...]
	rts                                    	| [$14cc: ret  nc] [...]
0:
	LOAD_ROM	0x3BD1,a1                          	| [$14cd: ld   de,$3BD1]
	jbsr	store_de_in_struct_381e                            	| [$14d0: call $381E]
	move.b	#0x02,(0x02,a2)                 	| [$14d3: ld   (ix+$02),$02]
	move.b	#0x28,(0x11,a2)                 	| [$14d7: ld   (ix+$11),$28]
	rts                                    	| [$14db: ret]
l_14dc:
	move.b	#0x01,d1                        	| [$14dc: ld   b,$01]
	move.b	(0x17,a2),d2                    	| [$14de: ld   c,(ix+$17)]
	move.b	l_8D45(a6),d0                   	| [$14e1: ld   a,($8D45)]
	                               	| [$14e4: and  a]
	jeq	l_1508                             	| [$14e5: jr   z,$1508]
	move.b	(0x12,a2),d2                    	| [$14e7: ld   c,(ix+$12)]
	addq.b	#1,d2                           	| [$14ea: inc  c]
	jeq	l_1508                             	| [$14eb: jr   z,$1508]
	cmp.b	#0x05,d0                         	| [$14ed: cp   $05]
	jcs	l_14f3                             	| [$14ef: jr   c,$14F3]
	move.b	#0x04,d0                        	| [$14f1: ld   a,$04]
l_14f3:
	move.b	d0,d1                           	| [$14f3: ld   b,a]
	subq.b	#1,d1                           	| [$14f4: dec  b]
	move.b	d1,d2                           	| [$14f5: ld   c,b]
	jeq	l_14fe                             	| [$14f6: jr   z,$14FE]
	move.b	#0x01,d0                        	| [$14f8: ld   a,$01]
l_14fa:
	asl.b	#1,d0                            	| [$14fa: sla  a]
	subq.b	#1,d1                           	| [...]
	jne	l_14fa                             	| [$14fc: djnz $14FA]
l_14fe:
	lea	l_8F60(a6),a0                      	| [$14fe: ld   hl,$8F60]
	add.b	(a0),d0                          	| [$1501: add  a,(hl)]
	move.b	d0,(a0)                         	| [$1502: ld   (hl),a]
	lea	l_8F5E(a6),a0                        	| [$1503: ld   l,$5E]
	addq.b	#1,(a0)                         	| [$1505: inc  (hl)]
	move.b	#0x38,d1                        	| [$1506: ld   b,$38]
l_1508:
	move.b	d1,(0x11,a2)                    	| [$1508: ld   (ix+$11),b]
	move.b	d2,d0                           	| [$150b: ld   a,c]
	LOAD_ROM	0x1557,a0                          	| [$150c: ld   hl,$1557]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$150f: call $0C45]
	jbsr	store_de_in_struct_381e                            	| [$1512: call $381E]
	addq.b	#1,(0x02,a2)                    	| [$1515: inc  (ix+$02)]
l_1518:
	jbsr	l_4006                            	| [$1518: call $4006]
	subq.b	#1,(0x11,a2)                    	| [$151b: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$151e: ret  nz] [...]
0:
	move.b	l_8F60(a6),d0                   	| [$151f: ld   a,($8F60)]
	asl.b	#1,d0                            	| [$1522: sla  a]
	move.b	d0,d1                           	| [$1524: ld   b,a]
	                               	| [$1525: and  a]
	jeq	l_153a                             	| [$1526: jr   z,$153A]
	jbsr	convert_number_to_bcd_1131                            	| [$1528: call $1131]
	move.b	d0,d4                           	| [$152b: ld   e,a]
	move.b	d2,d0                           	| [$152c: ld   a,c]
	                               	| [$152d: and  a]
	jeq	l_1533                             	| [$152e: jr   z,$1533]
	move.b	d0,l_85E9(a6)                   	| [$1530: ld   ($85E9),a]
l_1533:
	lea	l_85C9(a6),a0                      	| [$1533: ld   hl,$85C9]
	move.b	d4,d0                           	| [$1536: ld   a,e]
	jbsr	write_2_digits_to_screen_1119                            	| [$1537: call $1119]
l_153a:
	move.b	(0x16,a2),d0                    	| [$153a: ld   a,(ix+$16)]
	cmp.b	#0x07,d0                         	| [$153d: cp   $07]
	jeq	l_3d99                             	| [$153f: jp   z,$3D99]
	addq.b	#1,d0                           	| [$1542: inc  a]
	move.b	d0,(0x13,a2)                    	| [$1543: ld   (ix+$13),a]
	move.b	#0x01,(0x11,a2)                 	| [$1546: ld   (ix+$11),$01]
	addq.b	#1,(0x02,a2)                    	| [$154a: inc  (ix+$02)]
l_154d:
	jbsr	l_4006                            	| [$154d: call $4006]
	subq.b	#1,(0x11,a2)                    	| [$1550: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$1553: ret  nz] [...]
0:
	jra	l_3553                             	| [$1554: jp   $3553]

l_1583:
	lea	l_8F40(a6),a0                         	| [$1583: ld   hl,$8F4D]
	addq.b	#1,(a0)                         	| [$1586: inc  (hl)]
	move.b	(a0),d0                         	| [$1587: ld   a,(hl)]
	move.b	d0,d1                           	| [$1588: ld   b,a]
	and.b	#0x0F,d0                         	| [$1589: and  $0F]
	beq.b	0f                               	| [...]
	rts                                    	| [$158b: ret  nz] [...]
0:
	btst.b	#4,d1                           	| [$158c: bit  4,b]
	LOAD_ROM	0x0635,a1                          	| [$158e: ld   de,$0635]
	jeq	l_1595                             	| [$1591: jr   z,$1595]
	move.b	#0xB5,d3                        	| [$1593: ld   e,$B5]
l_1595:
	jbsr	update_88A0_0038                            	| [$1595: rst  $38]
	move.b	checksum_failed_89ef(a6),d0                   	| [$1596: ld   a,($89EF)]
	                               	| [$1599: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$159a: ret  z] [...]
0:

in_game_159B:
	jbsr	l_7912                            	| [$159b: call $7912]
	lea	continue_15D1,a0                   	| [$159e: ld   hl,continue_15D1]

	move.l	a0,-(sp)                        	| [$15a1: push hl]
	move.b	in_game_sub_state_880A(a6),d0   	| [$15a2: ld   a,(in_game_sub_state_880A)]
	and.b	#0x1F,d0                         	| [$15a5: and  $1F]
	jbsr	jump_from_table_below_0028                            	| [$15a7: rst  $28]
	.long	clear_character_intro_screen_1601
	.long	init_level_background_16b7
	.long	draw_game_scenery_175d
	.long	l_17c1
	.long	main_game_sequence_18af
	.long	l_19ee
	.long	l_1a01
	.long	l_1a64
	.long	l_1b43
	.long	l_1b8c
	.long	l_1bab
	.long	l_1bcc
	.long	l_1c03
	.long	move_pigs_to_left_game_start_1c53
	.long	wait_while_showing_highscores_1c66
	.long	l_1d9c
	.long	l_1d6e
	.long	l_6bb2
	.long	l_71b9

continue_15D1:
	move.b	l_8806(a6),d0                   	| [$15d1: ld   a,($8806)]
	                               	| [$15d4: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$15d5: ret  nz] [...]
0:
	move.b	l_882C(a6),d0                   	| [$15d6: ld   a,($882C)]
	cmp.b	#0x0F,d0                         	| [$15d9: cp   $0F]
	jeq	l_0bb5                             	| [$15db: jp   z,$0BB5]
	move.b	nb_credits_8802(a6),d0          	| [$15de: ld   a,(nb_credits_8802)]
	                               	| [$15e1: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$15e2: ret  z] [...]
0:
	lea	game_state_8805(a6),a0             	| [$15e3: ld   hl,game_state_8805]
	move.b	#0x02,(a0)                      	| [$15e6: ld   (hl),$02]
	lea	in_game_sub_state_880A(a6),a0                        	| [$15e8: ld   l,$0A]
	clr.b	(a0)                             	| [$15ea: ld   (hl),$00]
	jbsr	l_2527                            	| [$15ec: call $2527]
	jbsr	l_02b9                            	| [$15ef: call $02B9]
	lea	round_text_address_855f(a6),a0                      	| [$15f2: ld   hl,$855F]
	move.w    #-0x20,d3                          	| [$15f5: ld   de,$FFE0]
	move.b	#0x08,d1                        	| [$15f8: ld   b,$08]
l_15fa:
	move.b	#0x10,d0                        	| [$15fa: ld   a,$10]
	jbsr	osd_w_videoram                         	| [$15fc: ld   (hl),a]
	add.w	d3,a0                            	| [$15fd: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_15fa                             	| [$15fe: djnz $15FA]
	rts                                    	| [$1600: ret]
clear_character_intro_screen_1601:
	jbsr	erase_a_column_02c9                            	| [$1601: call $02C9]
	beq.b	0f                               	| [...]
	rts                                    	| [$1604: ret  nz] [...]
0:
	jbsr	l_02e3                            	| [$1605: call $02E3]
	jbsr	l_19bc                            	| [$1608: call $19BC]
	clr.b	d0                               	| [$160b: xor  a]
	move.b	d0,l_8D21(a6)                   	| [$160c: ld   ($8D21),a]
	lea	l_8D23(a6),a0                      	| [$160f: ld   hl,$8D23]
	move.b	#0xC0,d1                        	| [$1612: ld   b,$C0]
	jbsr	fill_area_0010                            	| [$1614: rst  $10]
	lea	ram_pointer_8e21(a6),a0                      	| [$1615: ld   hl,$8E21]
	move.b	#0x0C,d1                        	| [$1618: ld   b,$0C]
	jbsr	fill_area_0010                            	| [$161a: rst  $10]
	move.b	d0,l_8F16(a6)                   	| [$161b: ld   ($8F16),a]
	move.b	d0,l_8F17(a6)                   	| [$161e: ld   ($8F17),a]
	                               	| [$1624: and  a]
	move.b	#0x02,d0                        	| [$1625: ld   a,$02]
	tst.b	two_player_mode_880E(a6)                   	| [$1621: ld   a,($880E)]
	jeq	l_1653                             	| [$1627: jr   z,$1653]
	move.b	l_89E3(a6),d0                   	| [$1629: ld   a,($89E3)]
	                               	| [$162c: and  a]
	jne	l_1653                             	| [$162d: jr   nz,$1653]
	addq.b	#1,d0                           	| [$162f: inc  a]
	move.b	d0,l_89E3(a6)                   	| [$1630: ld   ($89E3),a]
	                               	| [$1636: and  a]
	move.b	current_player_is_p2_880D(a6),d0                   	| [$1637: ld   a,($880D)]
	tst.b	l_880F(a6)                   	| [$1633: ld   a,($880F)]
	jne	l_1642                             	| [$163a: jr   nz,$1642]
	subq.b	#1,d0                           	| [$163c: dec  a]
	move.b	d0,cabinet_upright_881F(a6)                   	| [$163d: ld   ($881F),a]
	jra	l_1643                             	| [$1640: jr   $1643]
l_1642:
	subq.b	#1,d0                           	| [$1642: dec  a]
l_1643:
	move.w	#0x0602,d3                          	| [$1643: ld   de,$0602]
	tst.b	d0                               	| [$1646: and  a]
	jne	l_164a                             	| [$1647: jr   nz,$164A]
	addq.w	#1,d3                           	| [$1649: inc  e]
l_164a:
	jbsr	update_88A0_0038                            	| [$164a: rst  $38]
	LOAD_ROM	0x0779,a4                          	| [$164b: ld   bc,$0779]
	jbsr	l_075d                            	| [$164e: call $075D]
	move.b	#0x80,d0                        	| [$1651: ld   a,$80]
l_1653:
	move.b	d0,l_8808(a6)                   	| [$1653: ld   ($8808),a]
	lea	in_game_sub_state_880A(a6),a0      	| [$1656: ld   hl,in_game_sub_state_880A]
	addq.b	#1,(a0)                         	| [$1659: inc  (hl)]
	move.b	current_player_is_p2_880D(a6),d0                   	| [$165a: ld   a,($880D)]
	lea	l_8940(a6),a0                      	| [$165d: ld   hl,$8940]
	lea	play_variables_player_1_8900(a6),a1 	| [$1660: ld   de,play_variables_player_1_8900]
	move.w	#0x003F,d1                      	| [$1663: ld   bc,$003F] 63
	tst.b	d0                               	| [$1666: and  a]
	jeq	l_166c                             	| [$1667: jr   z,$166C]
	lea	play_variables_player_2_8980(a6),a0                      	| [$1669: ld   hl,$8980]
l_166c:
	jbsr	ldir                              	| [$166c: ldir]
	move.b	l_8903(a6),d0                   	| [$166e: ld   a,($8903)]
	                               	| [$1671: and  a]
	jeq	l_1679                             	| [$1672: jr   z,$1679]
	subq.b	#0x02,d0                        	| [$1674: sub  $02]
	move.b	d0,l_8931(a6)                   	| [$1676: ld   ($8931),a]
l_1679:
	move.b	l_8906(a6),d0                   	| [$1679: ld   a,($8906)]
	                               	| [$167c: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$167d: ret  nz] [...]
0:
	move.b	d0,l_8905(a6)                   	| [$167e: ld   ($8905),a]
	move.b	d0,l_890A(a6)                   	| [$1681: ld   ($890A),a]
	LOAD_ROM	0x16AE,a1                          	| [$1684: ld   de,$16AE]
	lea	l_89F0(a6),a0                      	| [$1687: ld   hl,$89F0]
l_168a:
	move.b	(a1),d0                         	| [$168a: ld   a,(de)]
	cmp.b	#0xFF,d0                         	| [$168b: cp   $FF]
	bne.b	0f                               	| [...]
	rts                                    	| [$168d: ret  z] [...]
0:
	move.b	d0,(a0)+                         	| [$168e: ld   (hl),a]
	addq.w	#1,a1                           	| [$168f: inc  de]
										| [$1690: inc  hl]
	jra	l_168a                             	| [$1691: jr   $168A]
	                                    	| [$1693: ret]
l_1694:
	LOAD_ROM	0x16AE,a1                          	| [$1694: ld   de,$16AE]
	lea	l_89F0(a6),a0                      	| [$1697: ld   hl,$89F0]
l_169a:
	move.b	(a1),d0                         	| [$169a: ld   a,(de)]
	cmp.b	#0xFF,d0                         	| [$169b: cp   $FF]
	jeq	l_16a6                             	| [$169d: jr   z,$16A6]
	cmp.b	(a0),d0                          	| [$169f: cp   (hl)]
	jne	init_level_background_16b7                             	| [$16a0: jr   nz,$16B7]
	addq.w	#1,a1                           	| [$16a2: inc  de]
	addq.w	#1,a0                           	| [$16a3: inc  hl]
	jra	l_169a                             	| [$16a4: jr   $169A]
l_16a6:
	lea	l_89F0(a6),a0                      	| [$16a6: ld   hl,$89F0]
	CLEAR_XC_FLAGS                         	| [$16a9: xor  a]
	clr.b	d0                               	| [$16a9: xor  a]
	move.b	#0x07,d1                        	| [$16aa: ld   b,$07]
	jbsr	fill_area_0010                            	| [$16ac: rst  $10]
	rts                                    	| [$16ad: ret]


init_level_background_16b7:
	lea	l_8808(a6),a0                      	| [$16b7: ld   hl,$8808]
	subq.b	#1,(a0)                         	| [$16ba: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$16bb: ret  nz] [...]
0:
	jbsr	l_02e3                            	| [$16bc: call $02E3]
	jbsr	l_1dd3                            	| [$16bf: call $1DD3]
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$16c2: ld   a,($8F50)]
	and.b	#0x01,d0                         	| [$16c5: and  $01]
	jeq	l_16cf                             	| [$16c7: jr   z,$16CF]
	move.b	#0x10,d0                        	| [$16c9: ld   a,$10]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$16cb: ld   (in_game_sub_state_880A),a]
	rts                                    	| [$16ce: ret]

l_16cf:
	clr.b	d0                               	| [$16cf: xor  a]
	move.b	d0,written_column_index_88B7(a6)                   	| [$16d0: ld   ($88B7),a]
	jbsr	display_nb_lives_03c2                            	| [$16d3: call $03C2]
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$16d6: ld   a,($8F50)]
	                               	| [$16d9: and  a]
	jeq	l_16f3                             	| [$16da: jr   z,$16F3]
	move.b	round_number_8907(a6),d0                   	| [$16dc: ld   a,($8907)]
	btst.b	#1,d0                           	| [$16df: bit  1,a]
	jne	l_16eb                             	| [$16e1: jr   nz,$16EB]
	* select layout for even rounds
	LOAD_ROM	0x4E81,a0                          	| [$16e3: ld   hl,$4E81]
	LOAD_ROM	0x5039,a1                          	| [$16e6: ld   de,$5039]
	jra	init_level_layout_1728                             	| [$16e9: jr   $1728]
l_16eb:
	* select layout for odd rounds
	LOAD_ROM	0x4C92,a0                          	| [$16eb: ld   hl,$4C92]
	LOAD_ROM	0x4DCE,a1                          	| [$16ee: ld   de,$4DCE]
	jra	init_level_layout_1728                             	| [$16f1: jr   $1728]

l_16f3:
	move.b	l_8904(a6),d0                   	| [$16f3: ld   a,($8904)]
	                               	| [$16f6: and  a]
	jne	l_1715                             	| [$16f7: jr   nz,$1715]
	move.b	l_8806(a6),d0                   	| [$16f9: ld   a,($8806)]
	                               	| [$16fc: and  a]
	jeq	l_1715                             	| [$16fd: jr   z,$1715]
	move.b	round_number_8907(a6),d0                   	| [$16ff: ld   a,($8907)]
	* select layout for even bonus rounds
	LOAD_ROM	0x462C,a0                          	| [$1704: ld   hl,$462C]
	LOAD_ROM	0x4B30,a1                          	| [$1707: ld   de,$4B30]
	btst.b	#0,d0                           	| [$1702: bit  0,a]
	jne	init_level_layout_1728                             	| [$170a: jr   nz,$1728]
	LOAD_ROM	0x44A9,a0                          	| [$170d: ld   hl,$44A9]
	LOAD_ROM	0x4B55,a1                          	| [$1710: ld   de,$4B55]
	tst.b	d0                               	| [$170c: and  a]
	jeq	init_level_layout_1728                             	| [$1713: jr   z,$1728]
l_1715:
	move.b	round_number_8907(a6),d0                   	| [$1715: ld   a,($8907)]
	LOAD_ROM	0x46D6,a0                          	| [$171a: ld   hl,$46D6]
	LOAD_ROM	0x4A50,a1                          	| [$171d: ld   de,$4A50]
	btst.b	#0,d0                           	| [$1718: bit  0,a]
	jeq	init_level_layout_1728                             	| [$1720: jr   z,$1728]
	LOAD_ROM	0x4872,a0                          	| [$1722: ld   hl,$4872]
	LOAD_ROM	0x4BF6,a1                          	| [$1725: ld   de,$4BF6]
init_level_layout_1728:
	STORE_ROM_POINTER	a1,rom_pointer_8f45(a6)            	| [$1728: ld   ($8F45),de]
	
	STORE_ROM_POINTER	a0,rom_pointer_88BA(a6)            	| [$172c: ld   ($88BA),hl]
	
	lea	l_8442(a6),a0                      	| [$172f: ld   hl,$8442]
	STORE_RAM_POINTER	a0,video_ram_pointer_88b8(a6)            	| [$1732: ld   ($88B8),hl]
	
	lea	l_8042(a6),a0                      	| [$1735: ld   hl,$8042]
	STORE_RAM_POINTER	a0,color_ram_pointerl_8F43(a6)            	| [$1738: ld   ($8F43),hl]
	
	move.b	#0x20,d0                        	| [$173b: ld   a,$20]
	move.b	d0,l_8D07(a6)                   	| [$173d: ld   ($8D07),a]
	lea	in_game_sub_state_880A(a6),a0      	| [$1740: ld   hl,in_game_sub_state_880A]
	addq.b	#1,(a0)                         	| [$1743: inc  (hl)]
	move.w	#0x0683,d3                          	| [$1744: ld   de,$0683]
	jbsr	update_88A0_0038                            	| [$1747: rst  $38]
	jbsr	l_1694                            	| [$1748: call $1694]
	rts                                    	| [$174b: ret]

table_1754:
   .byte	0x04,0x08,0x8D,0x8F,0x0F,0x88,0x8E,0x8C,0x5A
	.align	2

draw_game_scenery_175d:
	jbsr	write_column_to_screen_4381                            	| [$175d: call $4381]
	lea	written_column_index_88B7(a6),a0                      	| [$1760: ld   hl,$88B7]
	addq.b	#1,(a0)                         	| [$1763: inc  (hl)]
	move.b	(a0),d0                         	| [$1764: ld   a,(hl)]
	cmp.b	#0x1C,d0                         	| [$1765: cp   $1C]
	beq.b	0f                               	| [...]
	rts                                    	| [$1767: ret  nz] [...]
0:
	clr.b	(a0)                             	| [$1768: ld   (hl),$00]
	lea	tile_or_color_mode_8920(a6),a0                      	| [$176a: ld   hl,$8920]
	move.b	(a0),d0                         	| [$176d: ld   a,(hl)]
	addq.b	#1,(a0)                         	| [$176e: inc  (hl)]
	tst.b	d0                               	| [$176f: and  a]
l_1770:
	bne.b	0f                               	| [...]
	rts                                    	| [$1770: ret  z] [...]
0:
	CLEAR_XC_FLAGS                         	| [$1771: xor  a]
	clr.b	d0                               	| [$1771: xor  a]
	move.b	d0,(a0)                         	| [$1772: ld   (hl),a]
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$1773: ld   a,($8F50)]
	                               	| [$1776: and  a]
	jne	l_17bb                             	| [$1777: jr   nz,$17BB]
	move.b	l_8904(a6),d0                   	| [$1779: ld   a,($8904)]
	                               	| [$177c: and  a]
	jne	l_17a1                             	| [$177d: jr   nz,$17A1]
	move.b	l_8806(a6),d0                   	| [$177f: ld   a,($8806)]
	                               	| [$1782: and  a]
	jeq	l_1798                             	| [$1783: jr   z,$1798]
	move.b	round_number_8907(a6),d0                   	| [$1785: ld   a,($8907)]
	btst.b	#0,d0                           	| [$1788: bit  0,a]
	jne	l_1792                             	| [$178a: jr   nz,$1792]
	move.b	round_number_8907(a6),d0                   	| [$178c: ld   a,($8907)]
	                               	| [$178f: and  a]
	jne	l_1798                             	| [$1790: jr   nz,$1798]
l_1792:
	move.b	#0x0D,d0                        	| [$1792: ld   a,$0D]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$1794: ld   (in_game_sub_state_880A),a]
	rts                                    	| [$1797: ret]
l_1798:
	move.b	#0x01,d0                        	| [$1798: ld   a,$01]
	move.b	d0,l_8904(a6)                   	| [$179a: ld   ($8904),a]
	addq.b	#1,d0                           	| [$179d: inc  a]
	move.b	d0,l_8903(a6)                   	| [$179e: ld   ($8903),a]
l_17a1:
	jbsr	l_1ead                            	| [$17a1: call $1EAD]
	jbsr	display_nb_lives_2065                            	| [$17a4: call $2065]
	jbsr	l_4a0b                            	| [$17a7: call $4A0B]
	move.b	#0x10,d0                        	| [$17aa: ld   a,$10]
	move.b	d0,l_8A91(a6)                   	| [$17ac: ld   ($8A91),a]
	move.b	d0,animation_timer_8F06(a6)                   	| [$17af: ld   ($8F06),a]
	move.b	d0,l_8F09(a6)                   	| [$17b2: ld   ($8F09),a]
	jbsr	l_540d                            	| [$17b5: call $540D]
	jbsr	update_sprite_shadows_02EF        	| [$17b8: call update_sprite_shadows_02EF]
l_17bb:
	lea	in_game_sub_state_880A(a6),a0      	| [$17bb: ld   hl,in_game_sub_state_880A]
	move.b	#0x03,(a0)                      	| [$17be: ld   (hl),$03]
	rts                                    	| [$17c0: ret]

l_17c1:
	lea	player_structure_8A80(a6),a2      	| [$17c1: ld   ix,player_structure_8A80]
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$17c5: ld   a,($8F50)]
	                               	| [$17c8: and  a]
	lea	l_84F6(a6),a1                      	| [$17c9: ld   de,$84F6]
	jne	l_17d8                             	| [$17cc: jr   nz,$17D8]
	move.b	round_number_8907(a6),d0                   	| [$17ce: ld   a,($8907)]
	btst.b	#0,d0                           	| [$17d1: bit  0,a]
	LOAD_ROM	0x1E2C,a0                          	| [$17d3: ld   hl,$1E2C]
	jne	l_17dd                             	| [$17d6: jr   nz,$17DD]
l_17d8:
	LOAD_ROM	0x1E34,a0                          	| [$17d8: ld   hl,$1E34]
	lea	l_84E9(a6),a1                      	| [$17db: ld   e,$E9]
l_17dd:
	STORE_RAM_POINTER	a1,video_ram_pointer_88BE(a6)            	| [$17dd: ld   ($88BE),de]
	
	move.w	#0x0018,d3                      	| [$17e1: ld   de,$0018] 24
	move.b	#0x04,d1                        	| [$17e4: ld   b,$04]
l_17e6:
	move.b	#0x01,(0x00,a2)                 	| [$17e6: ld   (ix+$00),$01]
	move.b	(a0)+,d0                         	| [$17ea: ld   a,(hl)]
	move.b	d0,(0x04,a2)                    	| [$17eb: ld   (ix+$04),a]
	                           	| [$17ee: inc  hl]
	move.b	(a0)+,d0                         	| [$17ef: ld   a,(hl)]
	move.b	d0,(0x06,a2)                    	| [$17f0: ld   (ix+$06),a]
	                           	| [$17f3: inc  hl]
	add.w	d3,a2                            	| [$17f4: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_17e6                             	| [$17f6: djnz $17E6]
	lea	player_structure_8A80(a6),a2      	| [$17f8: ld   ix,player_structure_8A80]
	move.b	cabinet_upright_881F(a6),d0                   	| [$17fc: ld   a,($881F)]
	                               	| [$17ff: and  a]
	jne	l_1808                             	| [$1800: jr   nz,$1808]
	subq.b	#2,(0x06,a2)                    	| [$1802: dec  (ix+$06)] * 2
l_1808:
	LOAD_ROM	0x26C9,a0                          	| [$1808: ld   hl,$26C9]
	STORE_ROM_POINTER	a0,rom_pointer_8f00(a6)            	| [$180b: ld   ($8F00),hl]
	
	jbsr	l_22b1                            	| [$180e: call $22B1]
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$1811: ld   a,($8F50)]
	                               	| [$1814: and  a]
	jne	l_1848                             	| [$1815: jr   nz,$1848]
	move.b	l_8806(a6),d0                   	| [$1817: ld   a,($8806)]
	                               	| [$181a: and  a]
	jne	l_1829                             	| [$181b: jr   nz,$1829]
	move.b	l_8F3F(a6),d0                   	| [$181d: ld   a,($8F3F)]
	                               	| [$1820: and  a]
	jeq	l_1829                             	| [$1821: jr   z,$1829]
	lea	in_game_sub_state_880A(a6),a0      	| [$1823: ld   hl,in_game_sub_state_880A]
	move.b	#0x12,(a0)                      	| [$1826: ld   (hl),$12]
	rts                                    	| [$1828: ret]
l_1829:
	lea	in_game_sub_state_880A(a6),a0      	| [$1829: ld   hl,in_game_sub_state_880A]
	addq.b	#1,(a0)                         	| [$182c: inc  (hl)]
	LOAD_ROM	0x183F,a1                          	| [$182d: ld   de,$183F]
	lea	l_89F0(a6),a0                      	| [$1830: ld   hl,$89F0]
l_1833:
	move.b	(a1),d0                         	| [$1833: ld   a,(de)]
	cmp.b	#0x43,d0                         	| [$1834: cp   $43]
	bne.b	0f                               	| [...]
	rts                                    	| [$1836: ret  z] [...]
0:
	sub.b	#0x88,d0                         	| [$1837: sub  $88]
	move.b	d0,(a0)+                         	| [$1839: ld   (hl),a]
	addq.w	#1,a1                           	| [$183a: inc  de]
	                           	| [$183b: inc  hl]
	jra	l_1833                             	| [$183c: jr   $1833]
	rts                                    	| [$183e: ret]

l_1848:
	move.b	round_number_8907(a6),d0                   	| [$1848: ld   a,($8907)]
	btst.b	#1,d0                           	| [$184b: bit  1,a]
	jeq	l_18a9                             	| [$184d: jr   z,$18A9]
	move.b	round_number_8907(a6),d0                   	| [$184f: ld   a,($8907)]
	lsr.b	#1,d0                            	| [$1852: srl  a]
	cmp.b	#0x07,d0                         	| [$1854: cp   $07]
	jcs	l_185e                             	| [$1856: jr   c,$185E]
	move.b	#0x08,d0                        	| [$1858: ld   a,$08]
	move.b	#0x03,d1                        	| [$185a: ld   b,$03]
	jra	l_1865                             	| [$185c: jr   $1865]
l_185e:
	lsr.b	#1,d0                            	| [$185e: srl  a]
	and.b	#0x03,d0                         	| [$1860: and  $03]
	move.b	d0,d1                           	| [$1862: ld   b,a]
	addq.b	#0x05,d0                        	| [$1863: add  a,$05]
l_1865:
	move.b	d0,l_8F47(a6)                   	| [$1865: ld   ($8F47),a]
	move.b	d1,d0                           	| [$1868: ld   a,b]
	LOAD_ROM	0x70EB,a0                          	| [$1869: ld   hl,$70EB]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$186c: call $0C45]
	exg	a1,a0                              	| [$186f: ex   de,hl]
	lea	l_8AE0(a6),a2                      	| [$1870: ld   ix,$8AE0]
	move.b	l_8F47(a6),d0                   	| [$1874: ld   a,($8F47)]
	move.b	d0,d1                           	| [$1877: ld   b,a]
	clr.b	d2                               	| [$1878: ld   c,$00]
	LOAD_D5D6_FROM_A0_ROM
l_187a:
	move.b	#0x80,(0x05,a2)                 	| [$187a: ld   (ix+$05),$80]
	move.b	#0x01,(0x00,a2)                 	| [$187e: ld   (ix+$00),$01]
	move.b	#0x04,(0x06,a2)                 	| [$1882: ld   (ix+$06),$04]
	move.b	d5,(0x04,a2)                    	| [$1886: ld   (ix+$04),h]
	move.b	d6,d0                           	| [$1889: ld   a,l]
	and.b	#0x0F,d0                         	| [$188a: and  $0F]
	add.b	d5,d0                            	| [$188c: add  a,h]
	move.b	d0,d5                           	| [$188d: ld   h,a]
	move.b	d6,d0                           	| [$188e: ld   a,l]
	and.b	#0xF0,d0                         	| [$188f: and  $F0]
	add.b	d2,d0                            	| [$1891: add  a,c]
	move.b	d0,d2                           	| [$1892: ld   c,a]
	move.b	d0,(0x03,a2)                    	| [$1893: ld   (ix+$03),a]
	SET_C_FROM_X
	jcc	l_189c                             	| [$1896: jr   nc,$189C]
	addq.b	#1,(0x04,a2)                    	| [$1898: inc  (ix+$04)]
	addq.b	#1,d5                           	| [$189b: inc  h]
l_189c:
	LOAD_ROM	0x3829,a1                          	| [$189c: ld   de,$3829]
	jbsr	store_de_in_struct_381e                            	| [$189f: call $381E]
	move.w	#0x0018,d3                      	| [$18a2: ld   de,$0018] 24
	add.w	d3,a2                            	| [$18a5: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_187a                             	| [$18a7: djnz $187A]
l_18a9:
	lea	in_game_sub_state_880A(a6),a0      	| [$18a9: ld   hl,in_game_sub_state_880A]
	move.b	#0x0F,(a0)                      	| [$18ac: ld   (hl),$0F]
	rts                                    	| [$18ae: ret]

main_game_sequence_18af:
	jbsr	l_1e55                            	| [$18af: call $1E55]
	jbsr	l_6cab                            	| [$18b2: call $6CAB]
	jbsr	l_20d4                            	| [$18b5: call $20D4]
	jbsr	l_511b                            	| [$18b8: call $511B]
	jbsr	l_3377                            	| [$18bb: call $3377]
	jbsr	l_40bd                            	| [$18be: call $40BD]
	jbsr	update_sprite_shadows_02EF        	| [$18c1: call update_sprite_shadows_02EF]
	jbsr	l_18da                            	| [$18c4: call $18DA]
	jbsr	l_191c                            	| [$18c7: call $191C]
	jbsr	l_5ae4                            	| [$18ca: call $5AE4]
	jbsr	l_196e                            	| [$18cd: call $196E]
	jbsr	l_1f2f                            	| [$18d0: call $1F2F]
	jbsr	l_6b3b                            	| [$18d3: call $6B3B]
	jbsr	l_19ca                            	| [$18d6: call $19CA]
	rts                                    	| [$18d9: ret]

l_18da:
	move.b	l_8909(a6),d0                   	| [$18da: ld   a,($8909)]
	                               	| [$18dd: and  a]
	jeq	l_190e                             	| [$18de: jr   z,$190E]
	move.b	d0,d2                           	| [$18e0: ld   c,a]
	move.b	current_player_is_p2_880D(a6),d0                   	| [$18e1: ld   a,($880D)]
	lea	player_1_score_88A4(a6),a0                      	| [$18e4: ld   hl,$88A4]
	tst.b	d0                               	| [$18e7: and  a]
	jeq	l_18ed                             	| [$18e8: jr   z,$18ED]
	lea	player_2_score_88A7(a6),a0                      	| [$18ea: ld   hl,$88A7]
l_18ed:
	move.b	(a0),d0                         	| [$18ed: ld   a,(hl)]
	cmp.b	d2,d0                            	| [$18ee: cp   c]
	beq.b	0f                               	| [...]
	rts                                    	| [$18ef: ret  nz] [...]
0:
	lea	nb_lives_8908(a6),a0               	| [$18f0: ld   hl,nb_lives_8908]
	move.b	(a0),d0                         	| [$18f3: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$18f4: cp   $FF]
	jcc	l_18f9                             	| [$18f6: jr   nc,$18F9]
	addq.b	#1,(a0)                         	| [$18f8: inc  (hl)]
l_18f9:
	CLEAR_XC_FLAGS                               	| [$18fc: and  a]
	moveq	#0x08,d0                        	| [$18fd: ld   a,$08]
	tst.b	l_8800(a6)                   	| [$18f9: ld   a,($8800)]
	jeq	l_1902                             	| [$18ff: jr   z,$1902]
	subq.b	#1,d0                           	| [$1901: dec  a]
l_1902:
	abcd	d2,d0                            	| [$1902: add  a,c] + daa
	move.b	d0,l_8909(a6)                   	| [$1904: ld   ($8909),a]
	jbsr	display_nb_lives_03c2                            	| [$1907: call $03C2]
	jbsr	l_0f0d                            	| [$190a: call $0F0D]
	rts                                    	| [$190d: ret]

l_190e:
	                               	| [$1911: and  a]
	move.b	#0x05,d0                        	| [$1912: ld   a,$05]
	tst.b	l_8800(a6)                   	| [$190e: ld   a,($8800)]
	jeq	l_1918                             	| [$1914: jr   z,$1918]
	move.b	#0x03,d0                        	| [$1916: ld   a,$03]
l_1918:
	move.b	d0,l_8909(a6)                   	| [$1918: ld   ($8909),a]
	rts                                    	| [$191b: ret]

l_191c:
	move.b	nb_wolves_8901(a6),d0           	| [$191c: ld   a,(nb_wolves_8901)]
	                               	| [$191f: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$1920: ret  nz] [...]
0:
	move.b	l_8A82(a6),d0                   	| [$1921: ld   a,($8A82)]
	                               	| [$1924: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$1925: ret  nz] [...]
0:
	lea	l_8AE2(a6),a0                      	| [$1926: ld   hl,$8AE2]
	move.w	#0x0018,d3                      	| [$1929: ld   de,$0018] 24
	move.b	#0x06,d1                        	| [$192c: ld   b,$06]
	move.b	#0x03,d0                        	| [$192e: ld   a,$03]
l_1930:
	cmp.b	(a0),d0                          	| [$1930: cp   (hl)]
	bne.b	0f                               	| [...]
	rts                                    	| [$1931: ret  z] [...]
0:
	add.w	d3,a0                            	| [$1932: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_1930                             	| [$1933: djnz $1930]
	lea	in_game_sub_state_880A(a6),a0      	| [$1935: ld   hl,in_game_sub_state_880A]
	addq.b	#1,(a0)                         	| [$1938: inc  (hl)]
	move.b	round_number_8907(a6),d0                   	| [$1939: ld   a,($8907)]
	btst.b	#0,d0                           	| [$193c: bit  0,a]
	jne	l_1955                             	| [$193e: jr   nz,$1955]
	lsr.b	#1,d0                            	| [$1940: srl  a]
	move.b	d0,d1                           	| [$1942: ld   b,a]
	move.b	l_8820(a6),d0                   	| [$1943: ld   a,($8820)]
	add.b	d1,d0                            	| [$1946: add  a,b]
	move.b	d0,d1                           	| [$1947: ld   b,a]
	move.b	l_8903(a6),d0                   	| [$1948: ld   a,($8903)]
	add.b	d1,d0                            	| [$194b: add  a,b]
	move.b	d0,d1                           	| [$194c: ld   b,a]
	cmp.b	#0x20,d0                         	| [$194d: cp   $20]
	jcs	l_1953                             	| [$194f: jr   c,$1953]
	move.b	#0x1F,d0                        	| [$1951: ld   a,$1F]
l_1953:
	jra	l_1960                             	| [$1953: jr   $1960]
l_1955:
	move.b	d0,d1                           	| [$1955: ld   b,a]
	move.b	l_8820(a6),d0                   	| [$1956: ld   a,($8820)]
	add.b	d1,d0                            	| [$1959: add  a,b]
	cmp.b	#0x20,d0                         	| [$195a: cp   $20]
	jcs	l_1960                             	| [$195c: jr   c,$1960]
	move.b	#0x1F,d0                        	| [$195e: ld   a,$1F]
l_1960:
	move.b	d0,play_variables_player_1_8900(a6)	| [$1960: ld   (play_variables_player_1_8900),a]
	CLEAR_XC_FLAGS                         	| [$1963: xor  a]
	clr.b	d0                               	| [$1963: xor  a]
	move.b	d0,l_8A87(a6)                   	| [$1964: ld   ($8A87),a]
	move.b	d0,l_8905(a6)                   	| [$1967: ld   ($8905),a]
	move.b	d0,l_8906(a6)                   	| [$196a: ld   ($8906),a]
	rts                                    	| [$196d: ret]
l_196e:
	move.b	l_8D55(a6),d0                   	| [$196e: ld   a,($8D55)]
	                               	| [$1971: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$1972: ret  nz] [...]
0:
	move.b	l_8902(a6),d0                   	| [$1973: ld   a,($8902)]
	cmp.b	#0x05,d0                         	| [$1976: cp   $05]
	jcs	l_19a0                             	| [$1978: jr   c,$19A0]
	jeq	l_198a                             	| [$197a: jr   z,$198A]
	move.b	d0,l_8D55(a6)                   	| [$197c: ld   ($8D55),a]
	move.b	l_8D32(a6),d0                   	| [$197f: ld   a,($8D32)]
	                               	| [$1982: and  a]
	jne	l_1988                             	| [$1983: jr   nz,$1988]
	jbsr	l_0f6c                            	| [$1985: call $0F6C]
l_1988:
	jra	l_19a0                             	| [$1988: jr   $19A0]
l_198a:
	move.b	l_8D32(a6),d0                   	| [$198a: ld   a,($8D32)]
	                               	| [$198d: and  a]
	jne	l_1993                             	| [$198e: jr   nz,$1993]
	lea	l_8D68(a6),a0                      	| [$1990: ld   hl,$8D68]
l_1993:
	move.b	(a0),d0                         	| [$1993: ld   a,(hl)]
	                               	| [$1994: and  a]
	jne	l_19a0                             	| [$1995: jr   nz,$19A0]
	move.b	#0x01,(a0)                      	| [$1997: ld   (hl),$01]
	addq.w	#2,a0                           	| [$1999: inc  l]
	move.b	#0x01,(a0)                      	| [$199b: ld   (hl),$01]
	jbsr	l_0f58                            	| [$199d: call $0F58]
l_19a0:
	move.b	l_8D21(a6),d0                   	| [$19a0: ld   a,($8D21)]
	                               	| [$19a3: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$19a4: ret  nz] [...]
0:
	move.b	l_8F24(a6),d0                   	| [$19a5: ld   a,($8F24)]
	                               	| [$19a8: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$19a9: ret  nz] [...]
0:
	lea	l_8D22(a6),a0                      	| [$19aa: ld   hl,$8D22]
	move.b	(a0),d0                         	| [$19ad: ld   a,(hl)]
	                               	| [$19ae: and  a]
	jeq	l_19b3                             	| [$19af: jr   z,$19B3]
	subq.b	#1,(a0)                         	| [$19b1: dec  (hl)]
	rts                                    	| [$19b2: ret]
l_19b3:
	move.b	#0x20,(a0)                      	| [$19b3: ld   (hl),$20]
	                           	| [$19b5: dec  l]
	move.b	#0x01,-(a0)                      	| [$19b6: ld   (hl),$01]
	jbsr	l_0f76                            	| [$19b8: call $0F76]
	rts                                    	| [$19bb: ret]
l_19bc:
	lea	player_structure_8A80(a6),a0      	| [$19bc: ld   hl,player_structure_8A80]
	lea	l_8A81(a6),a1                      	| [$19bf: ld   de,$8A81]
	move.w	#0x01FF,d1                          	| [$19c2: ld   bc,$01FF]
	clr.b	(a0)                             	| [$19c5: ld   (hl),$00]
	jbsr	ldir                              	| [$19c7: ldir]
	rts                                    	| [$19c9: ret]
l_19ca:
	move.b	l_8806(a6),d0                   	| [$19ca: ld   a,($8806)]
	                               	| [$19cd: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$19ce: ret  nz] [...]
0:
	move.b	l_8D68(a6),d0                   	| [$19cf: ld   a,($8D68)]
	                               	| [$19d2: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$19d3: ret  z] [...]
0:
	lea	l_8D6A(a6),a0                      	| [$19d4: ld   hl,$8D6A]
	subq.b	#1,(a0)                         	| [$19d7: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$19d8: ret  nz] [...]
0:
	move.b	#0x18,(a0)                      	| [$19d9: ld   (hl),$18]
	subq.w	#1,a0                           	| [$19db: dec  l]
	btst.b	#0,(a0)                         	| [$19dc: bit  0,(hl)]
	jne	l_19e7                             	| [$19de: jr   nz,$19E7]
	move.b	#0x01,(a0)                      	| [$19e0: ld   (hl),$01]
	move.w	#0x060F,d3                          	| [$19e2: ld   de,$060F]
	jbsr	update_88A0_0038                            	| [$19e5: rst  $38]
	rts                                    	| [$19e6: ret]
l_19e7:
	clr.b	(a0)                             	| [$19e7: ld   (hl),$00]
	move.w	#0x068F,d3                          	| [$19e9: ld   de,$068F]
	jbsr	update_88A0_0038                            	| [$19ec: rst  $38]
	rts                                    	| [$19ed: ret]
l_19ee:
	jbsr	l_308b                            	| [$19ee: call $308B]
	jbsr	l_25a6                            	| [$19f1: call $25A6]
	jbsr	l_3377                            	| [$19f4: call $3377]
	jbsr	l_40bd                            	| [$19f7: call $40BD]
	jbsr	l_28c6                            	| [$19fa: call $28C6]
	jbsr	update_sprite_shadows_02EF        	| [$19fd: call update_sprite_shadows_02EF]
	rts                                    	| [$1a00: ret]
l_1a01:
	jbsr	l_2527                            	| [$1a01: call $2527]
	move.b	d0,l_8902(a6)                   	| [$1a04: ld   ($8902),a]
	move.b	d0,l_8934(a6)                   	| [$1a07: ld   ($8934),a]
	move.b	#0x30,d2                        	| [$1a0a: ld   c,$30]
	move.b	round_number_8907(a6),d0                   	| [$1a0c: ld   a,($8907)]
	cmp.b	#0x02,d0                         	| [$1a0f: cp   $02]
	jcc	l_1a15                             	| [$1a11: jr   nc,$1A15]
	move.b	#0x28,d2                        	| [$1a13: ld   c,$28]
l_1a15:
	lea	nb_wolves_8901(a6),a0              	| [$1a15: ld   hl,nb_wolves_8901]
	move.b	d2,(a0)                         	| [$1a18: ld   (hl),c]
	lea	round_number_8907(a6),a0                        	| [$1a19: ld   l,$07]
	addq.b	#1,(a0)                         	| [$1a1b: inc  (hl)]
	move.b	(a0),d0                         	| [$1a1c: ld   a,(hl)]
	and.b	#0x01,d0                         	| [$1a1d: and  $01]
	jne	l_1a47                             	| [$1a1f: jr   nz,$1A47]
	move.b	l_8806(a6),d0                   	| [$1a21: ld   a,($8806)]
	                               	| [$1a24: and  a]
	jeq	l_1d3c                             	| [$1a25: jp   z,$1D3C]
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$1a28: ld   a,($8F50)]
	                               	| [$1a2b: and  a]
	jne	l_1a3e                             	| [$1a2c: jr   nz,$1A3E]
	subq.b	#1,(a0)                         	| [$1a2e: dec  (hl)]
	move.b	#0x01,d0                        	| [$1a2f: ld   a,$01]
	move.b	d0,is_bonus_stage_8F50(a6)                   	| [$1a31: ld   ($8F50),a]
	move.b	d0,nb_wolves_8901(a6)           	| [$1a34: ld   (nb_wolves_8901),a]
	move.b	#0x40,d0                        	| [$1a37: ld   a,$40]
	move.b	d0,ram_or_rom_pointer_8f4a(a6)                   	| [$1a39: ld   ($8F4A),a]
	jra	l_1a47                             	| [$1a3c: jr   $1A47]
l_1a3e:
	clr.b	d0                               	| [$1a3e: xor  a]
	lea	rom_pointer_8f45(a6),a0                      	| [$1a3f: ld   hl,$8F45]
	move.b	#0x10,d1                        	| [$1a42: ld   b,$10]
	jbsr	fill_area_0010                            	| [$1a44: rst  $10]
	move.b	#0x81,d5                        	| [$1a45: ld   h,$81]
l_1a47:
	move.b	#0x04,D6                        	| [$1a47: ld   l,$04]
	LOAD_A0_FROM_D5D6
	clr.b	(a0)                             	| [$1a49: ld   (hl),$00]
	lea	l_8940(a6),a1                      	| [$1a4b: ld   de,$8940]
	lea	play_variables_player_1_8900(a6),a0 	| [$1a4e: ld   hl,play_variables_player_1_8900]
	move.w	#0x003F,d1                      	| [$1a51: ld   bc,$003F] 63
	move.b	current_player_is_p2_880D(a6),d0                   	| [$1a54: ld   a,($880D)]
	                               	| [$1a57: and  a]
	jeq	l_1a5d                             	| [$1a58: jr   z,$1A5D]
	lea	play_variables_player_2_8980(a6),a1                      	| [$1a5a: ld   de,$8980]
l_1a5d:
	jbsr	ldir                              	| [$1a5d: ldir]
	clr.b	d0                               	| [$1a5f: xor  a]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$1a60: ld   (in_game_sub_state_880A),a]
	rts                                    	| [$1a63: ret]
l_1a64:
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$1a64: ld   a,($8F50)]
	                               	| [$1a67: and  a]
	jne	l_1a01                             	| [$1a68: jr   nz,$1A01]
	jbsr	l_0f4e                            	| [$1a6a: call $0F4E]
	jbsr	l_2527                            	| [$1a6d: call $2527]
	CLEAR_XC_FLAGS                         	| [$1a70: xor  a]
	clr.b	d0                               	| [$1a70: xor  a]
	move.b	d0,l_89E3(a6)                   	| [$1a71: ld   ($89E3),a]
	move.b	l_8806(a6),d0                   	| [$1a74: ld   a,($8806)]
	                               	| [$1a77: and  a]
	jeq	l_1d3c                             	| [$1a78: jp   z,$1D3C]
	lea	nb_lives_8908(a6),a0               	| [$1a7b: ld   hl,nb_lives_8908]
	move.b	(a0),d0                         	| [$1a7e: ld   a,(hl)]
	                               	| [$1a7f: and  a]
	jeq	l_1a96                             	| [$1a80: jr   z,$1A96]
	subq.b	#1,(a0)                         	| [$1a82: dec  (hl)]
	jeq	l_1a96                             	| [$1a83: jr   z,$1A96]
l_1a85:
	jbsr	display_nb_lives_03c2                            	| [$1a85: call $03C2]
	move.b	#0x0A,d2                        	| [$1a88: ld   c,$0A]
	move.b	current_player_is_p2_880D(a6),d0                   	| [$1a8a: ld   a,($880D)]
	                               	| [$1a8d: and  a]
	jeq	l_1a91                             	| [$1a8e: jr   z,$1A91]
	addq.b	#1,d2                           	| [$1a90: inc  c]
l_1a91:
	move.b	d2,d0                           	| [$1a91: ld   a,c]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$1a92: ld   (in_game_sub_state_880A),a]
	rts                                    	| [$1a95: ret]
l_1a96:
	jbsr	l_0f92                            	| [$1a96: call $0F92]
	lea	in_game_sub_state_880A(a6),a0      	| [$1a99: ld   hl,in_game_sub_state_880A]
	move.b	current_player_is_p2_880D(a6),d0                   	| [$1a9c: ld   a,($880D)]
	                               	| [$1a9f: and  a]
	jeq	l_1aa3                             	| [$1aa0: jr   z,$1AA3]
	addq.b	#1,(a0)                         	| [$1aa2: inc  (hl)]
l_1aa3:
	addq.b	#1,(a0)                         	| [$1aa3: inc  (hl)]
	CLEAR_XC_FLAGS                         	| [$1aa4: xor  a]
	clr.b	d0                               	| [$1aa4: xor  a]
	move.b	d0,l_89FC(a6)                   	| [$1aa5: ld   ($89FC),a]
	move.b	d0,l_8931(a6)                   	| [$1aa8: ld   ($8931),a]
	move.b	d0,ram_pointer_8932(a6)                   	| [$1aab: ld   ($8932),a]
	jbsr	l_1ab2                            	| [$1aae: call $1AB2]
	rts                                    	| [$1ab1: ret]
l_1ab2:
	move.w	#0x001E,d1                      	| [$1ab2: ld   bc,$001E] 30
	moveq	#0,d6                           	| [$1ab5: ld   l,b]
	move.w	#0x0003,d3                      	| [$1ab6: ld   de,$0003] 3
	lea	l_88A2(a6),a2                      	| [$1ab9: ld   ix,$88A2]
	move.b	current_player_is_p2_880D(a6),d0                   	| [$1abd: ld   a,($880D)]
	ror.b	#1,d0                            	| [$1ac0: rrca]
	jcc	l_1ac5                             	| [$1ac1: jr   nc,$1AC5]
	add.w	d3,a2                            	| [$1ac3: add  ix,de]
l_1ac5:
	lea	l_8A00(a6),a3                      	| [$1ac5: ld   iy,$8A00]
l_1ac9:
	move.b	(0x02,a2),d0                    	| [$1ac9: ld   a,(ix+$02)]
	cmp.b	(0x02,a3),d0                     	| [$1acc: cp   (iy+$02)]
	jne	l_1adf                             	| [$1acf: jr   nz,$1ADF]
	move.b	(0x01,a2),d0                    	| [$1ad1: ld   a,(ix+$01)]
	cmp.b	(0x01,a3),d0                     	| [$1ad4: cp   (iy+$01)]
	jne	l_1adf                             	| [$1ad7: jr   nz,$1ADF]
	move.b	(0x00,a2),d0                    	| [$1ad9: ld   a,(ix+$00)]
	cmp.b	(0x00,a3),d0                     	| [$1adc: cp   (iy+$00)]
l_1adf:
	jcc	l_1aea                             	| [$1adf: jr   nc,$1AEA]
	add.w	d3,a3                            	| [$1ae1: add  iy,de]
	addq.b	#1,D6                           	| [$1ae3: inc  l]
	subq.w	#3,d1                           	| [$1ae4: dec  c]
	bne.b	0f                               	| [...]
	rts                                    	| [$1ae7: ret  z] [...]
0:
	jra	l_1ac9                             	| [$1ae8: jr   $1AC9]
l_1aea:
	move.b	D6,d0                           	| [$1aea: ld   a,l]
	addq.b	#1,d0                           	| [$1aeb: inc  a]
	move.b	d0,l_89FC(a6)                   	| [$1aec: ld   ($89FC),a]
	subq.b	#1,d0                           	| [$1aef: dec  a]
	movem.w	d1/d2,-(sp)                    	| [$1af0: push bc]
	lea	l_8A1D(a6),a0                      	| [$1af1: ld   hl,$8A1D]
	lea	l_8A20(a6),a1                      	| [$1af4: ld   de,$8A20]
	jbsr	lddr                              	| [$1af7: lddr]
	                           	| [$1af9: ld   l,a] clobbered below
	move.b	(0x00,a2),d0                    	| [$1afa: ld   a,(ix+$00)]
	move.b	d0,(0x00,a3)                    	| [$1afd: ld   (iy+$00),a]
	move.b	(0x01,a2),d0                    	| [$1b00: ld   a,(ix+$01)]
	move.b	d0,(0x01,a3)                    	| [$1b03: ld   (iy+$01),a]
	move.b	(0x02,a2),d0                    	| [$1b06: ld   a,(ix+$02)]
	move.b	d0,(0x02,a3)                    	| [$1b09: ld   (iy+$02),a]
	                    	| [$1b0c: pop  bc]
	                    	| [$1b0d: push bc]
	
	lea	l_8A30(a6),a2                      	| [$1b0e: ld   ix,$8A30]
	lea	l_89E1(a6),a0                      	| [$1b12: ld   hl,$89E1]
	move.b	current_player_is_p2_880D(a6),d0                   	| [$1b15: ld   a,($880D)]
	                               	| [$1b18: and  a]
	jeq	l_1b20                             	| [$1b19: jr   z,$1B20]
	lea	l_8A33(a6),a2                      	| [$1b1b: ld   ix,$8A33]
	addq.w	#1,a0                           	| [$1b1f: inc  hl]
l_1b20:
	move.b	#0x01,(a0)                      	| [$1b20: ld   (hl),$01]
	lea	l_89DD(a6),a0                        	| [$1b22: ld   l,$DD]
	lea	l_89E0(a6),a1                      	| [$1b24: ld   de,$89E0]
	jbsr	lddr                              	| [$1b27: lddr]
	move.b	(0x02,a2),d0                    	| [$1b29: ld   a,(ix+$02)]
	move.b	d0,(a1)                         	| [$1b2c: ld   (de),a]
	subq.w	#1,a1                           	| [$1b2d: dec  de]
	move.b	(0x01,a2),d0                    	| [$1b2e: ld   a,(ix+$01)]
	move.b	d0,(a1)                         	| [$1b31: ld   (de),a]
	movem.w	(sp)+,d1/d2                    	| [$1b32: pop  bc]
	lea	l_8E1C(a6),a0                      	| [$1b33: ld   hl,$8E1C]
	lea	ram_pointer_8e1f(a6),a1                      	| [$1b36: ld   de,$8E1F]
	jbsr	lddr                              	| [$1b39: lddr]
	exg	a1,a0                              	| [$1b3b: ex   de,hl]
	subq.w	#1,a0                           	| [$1b3c: dec  hl]
	move.b	#0x10,d0                        	| [$1b3d: ld   a,$10]
	move.b	#0x03,d1                        	| [$1b3f: ld   b,$03]
	jbsr	fill_area_0010                            	| [$1b41: rst  $10]
	rts                                    	| [$1b42: ret]
l_1b43:
	jbsr	erase_a_column_02c9                            	| [$1b43: call $02C9]
	beq.b	0f                               	| [...]
	rts                                    	| [$1b46: ret  nz] [...]
0:
	jbsr	l_02e3                            	| [$1b47: call $02E3]
	LOAD_ROM	0x0819,a4                          	| [$1b4a: ld   bc,$0819]
	jbsr	l_075d                            	| [$1b4d: call $075D]
	move.w	#0x0600,d3                          	| [$1b50: ld   de,$0600]
	jbsr	update_88A0_0038                            	| [$1b53: rst  $38]
	move.b	#0x02,d3                        	| [$1b54: ld   e,$02]
	jbsr	update_88A0_0038                            	| [$1b56: rst  $38]
	jbsr	l_7960                            	| [$1b57: call $7960]
	move.b	#0x0C,d0                        	| [$1b5a: ld   a,$0C]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$1b5c: ld   (in_game_sub_state_880A),a]
	clr.b	d0                               	| [$1b5f: xor  a]
	move.b	d0,l_8808(a6)                   	| [$1b60: ld   ($8808),a]
												| [$1b63: ld   de,$5593]
												| [$1b66: ld   bc,$2200]
											
													| [$1b69: ld   a,(de)]
													| [$1b6a: and  $37]
													| [$1b6c: rrca]
											
													| [$1b6d: adc  a,c]
													| [$1b6e: ld   c,a]
													| [$1b6f: inc  de]
													| [...]
												| [$1b70: djnz $1B69]
													| [$1b72: cp   $7C]
												| [$1b74: jr   z,$1B7A]
																| [$1b76: ld   hl,$881E]
													| [$1b79: inc  (hl)]
l_1b7a:
	LOAD_ROM	0x1FF2,a1                          	| [$1b7a: ld   de,$1FF2]
	lea	l_89F0(a6),a0                      	| [$1b7d: ld   hl,$89F0]
l_1b80:
	move.b	(a1),d0                         	| [$1b80: ld   a,(de)]
	cmp.b	#0xA0,d0                         	| [$1b81: cp   $A0]
	bne.b	0f                               	| [...]
	rts                                    	| [$1b83: ret  z] [...]
0:
	add.b	#0x08,d0                         	| [$1b84: add  a,$08]
	move.b	d0,(a0)                         	| [$1b86: ld   (hl),a]
	addq.w	#1,a1                           	| [$1b87: inc  de]
	addq.w	#1,a0                           	| [$1b88: inc  hl]
	jra	l_1b80                             	| [$1b89: jr   $1B80]
	rts                                    	| [$1b8b: ret]
l_1b8c:
	jbsr	erase_a_column_02c9                            	| [$1b8c: call $02C9]
	beq.b	0f                               	| [...]
	rts                                    	| [$1b8f: ret  nz] [...]
0:
	LOAD_ROM	0x0819,a4                          	| [$1b90: ld   bc,$0819]
	jbsr	l_075d                            	| [$1b93: call $075D]
	move.w	#0x0600,d3                          	| [$1b96: ld   de,$0600]
	jbsr	update_88A0_0038                            	| [$1b99: rst  $38]
	move.b	#0x03,d3                        	| [$1b9a: ld   e,$03]
	jbsr	update_88A0_0038                            	| [$1b9c: rst  $38]
	jbsr	l_7960                            	| [$1b9d: call $7960]
	move.b	#0x0C,d0                        	| [$1ba0: ld   a,$0C]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$1ba2: ld   (in_game_sub_state_880A),a]
	move.b	#0x60,d0                        	| [$1ba5: ld   a,$60]
	move.b	d0,l_8808(a6)                   	| [$1ba7: ld   ($8808),a]
	rts                                    	| [$1baa: ret]
l_1bab:
	move.b	two_player_mode_880E(a6),d0                   	| [$1bab: ld   a,($880E)]
	                               	| [$1bae: and  a]
	jeq	l_1bbc                             	| [$1baf: jr   z,$1BBC]
	move.b	l_8988(a6),d0                   	| [$1bb1: ld   a,($8988)]
	                               	| [$1bb4: and  a]
	jeq	l_1bbc                             	| [$1bb5: jr   z,$1BBC]
	move.b	#0x01,d0                        	| [$1bb7: ld   a,$01]
	move.b	d0,current_player_is_p2_880D(a6)                   	| [$1bb9: ld   ($880D),a]
l_1bbc:
	lea	l_8940(a6),a1                      	| [$1bbc: ld   de,$8940]
	lea	play_variables_player_1_8900(a6),a0 	| [$1bbf: ld   hl,play_variables_player_1_8900]
	move.w	#0x003F,d1                      	| [$1bc2: ld   bc,$003F] 63
	jbsr	ldir                              	| [$1bc5: ldir]
	clr.b	d0                               	| [$1bc7: xor  a]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$1bc8: ld   (in_game_sub_state_880A),a]
	rts                                    	| [$1bcb: ret]
l_1bcc:
	move.b	l_8948(a6),d0                   	| [$1bcc: ld   a,($8948)]
	                               	| [$1bcf: and  a]
	jeq	l_1bd6                             	| [$1bd0: jr   z,$1BD6]
	clr.b	d0                               	| [$1bd2: xor  a]
	move.b	d0,current_player_is_p2_880D(a6)                   	| [$1bd3: ld   ($880D),a]
l_1bd6:
	lea	play_variables_player_2_8980(a6),a1                      	| [$1bd6: ld   de,$8980]
	lea	play_variables_player_1_8900(a6),a0 	| [$1bd9: ld   hl,play_variables_player_1_8900]
	move.w	#0x003F,d1                      	| [$1bdc: ld   bc,$003F] 63
	jbsr	ldir                              	| [$1bdf: ldir]
	CLEAR_XC_FLAGS                         	| [$1be1: xor  a]
	clr.b	d0                               	| [$1be1: xor  a]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$1be2: ld   (in_game_sub_state_880A),a]
	LOAD_ROM	0x5328,a0                          	| [$1be5: ld   hl,$5328]
	move.b	#0x0E,d1                        	| [$1be8: ld   b,$0E]
l_1bea:
	move.b	(a0),d0                         	| [$1bea: ld   a,(hl)]
	and.b	#0x1F,d0                         	| [$1beb: and  $1F]
	add.b	d4,d0                            	| [$1bed: add  a,e]
	move.b	d0,d4                           	| [$1bee: ld   e,a]
	SET_C_FROM_X
	jcc	l_1bf2                             	| [$1bef: jr   nc,$1BF2]
	addq.b	#1,d3                           	| [$1bf1: inc  d]
l_1bf2:
	addq.w	#1,a0                           	| [$1bf2: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_1bea                             	| [$1bf3: djnz $1BEA]
	move.b	#0x60,d0                        	| [$1bf5: ld   a,$60]
	cmp.b	d4,d0                            	| [$1bf7: cp   e]
	jne	l_1bfe                             	| [$1bf8: jr   nz,$1BFE]
	move.b	#0x8A,d0                        	| [$1bfa: ld   a,$8A]
	sub.b	d3,d0                            	| [$1bfc: sub  d]
	bne.b	0f                               	| [...]
	rts                                    	| [$1bfd: ret  z] [...]
0:
l_1bfe:
	lea	checksum_failed_8A38(a6),a0                      	| [$1bfe: ld   hl,$8A38]
	addq.b	#1,(a0)                         	| [$1c01: inc  (hl)]
	rts                                    	| [$1c02: ret]
l_1c03:
	lea	l_8808(a6),a0                      	| [$1c03: ld   hl,$8808]
	subq.b	#1,(a0)                         	| [$1c06: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$1c07: ret  nz] [...]
0:
	move.b	#0x82,d0                        	| [$1c08: ld   a,$82]
	jbsr	display_string_05b2                            	| [$1c0a: call $05B2]
	move.b	#0x80,d0                        	| [$1c0d: ld   a,$80]
	jbsr	display_string_05b2                            	| [$1c0f: call $05B2]
	move.b	#0x89,d0                        	| [$1c12: ld   a,$89]
	jbsr	display_string_05b2                            	| [$1c14: call $05B2]
	LOAD_ROM	0x07D9,a4                          	| [$1c17: ld   bc,$07D9]
	jbsr	l_075d                            	| [$1c1a: call $075D]
	jbsr	display_high_scores_table_03E9                            	| [$1c1d: call $03E9]
	move.w	#0x0611,d3                          	| [$1c20: ld   de,$0611]
	jbsr	update_88A0_0038                            	| [$1c23: rst  $38]
	lea	in_game_sub_state_880A(a6),a0      	| [$1c24: ld   hl,in_game_sub_state_880A]
	move.b	#0x0E,(a0)                      	| [$1c27: ld   (hl),$0E]
	move.b	l_89FC(a6),d0                   	| [$1c29: ld   a,($89FC)]
	                               	| [$1c2c: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1c2d: ret  z] [...]
0:
	lea	l_8045(a6),a0                      	| [$1c2e: ld   hl,$8045]
	move.b	d0,d1                           	| [$1c31: ld   b,a]
l_1c32:
	addq.w	#2,a0                           	| [$1c32: inc  l]
	                           	| [$1c33: inc  l]
	subq.b	#1,d1                           	| [...]
	jne	l_1c32                             	| [$1c34: djnz $1C32]
	STORE_RAM_POINTER	a0,ram_pointer_89fd(a6)            	| [$1c36: ld   ($89FD),hl]
	
	jbsr	l_0fc1                            	| [$1c39: call $0FC1]
	lea	l_89FF(a6),a0                      	| [$1c3c: ld   hl,$89FF]
	move.b	#0x07,(a0)                      	| [$1c3f: ld   (hl),$07]
	lea	table_1754,a1                      	| [$1c41: ld   de,table_1754]
	lea	l_89F0(a6),a0                      	| [$1c44: ld   hl,$89F0]
l_1c47:
	move.b	(a1),d0                         	| [$1c47: ld   a,(de)]
	cmp.b	#0x5A,d0                         	| [$1c48: cp   $5A]
	bne.b	0f                               	| [...]
	rts                                    	| [$1c4a: ret  z] [...]
0:
	SET_X_FROM_C
	roxl.b	#1,d0                           	| [$1c4b: rl   a]
	move.b	d0,(a0)+                         	| [$1c4d: ld   (hl),a]
	addq.w	#1,a1                           	| [$1c4e: inc  de]
	                           	| [$1c4f: inc  hl]
	jra	l_1c47                             	| [$1c50: jr   $1C47]
	                                    	| [$1c52: ret]
move_pigs_to_left_game_start_1c53:
	move.b	round_number_8907(a6),d0                   	| [$1c53: ld   a,($8907)]
	and.b	#0x01,d0                         	| [$1c56: and  $01]
	jne	l_1c5f                             	| [$1c58: jr   nz,$1C5F]
	jbsr	l_64e2                            	| [$1c5a: call $64E2]
	jra	l_1c62                             	| [$1c5d: jr   $1C62]
l_1c5f:
	jbsr	l_68f8                            	| [$1c5f: call $68F8]
l_1c62:
	jbsr	update_sprite_shadows_02EF        	| [$1c62: call update_sprite_shadows_02EF]
	rts                                    	| [$1c65: ret]

wait_while_showing_highscores_1c66:
	lea	l_8808(a6),a0                      	| [$1c66: ld   hl,$8808]
	subq.b	#1,(a0)                         	| [$1c69: dec  (hl)]
	move.b	l_8E2A(a6),d0                   	| [$1c6a: ld   a,($8E2A)]
	                               	| [$1c6d: and  a]
	jeq	l_1c74                             	| [$1c6e: jr   z,$1C74]
	move.b	(a0),d0                         	| [$1c70: ld   a,(hl)]
	                               	| [$1c71: and  a]
	jeq	l_1c9c                             	| [$1c72: jr   z,$1C9C]
l_1c74:
	jbsr	l_7e94                            	| [$1c74: call $7E94]
	move.b	l_89FC(a6),d0                   	| [$1c77: ld   a,($89FC)]
	                               	| [$1c7a: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1c7b: ret  z] [...]
0:
	move.b	l_8808(a6),d0                   	| [$1c7c: ld   a,($8808)]
	and.b	#0x07,d0                         	| [$1c7f: and  $07]
	beq.b	0f                               	| [...]
	rts                                    	| [$1c81: ret  nz] [...]
0:
	move.b	l_89FF(a6),d0                   	| [$1c82: ld   a,($89FF)]
	LOAD_RAM_POINTER	ram_pointer_89fd(a6),a0             	| [$1c85: ld   hl,($89FD)]
	move.w	#0x0020,d3                      	| [$1c88: ld   de,$0020] 32
	move.b	#0x1C,d1                        	| [$1c8b: ld   b,$1C]
l_1c8d:
	move.b	d0,(a0)                         	| [$1c8d: ld   (hl),a]
	add.w	d3,a0                            	| [$1c8e: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_1c8d                             	| [$1c8f: djnz $1C8D]
	addq.b	#1,d0                           	| [$1c91: inc  a]
	cmp.b	#0x10,d0                         	| [$1c92: cp   $10]
	jcs	l_1c98                             	| [$1c94: jr   c,$1C98]
	move.b	#0x06,d0                        	| [$1c96: ld   a,$06]
l_1c98:
	move.b	d0,l_89FF(a6)                   	| [$1c98: ld   ($89FF),a]
	rts                                    	| [$1c9b: ret]
l_1c9c:
	lea	round_text_address_855f(a6),a0                      	| [$1c9c: ld   hl,$855F]
	move.w    #0xFFE0,d3                          	| [$1c9f: ld   de,$FFE0]
	move.b	#0x08,d1                        	| [$1ca2: ld   b,$08]
l_1ca4:
	move.b	#0x10,d0                        	| [$1ca4: ld   a,$10]
	jbsr	osd_w_videoram                         	| [$1ca6: ld   (hl),a]
	add.w	d3,a0                            	| [$1ca7: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_1ca4                             	| [$1ca8: djnz $1CA4]
	lea	l_82BC(a6),a0                      	| [$1caa: ld   hl,$82BC]
	move.w    #0xFFE0,d3                          	| [$1cad: ld   de,$FFE0]
	move.w	#0x0A00,d1                          	| [$1cb0: ld   bc,$0A00]
	LOAD_D1D2_FROM_D1_16
l_1cb3:
	move.b	(a0),d0                         	| [$1cb3: ld   a,(hl)]
	add.b	d2,d0                            	| [$1cb4: add  a,c]
	move.b	d0,d2                           	| [$1cb5: ld   c,a]
	add.w	d3,a0                            	| [$1cb6: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_1cb3                             	| [$1cb7: djnz $1CB3]
	move.b	d2,d0                           	| [$1cb9: ld   a,c]
	cmp.b	#0xAA,d0                         	| [$1cba: cp   $AA]
	beq.b	0f                               	| [...]
	rts                                    	| [$1cbc: ret  nz] [...]
0:
	clr.b	d0                               	| [$1cbd: xor  a]
	move.b	d0,l_8E2A(a6)                   	| [$1cbe: ld   ($8E2A),a]
	move.b	two_player_mode_880E(a6),d0                   	| [$1cc1: ld   a,($880E)]
	                               	| [$1cc4: and  a]
	jeq	l_1d15                             	| [$1cc5: jr   z,$1D15]
	move.b	current_player_is_p2_880D(a6),d0                   	| [$1cc7: ld   a,($880D)]
	                               	| [$1cca: and  a]
	jeq	l_1cf6                             	| [$1ccb: jr   z,$1CF6]
	move.b	l_8948(a6),d0                   	| [$1ccd: ld   a,($8948)]
	                               	| [$1cd0: and  a]
	jeq	l_1d15                             	| [$1cd1: jr   z,$1D15]
	CLEAR_XC_FLAGS                         	| [$1cd3: xor  a]
	clr.b	d0                               	| [$1cd3: xor  a]
	move.b	d0,current_player_is_p2_880D(a6)                   	| [$1cd4: ld   ($880D),a]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$1cd7: ld   (in_game_sub_state_880A),a]
	lea	play_variables_player_2_8980(a6),a0                      	| [$1cda: ld   hl,$8980]
	move.b	#0x3F,d1                        	| [$1cdd: ld   b,$3F]
	jbsr	fill_area_0010                            	| [$1cdf: rst  $10]
	addq.b	#1,d0                           	| [$1ce0: inc  a]
	move.b	d0,cabinet_upright_881F(a6)                   	| [$1ce1: ld   ($881F),a]
	jbsr	l_02e3                            	| [$1ce4: call $02E3]
l_1ce7:
	lea	l_84E0(a6),a0                      	| [$1ce7: ld   hl,$84E0]
	move.b	#0x02,(a0)                      	| [$1cea: ld   (hl),$02]
l_1cec:
	move.w    #0xFFE0,d3                          	| [$1cec: ld   de,$FFE0]
	add.w	d3,a0                            	| [$1cef: add  hl,de]
	move.b	#0x25,(a0)                      	| [$1cf0: ld   (hl),$25]
	add.w	d3,a0                            	| [$1cf2: add  hl,de]
	move.b	#0x20,(a0)                      	| [$1cf3: ld   (hl),$20]
	rts                                    	| [$1cf5: ret]
l_1cf6:
	move.b	l_8988(a6),d0                   	| [$1cf6: ld   a,($8988)]
	                               	| [$1cf9: and  a]
	jeq	l_1d15                             	| [$1cfa: jr   z,$1D15]
	CLEAR_XC_FLAGS                         	| [$1cfc: xor  a]
	clr.b	d0                               	| [$1cfc: xor  a]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$1cfd: ld   (in_game_sub_state_880A),a]
	lea	l_8940(a6),a0                      	| [$1d00: ld   hl,$8940]
	move.b	#0x3F,d1                        	| [$1d03: ld   b,$3F]
	jbsr	fill_area_0010                            	| [$1d05: rst  $10]
	addq.b	#1,d0                           	| [$1d06: inc  a]
	move.b	d0,current_player_is_p2_880D(a6)                   	| [$1d07: ld   ($880D),a]
	jbsr	l_02e3                            	| [$1d0a: call $02E3]
l_1d0d:
	lea	l_8740(a6),a0                      	| [$1d0d: ld   hl,$8740]
	move.b	#0x01,(a0)                      	| [$1d10: ld   (hl),$01]
	jra	l_1cec                             	| [$1d12: jr   $1CEC]
	rts                                    	| [$1d14: ret]
l_1d15:
	CLEAR_XC_FLAGS                         	| [$1d15: xor  a]
	clr.b	d0                               	| [$1d15: xor  a]
	lea	play_variables_player_1_8900(a6),a0 	| [$1d16: ld   hl,play_variables_player_1_8900]
	move.b	#0xBF,d1                        	| [$1d19: ld   b,$BF]
	jbsr	fill_area_0010                            	| [$1d1b: rst  $10]
	move.b	two_player_mode_880E(a6),d0                   	| [$1d1c: ld   a,($880E)]
	                               	| [$1d1f: and  a]
	bne.b	0f                               	| [...]
	jbsr	l_1d0d                            	| [$1d20: call z,$1D0D]
0:
	beq.b	0f                               	| [...]
	jbsr	l_1ce7                            	| [$1d23: call nz,$1CE7]
0:
	move.b	nb_credits_8802(a6),d0          	| [$1d26: ld   a,(nb_credits_8802)]
	                               	| [$1d29: and  a]
	jeq	l_1d3c                             	| [$1d2a: jr   z,$1D3C]
	CLEAR_XC_FLAGS                         	| [$1d2c: xor  a]
	clr.b	d0                               	| [$1d2c: xor  a]
	move.b	d0,l_8806(a6)                   	| [$1d2d: ld   ($8806),a]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$1d30: ld   (in_game_sub_state_880A),a]
	addq.b	#1,d0                           	| [$1d33: inc  a]
	move.b	d0,cabinet_upright_881F(a6)                   	| [$1d34: ld   ($881F),a]
	addq.b	#1,d0                           	| [$1d37: inc  a]
	move.b	d0,game_state_8805(a6)          	| [$1d38: ld   (game_state_8805),a]
	rts                                    	| [$1d3b: ret]
l_1d3c:
	CLEAR_XC_FLAGS                         	| [$1d3c: xor  a]
	clr.b	d0                               	| [$1d3c: xor  a]
	move.b	d0,l_8806(a6)                   	| [$1d3d: ld   ($8806),a]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$1d40: ld   (in_game_sub_state_880A),a]
	move.b	d0,current_player_is_p2_880D(a6)                   	| [$1d43: ld   ($880D),a]
	move.b	d0,two_player_mode_880E(a6)                   	| [$1d46: ld   ($880E),a]
	move.b	d0,title_sub_state_8E51(a6)     	| [$1d49: ld   (title_sub_state_8E51),a]
	addq.b	#1,d0                           	| [$1d4c: inc  a]
	move.b	d0,game_state_8805(a6)          	| [$1d4d: ld   (game_state_8805),a]
	move.b	d0,cabinet_upright_881F(a6)                   	| [$1d50: ld   ($881F),a]
	move.b	d0,l_8F3F(a6)                   	| [$1d53: ld   ($8F3F),a]
	jbsr	l_02b9                            	| [$1d56: call $02B9]
	jbsr	l_0ecf                            	| [$1d59: call $0ECF]
	LOAD_ROM	0x1E4C,a1                          	| [$1d5c: ld   de,$1E4C]
	lea	l_89F0(a6),a0                      	| [$1d5f: ld   hl,$89F0]
l_1d62:
	move.b	(a1),d0                         	| [$1d62: ld   a,(de)]
	cmp.b	#0x7F,d0                         	| [$1d63: cp   $7F]
	bne.b	0f                               	| [...]
	rts                                    	| [$1d65: ret  z] [...]
0:
	lsr.b	#1,d0                            	| [$1d66: srl  a]
	move.b	d0,(a0)                         	| [$1d68: ld   (hl),a]
	addq.w	#1,a1                           	| [$1d69: inc  de]
	addq.w	#1,a0                           	| [$1d6a: inc  hl]
	jra	l_1d62                             	| [$1d6b: jr   $1D62]
	rts                                    	| [$1d6d: ret]
l_1d6e:
	lea	ram_or_rom_pointer_8f4a(a6),a0                      	| [$1d6e: ld   hl,$8F4A]
	move.b	(a0),d0                         	| [$1d71: ld   a,(hl)]
	subq.b	#1,(a0)                         	| [$1d72: dec  (hl)]
	cmp.b	#0x40,d0                         	| [$1d73: cp   $40]
	jne	l_1d82                             	| [$1d75: jr   nz,$1D82]
	*jbsr	rom_check_79e9                            	| [$1d77: call $79E9]
	move.w	#0x0626,d3                          	| [$1d7a: ld   de,$0626]
	jbsr	update_88A0_0038                            	| [$1d7d: rst  $38]
	jbsr	l_0f44                            	| [$1d7e: call $0F44]
	rts                                    	| [$1d81: ret]
l_1d82:
	tst.b	d0                               	| [$1d82: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$1d83: ret  nz] [...]
0:
	move.b	d0,in_game_sub_state_880A(a6)   	| [$1d84: ld   (in_game_sub_state_880A),a]
	lea	is_bonus_stage_8F50(a6),a0                        	| [$1d87: ld   l,$50]
	move.b	#0x02,(a0)                      	| [$1d89: ld   (hl),$02]
	lea	l_8D07(a6),a0                      	| [$1d8b: ld   hl,$8D07]
	move.b	#0x40,(a0)                      	| [$1d8e: ld   (hl),$40]
	move.b	round_number_8907(a6),d0                   	| [$1d90: ld   a,($8907)]
	btst.b	#1,d0                           	| [$1d93: bit  1,a]
	beq.b	0f                               	| [...]
	rts                                    	| [$1d95: ret  nz] [...]
0:
	move.b	#0x01,d0                        	| [$1d96: ld   a,$01]
	move.b	d0,l_8F61(a6)                   	| [$1d98: ld   ($8F61),a]
	rts                                    	| [$1d9b: ret]
l_1d9c:
	move.b	round_number_8907(a6),d0                   	| [$1d9c: ld   a,($8907)]
	btst.b	#1,d0                           	| [$1d9f: bit  1,a]
	jne	l_1da7                             	| [$1da1: jr   nz,$1DA7]
	jbsr	l_0fd5                            	| [$1da3: call $0FD5]
	rts                                    	| [$1da6: ret]
l_1da7:
	jbsr	l_6da6                            	| [$1da7: call $6DA6]
										| [$1daa: ld   hl,$584C]
											| [$1dad: ld   a,l]
											| [$1dae: sub  $24]
											| [$1db0: ld   l,a]
											| [$1db1: inc  h] * 2
										| [$1db3: ld   bc,$2020]
										| [$1db6: xor  a]
											| [$1db6: xor  a]
									
											| [$1db7: bit  0,(hl)]
										| [$1db9: jr   z,$1DBC]
											| [$1dbb: inc  a]
									
											| [$1dbc: bit  3,(hl)]
										| [$1dbe: jr   nz,$1DC1]
											| [$1dc0: inc  a]
									
											| [...]
										| [$1dc1: djnz $1DB7]
											| [$1dc3: cp   c]
											| [...]
										| [$1dc4: ret  z] [...]
									
											| [$1dc5: ld   a,$01]
											| [$1dc7: ld   (checksum_failed_89e7),a]
	rts                                    	| [$1dca: ret]
	

l_1dd3:
	lea	round_number_8907(a6),a0                      	| [$1dd7: ld   hl,$8907]
	tst.b	l_8904(a6)                   	| [$1dd3: ld   a,($8904)]
	                               	| [$1dd6: and  a]
	jne	l_1deb                             	| [$1dda: jr   nz,$1DEB]
	tst.b	l_8806(a6)                   	| [$1ddc: ld   a,($8806)]
	                               	       | [$1ddf: and  a]
	jeq	l_1deb                             	| [$1de0: jr   z,$1DEB]
	move.b	(a0),d0                         	| [$1de2: ld   a,(hl)]
	btst.b	#0,d0                           	| [$1de3: bit  0,a]
	jne	l_1e11                             	| [$1de5: jr   nz,$1E11]
	move.b	(a0),d0                         	| [$1de7: ld   a,(hl)]
	                               	| [$1de8: and  a]
	jeq	l_1e11                             	| [$1de9: jr   z,$1E11]
l_1deb:
	move.b	(a0),d0                         	| [$1deb: ld   a,(hl)]
	LOAD_ROM	0x0839,a4                          	| [$1dee: ld   bc,$0839]
	and.b	#0x01,d0                         	| [$1dec: and  $01]
	jne	l_1df6                             	| [$1df1: jr   nz,$1DF6]
	LOAD_ROM	0x0879,a4                          	| [$1df3: ld   bc,$0879]
l_1df6:
	jbsr	l_075d                            	| [$1df6: call $075D]
	move.b	#0x0F,d0                        	| [$1df9: ld   a,$0F]
	lea	l_8045(a6),a0                      	| [$1dfb: ld   hl,$8045]
	move.w	#0x0020,d3                      	| [$1dfe: ld   de,$0020] 32
	move.b	#0x04,d1                        	| [$1e01: ld   b,$04]
l_1e03:
	jbsr	osd_w_colorram                         	| [$1e03: ld   (hl),a]
	add.w	d3,a0                            	| [$1e04: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_1e03                             	| [$1e05: djnz $1E03]
	lea	l_8046(a6),a0                      	| [$1e07: ld   hl,$8046]
	move.b	#0x04,d1                        	| [$1e0a: ld   b,$04]
l_1e0c:
	jbsr	osd_w_colorram                         	| [$1e0c: ld   (hl),a]
	add.w	d3,a0                            	| [$1e0d: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_1e0c                             	| [$1e0e: djnz $1E0C]
	rts                                    	| [$1e10: ret]
l_1e11:
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$1e11: ld   a,($8F50)]
	                               	| [$1e14: and  a]
	jne	l_1deb                             	| [$1e15: jr   nz,$1DEB]
	LOAD_ROM	0x0859,a4                          	| [$1e17: ld   bc,$0859]
	jbsr	l_075d                            	| [$1e1a: call $075D]
	lea	l_811C(a6),a0                      	| [$1e1d: ld   hl,$811C]
	move.w	#0x0020,d3                      	| [$1e20: ld   de,$0020] 32
	move.b	#0x10,d1                        	| [$1e23: ld   b,$10]
	move.b	#0x09,d0                        	| [$1e25: ld   a,$09]
l_1e27:
	jbsr	osd_w_colorram                         	| [$1e27: ld   (hl),a]
	add.w	d3,a0                            	| [$1e28: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_1e27                             	| [$1e29: djnz $1E27]
	rts                                    	| [$1e2b: ret]

l_1e55:
	                     	| [$1e55: ld   hl,rom_checksum_failed_89e5]
	    	| [$1e58: ld   b,(hl)]
	* remove rom_check_failed_89FB flag               	| [$1e59: ld   a,l]
	                      	| [$1e5a: add  a,$16]
	                     	| [$1e5c: ld   l,a]
	                           	| [$1e5d: ld   a,b]
	                           	| [$1e5e: or   (hl)]
	                               	| [$1e5f: and  a]
	lea	player_structure_8A80(a6),a2      	| [$1e60: ld   ix,player_structure_8A80]
	* failed test: cannot move!                             	| [$1e64: jr   nz,$1EA2]
	move.b	l_8806(a6),d0                   	| [$1e66: ld   a,($8806)]
	                               	| [$1e69: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1e6a: ret  z] [...]
0:
	lea	l_8C90(a6),a3                      	| [$1e6b: ld   iy,$8C90]
	move.b	(0x02,a2),d0                    	| [$1e6f: ld   a,(ix+$02)]
	                               	| [$1e72: and  a]
	jne	l_1ea2                             	| [$1e73: jr   nz,$1EA2]
	move.b	l_8F24(a6),d0                   	| [$1e75: ld   a,($8F24)]
	lea	l_8F57(a6),a0                      	| [$1e78: ld   hl,$8F57]
	or.b	(a0),d0                           	| [$1e7b: or   (hl)]
	jne	l_1ea2                             	| [$1e7c: jr   nz,$1EA2]
	                   	| [$1e7e: ld   a,($881F)]
	                               	| [$1e81: and  a]
	jbsr	osd_read_inputs_1              	| [$1e82: ld   a,(in1_a0a0)]
							
							
								| [$1e85: jr   nz,$1E8A]
									| [$1e87: ld   a,(in2_a0c0)]
l_1e8a:
	CLEAR_XC_FLAGS
	not.b	d0                               	| [$1e8a: cpl]
	move.b	d0,(0x07,a2)                    	| [$1e8b: ld   (ix+$07),a]
	roxl.b	#3,d0                           	| [$1e8e: rla] * 3
	lea	l_8F03(a6),a0                      	| [$1e91: ld   hl,$8F03]
	roxl.b	#1,d0                           	| [$1e94: rla]
	move.b	(a0),d7
	roxl.b	#1,d7                         	| [$1e95: rl   (hl)]
	move.b	d7,d0                         	| [$1e97: ld   a,(hl)]
	move.b	d7,(a0)
	and.b	#0x07,d0                         	| [$1e98: and  $07]
	cmp.b	#0x01,d0                         	| [$1e9a: cp   $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$1e9c: ret  z] [...]
0:
	bclr.b	#4,(0x07,a2)                    	| [$1e9d: res  4,(ix+$07)]
	rts                                    	| [$1ea1: ret]
l_1ea2:
	clr.b	(0x07,a2)                        	| [$1ea2: ld   (ix+$07),$00]
	rts                                    	| [$1ea6: ret]

l_1ead:
														| [$1ead: ld   a,($881E)]
												| [$1eb0: and  a]
											| [$1eb1: jr   nz,$1F11]
	lea	round_text_address_855f(a6),a0                      	| [$1eb3: ld   hl,$855F]
	LOAD_ROM	0x1EA7,a4                          	| [$1eb6: ld   bc,$1EA7]
	move.w    #-0x20,d3                          	| [$1eb9: ld   de,$FFE0]
l_1ebc:
	move.b	(a4)+,d0                         	| [$1ebc: ld   a,(bc)]
	jbsr	osd_w_videoram                         	| [$1ebd: ld   (hl),a]
	                           	| [$1ebe: inc  bc]
	add.w	d3,a0                            	| [$1ebf: add  hl,de]
	cmp.b	#0x10,d0                         	| [$1ec0: cp   $10]
	jne	l_1ebc                             	| [$1ec2: jr   nz,$1EBC]
	move.b	round_number_8907(a6),d0                   	| [$1ec4: ld   a,($8907)]
	
	                           	| [$1ec7: inc  a]
	move.b	d0,d1                           	| [$1ec8: ld   b,a]
	clr.b	d0                               	| [$1ec9: xor  a]
	moveq	#1,d7
l_1eca:
	abcd	d7,d0                        	| [$1eca: add  a,$01]+daa
	dbf	d1,l_1eca                             	| [$1ecd: djnz $1ECA]
	move.w	d0,-(sp)                        	| [$1ecf: push af]
	move.w	d0,-(sp)                        	| [$1ed0: push af]
	move.w	d0,-(sp)                        	| [$1ed1: push af]
	lsr.b	#4,d0                            	| [$1ed2: srl  a] * 4
	lea	round_tenth_screen_address_849f(a6),a0                      	| [$1eda: ld   hl,$849F]
	tst.b	d0                               	| [$1edd: and  a]
	jne	l_1ee2                             	| [$1ede: jr   nz,$1EE2]
	move.b	#0x10,d0                        	| [$1ee0: ld   a,$10] blank
l_1ee2:
	jbsr	osd_w_videoram                         	| [$1ee2: ld   (hl),a]
	move.w	(sp)+,d0                        	| [$1ee3: pop  af]
	and.b	#0x0F,d0                         	| [$1ee4: and  $0F]
	lea	round_number_screen_address_847f(a6),a0                      	| [$1ee6: ld   hl,$847F]
	jbsr	osd_w_videoram                         	| [$1ee9: ld   (hl),a]
	move.w	(sp)+,d0                        	| [$1eea: pop  af]
	lsr.b	#4,d0                            	| [$1eeb: srl  a] * 4
	and.b	#0x01,d0                         	| [$1ef3: and  $01]
	LOAD_ROM	0x200D,a0                          	| [$1ef5: ld   hl,$200D]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$1ef8: call $0C45]
	lea	l_8462(a6),a0                      	| [$1efb: ld   hl,$8462]
	jbsr	l_3307                            	| [$1efe: call $3307]
	lea	l_8722(a6),a0                      	| [$1f01: ld   hl,$8722]
	jbsr	update_flag_1F8C                  	| [$1f04: call update_flag_1F8C]
	move.w	(sp)+,d0                        	| [$1f07: pop  af]
	move.b	d0,d1                           	| [$1f08: ld   b,a]
	and.b	#0x0F,d0                         	| [$1f09: and  $0F]
	move.b	d0,l_8483(a6)                   	| [$1f0b: ld   ($8483),a]
	jbsr	l_1ffb                            	| [$1f0e: call $1FFB]
l_1f11:
	jbsr	l_1f18                            	| [$1f11: call $1F18]
	jbsr	l_34c9                            	| [$1f14: call $34C9]
	rts                                    	| [$1f17: ret]
l_1f18:
													| [$1f18: ld   hl,$checksum_failed_89e7]
									| [$1f1b: ld   b,$07]
								
									| [$1f1d: ld   a,(hl)]
									| [$1f1e: inc  hl]
										| [$1f1f: or   (hl)]
										| [...]
									| [$1f20: ret  nz] [...]
								
									| [...]
									| [$1f21: djnz $1F1D]
	clr.b	d2                               	| [$1f23: ld   c,$00]
	move.b	nb_wolves_8901(a6),d0                        	| [$1f25: ld   l,$01]
	move.b	(a0),d0                         	| [$1f27: ld   a,(hl)]
l_1f28:
	sub.b	#0x0A,d0                         	| [$1f28: sub  $0A]
	jcs	l_1f4e                             	| [$1f2a: jr   c,$1F4E]
	addq.b	#1,d2                           	| [$1f2c: inc  c]
	jra	l_1f28                             	| [$1f2d: jr   $1F28]
l_1f2f:
	move.b	l_8D56(a6),d0                   	| [$1f2f: ld   a,($8D56)]
	                               	| [$1f32: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$1f33: ret  nz] [...]
0:
	move.b	d0,d2                           	| [$1f34: ld   c,a]
	move.b	nb_wolves_8901(a6),d0           	| [$1f35: ld   a,(nb_wolves_8901)]
	cmp.b	#0x0A,d0                         	| [$1f38: cp   $0A]
	jcs	l_1f49                             	| [$1f3a: jr   c,$1F49]
	lea	table_1F87,a0                      	| [$1f3c: ld   hl,table_1F87]
	move.b	#0x05,d1                        	| [$1f3f: ld   b,$05]
l_1f41:
	cmp.b	(a0),d0                          	| [$1f41: cp   (hl)]
	jeq	l_1f4e                             	| [$1f42: jr   z,$1F4E]
	addq.b	#1,d2                           	| [$1f44: inc  c]
	addq.w	#1,a0                           	| [$1f45: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_1f41                             	| [$1f46: djnz $1F41]
	rts                                    	| [$1f48: ret]
l_1f49:
	move.b	#0x01,d0                        	| [$1f49: ld   a,$01]
	move.b	d0,l_8D56(a6)                   	| [$1f4b: ld   ($8D56),a]
l_1f4e:
	move.b	d2,d0                           	| [$1f4e: ld   a,c]
	                               	| [$1f4f: and  a]
	jne	l_1f7a                             	| [$1f50: jr   nz,$1F7A]
	move.b	round_number_8907(a6),d0                   	| [$1f52: ld   a,($8907)]
	addq.b	#0x01,d0                        	| [$1f55: add  a,$01]
	move.b	d0,d1                           	| [$1f57: ld   b,a]
	subq	#1,d1		| for dbf
	CLEAR_XC_FLAGS                         	| [$1f58: xor  a]
	clr.b	d0                               	| [$1f58: xor  a]
	moveq	#1,d7
l_1f59:
	abcd	d7,d0                        	| [$1f59: add  a,$01]+daa
	dbf	d1,l_1f59                             	| [$1f5c: djnz $1F59]
	LOAD_ROM	0x1FE6,a1                          	| [$1f5e: ld   de,$1FE6]
	btst.b	#4,d0                           	| [$1f61: bit  4,a]
	jne	l_1f68                             	| [$1f63: jr   nz,$1F68]
	LOAD_ROM	0x1FDA,a1                          	| [$1f65: ld   de,$1FDA]
l_1f68:
	lea	l_8722(a6),a0                      	| [$1f68: ld   hl,$8722]
	jbsr	update_flag_1F8C                  	| [$1f6b: call update_flag_1F8C]
	move.b	#0x10,d0                        	| [$1f6e: ld   a,$10]
	move.b	#0x03,d1                        	| [$1f70: ld   b,$03]
	jbsr	fill_area_0010                            	| [$1f72: rst  $10]
	move.b	nb_wolves_8901(a6),d0           	| [$1f73: ld   a,(nb_wolves_8901)]
	move.b	d0,l_8743(a6)                   	| [$1f76: ld   ($8743),a]
	clr.b	d0                               	| [$1f79: xor  a]
l_1f7a:
	LOAD_ROM	0x1FA3,a0                          	| [$1f7a: ld   hl,$1FA3]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$1f7d: call $0C45]
	lea	l_8322(a6),a0                      	| [$1f80: ld   hl,$8322]
	jbsr	update_flag_1F8C                  	| [$1f83: call update_flag_1F8C]
	rts                                    	| [$1f86: ret]

table_1F87:
  .byte	0x09,0x14,0x1E,0x28,0x30,0x3E,0x04,0xED,0x47
	.align	2
* < HL: screen address
update_flag_1F8C:
	move.b	#0x04,d0                        	| [$1f8c: ld   a,$04]
	move	d0,i_reg                              	| [$1f8e: ld   i,a]
l_1f90:
	move.b	#0x03,d1                        	| [$1f90: ld   b,$03]
l_1f92:
	move.b	(a1),d0                         	| [$1f92: ld   a,(de)]
	jbsr	osd_w_colorram                         	| [$1f93: ld   (hl),a] write video
	addq.w	#1,a0                           	| [$1f94: inc  l]
	addq.w	#1,a1                           	| [$1f95: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_1f92                             	| [$1f96: djnz $1F92]
	move.w	#0x1D,d1                        	| [$1f98: ld   c,$1D]
	add.w	d1,a0                            	| [$1f9a: add  hl,bc]
	move.b	i_reg,d0                           	| [$1f9b: ld   a,i]
	subq.b	#1,d0                           	| [$1f9d: dec  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1f9e: ret  z] [...]
0:
	move	d0,i_reg                              	| [$1f9f: ld   i,a]
	jra	l_1f90                             	| [$1fa1: jr   $1F90]


l_1ffb:
	move.b	d1,d0                           	| [$1ffb: ld   a,b]
	LOAD_ROM	0x203B,a1                          	| [$1ffe: ld   de,$203B]
	btst.b	#5,d0                           	| [$1ffc: bit  5,a]
	jeq	l_2006                             	| [$2001: jr   z,$2006]
	LOAD_ROM	0x2050,a1                          	| [$2003: ld   de,$2050]
l_2006:
	lea	l_8062(a6),a0                      	| [$2006: ld   hl,$8062]
	jbsr	l_3307                            	| [$2009: call $3307]
	rts                                    	| [$200c: ret]

display_nb_lives_2065:		| exact code copy!
	jra		display_nb_lives_03c2
								| [$2065: ld   hl,$863F]
									| [$2068: ld   de,$FFE0]
								| [$206b: ld   a,(nb_lives_8908)]
						| [$206e: and  a]
								| [...]
								| [$206f: ret  z] [...]
					
								| [$2070: dec  a]
								| [$2071: ld   c,a]
								| [$2072: jr   z,$2081]
								| [$2074: cp   $05]
								| [$2076: jr   c,$207A]
								| [$2078: ld   a,$05]
					
								| [$207a: ld   c,a]
								| [$207b: ld   b,a]
					
								| [$207c: ld   (hl),$B0]
								| [$207e: add  hl,de]
								| [...]
								| [$207f: djnz $207C]
					
								| [$2081: ld   a,$05]
								| [$2083: sub  c]
								| [...]
								| [$2084: ret  z] [...]
					
								| [$2085: ld   b,a]
					
								| [$2086: ld   (hl),$10]
								| [$2088: add  hl,de]
								| [...]
								| [$2089: djnz $2086]
								| [$208b: ret]

* compare 2 parts of ROM. If not equal
* then set a flag, then game can't start

       	| [$208c: ld   hl,irq_066D]
        	| [$208f: ld   b,$10]
       	| [$2091: ld   de,$20AA]

        	| [$2094: ld   a,(de)]
         	| [$2095: cp   (hl)]
       	| [$2096: jr   nz,rom_corrupt_20A4]
        	| [$2098: inc  de]
       	| [$2099: nop]
        	| [$209a: ld   a,$08]
         	| [$209c: add  a,l]
       	| [$209d: jr   nc,$20A0]
        	| [$209f: inc  h]

        	| [$20a0: ld   l,a]
        	| [...]
       	| [$20a1: djnz $2094]
	                                    	| [$20a3: ret]


								| [$20a4: ld   a,$01]
								| [$20a6: ld   (checksum_failed_8EF0),a]
							| [$20a9: ret]

								| [$20aa: push af]
								| [$20ab: push de]
								| [$20ab: push de]
								| [$20ac: add  a,b]
								| [$20ad: sub  h]
								| [$20ae: adc  a,b]
								| [$20af: jr   $20B4]


l_20d4:
	lea	l_8D32(a6),a0                      	| [$20d4: ld   hl,$8D32]
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$20d7: ld   a,($8F50)]
	                               	| [$20da: and  a]
	jeq	l_20e8                             	| [$20db: jr   z,$20E8]
	clr.b	(a0)                             	| [$20dd: ld   (hl),$00]
											| [$20df: ld   b,l]
	move.b	l_8FF8(a6),d0                        	| [$20e0: ld   l,$F8]
	
	move.b	(a0)+,d0                         	| [$20e2: ld   a,(hl)]
	                           	| [$20e3: inc  hl]
	and.b	(a0),d0                          	| [$20e4: and  (hl)]
	jne	l_20ea                             	| [$20e5: jr   nz,$20EA]
	subq	#1,a0                           	| [$20e7: ld   l,b]
l_20e8:
	move.b	(a0),d0                         	| [$20e8: ld   a,(hl)]
	                               	| [$20e9: and  a]
l_20ea:
	jne	l_241e                             	| [$20ea: jp   nz,$241E]
	lea	player_structure_8A80(a6),a2      	| [$20ed: ld   ix,player_structure_8A80]
	jbsr	l_2329                            	| [$20f1: call $2329]
	jbsr	l_2101                            	| [$20f4: call $2101]
	jbsr	animate_pigs_in_house_2563                            	| [$20f7: call $2563]
	jbsr	l_25a6                            	| [$20fa: call $25A6]
	jbsr	l_308b                            	| [$20fd: call $308B]
	rts                                    	| [$2100: ret]
l_2101:
	jbsr	l_2778                            	| [$2101: call $2778]
	jbsr	l_210b                            	| [$2104: call $210B]
	jbsr	l_2157                            	| [$2107: call $2157]
	rts                                    	| [$210a: ret]

l_210b:
	lea	player_structure_8A80(a6),a2      	| [$210b: ld   ix,player_structure_8A80]
	btst.b	#4,(0x07,a2)                    	| [$210f: bit  4,(ix+$07)]
	bne.b	0f                               	| [...]
	clr.b	(0x07,a2)                        	| [$2113: ld   (ix+$07),$00]
	rts                                    	| [$2117: ret  z] [...]
0:
	clr.b	(0x07,a2)                        	| [$2113: ld   (ix+$07),$00]
	lea	l_8F02(a6),a0                      	| [$2118: ld   hl,$8F02]
	move.b	(a0),d0                         	| [$211b: ld   a,(hl)]
	                               	| [$211c: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$211d: ret  nz] [...]
0:
	addq.b	#1,(a0)                         	| [$211e: inc  (hl)]
	lea	l_8C90(a6),a3                      	| [$211f: ld   iy,$8C90]
	move.b	l_8F30(a6),d0                   	| [$2123: ld   a,($8F30)]
	cmp.b	#0x02,d0                         	| [$2126: cp   $02]
	jcs	l_213f                             	| [$2128: jr   c,$213F]
	move.b	(0x18,a3),d0                    	| [$212a: ld   a,(iy+$18)]
	cmp.b	#0x02,d0                         	| [$212d: cp   $02]
	jne	l_213f                             	| [$212f: jr   nz,$213F]
	move.b	(0x00,a3),d0                    	| [$2131: ld   a,(iy+$00)]
	                               	| [$2134: and  a]
	jne	l_213f                             	| [$2135: jr   nz,$213F]
	clr.b	(0x18,a3)                        	| [$2137: ld   (iy+$18),$00]
	bset.b	#1,(0x00,a3)                    	| [$213b: set  1,(iy+$00)]
l_213f:
	move.w	#0x0018,d3                      	| [$213f: ld   de,$0018] 24
	move.b	#0x02,d1                        	| [$2142: ld   b,$02]
l_2144:
	btst.b	#0,(0x00,a3)                    	| [$2144: bit  0,(iy+$00)]
	jeq	l_2184                             	| [$2148: jr   z,$2184]
	add.w	d3,a3                            	| [$214a: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2144                             	| [$214c: djnz $2144]

	move.l	a2,a1                         	| [$214e: ld   d,ixh]
	LOAD_D3D4_FROM_A1_RAM
	move.b	#0x3C,d4                        	| [$2150: ld   e,$3C]
	LOAD_A1_FROM_D3D4
	move.b	(a1),d0                         	| [$2152: ld   a,(de)]
	                               	| [$2153: and  a]
	jne	l_2157                             	| [$2154: jr   nz,$2157]
	rts                                    	| [$2156: ret]
l_2157:
	lea	l_8C90(a6),a3                      	| [$2157: ld   iy,$8C90]
	move.b	#0x02,d0                        	| [$215b: ld   a,$02]
l_215d:
	move.b	d0,l_8F15(a6)                   	| [$215d: ld   ($8F15),a]
	btst.b	#0,(0x00,a3)                    	| [$2160: bit  0,(iy+$00)]
	beq.b	0f                               	| [...]
	jbsr	l_21cf                            	| [$2164: call nz,$21CF]
0:
	move.w	#0x0018,d3                      	| [$2167: ld   de,$0018] 24
	add.w	d3,a3                            	| [$216a: add  iy,de]
	move.b	l_8F15(a6),d0                   	| [$216c: ld   a,($8F15)]
	subq.b	#0x01,d0                        	| [$216f: sub  $01]
	jne	l_215d                             	| [$2171: jr   nz,$215D]
	move.b	rom_pointer_8f00(a6),d0                   	| [$2173: ld   a,($8F00)]
	LOAD_ROM	0x26C9,a1                          	| [$2176: ld   de,$26C9]
	sub.b	#0x0C,d0                         	| [$2179: sub  $0C]
	sub.b	#0xC9,d0                            	| [$217b: sub  e]
	jne	l_22b1                             	| [$217c: jp   nz,$22B1]
	clr.b	d0                               	| [$217f: xor  a]
	move.b	d0,l_8F02(a6)                   	| [$2180: ld   ($8F02),a]
	rts                                    	| [$2183: ret]
l_2184:
	bset.b	#0,(0x00,a3)                    	| [$2184: set  0,(iy+$00)]
	move.b	(0x04,a2),d0                    	| [$2188: ld   a,(ix+$04)]
	subq.b	#0x03,d0                        	| [$218b: sub  $03]
	move.b	d0,(0x04,a3)                    	| [$218d: ld   (iy+$04),a]
	move.b	(0x06,a2),d0                    	| [$2190: ld   a,(ix+$06)]
	addq.b	#0x04,d0                        	| [$2193: add  a,$04]
	move.b	d0,(0x06,a3)                    	| [$2195: ld   (iy+$06),a]
	btst.b	#1,(0x00,a3)                    	| [$2198: bit  1,(iy+$00)]
	jne	l_21a8                             	| [$219c: jr   nz,$21A8]
	move.b	#0x14,(0x0f,a3)                 	| [$219e: ld   (iy+$0f),$14]
	move.b	#0x40,(0x10,a3)                 	| [$21a2: ld   (iy+$10),$40]
	jra	l_21bc                             	| [$21a6: jr   $21BC]
l_21a8:
	move.b	#0x10,(0x0f,a3)                 	| [$21a8: ld   (iy+$0f),$10]
	move.b	#0x40,(0x10,a3)                 	| [$21ac: ld   (iy+$10),$40]
	move.b	#0x01,d0                        	| [$21b0: ld   a,$01]
	move.b	d0,l_8D77(a6)                   	| [$21b2: ld   ($8D77),a]
	CLEAR_XC_FLAGS                         	| [$21b5: xor  a]
	clr.b	d0                               	| [$21b5: xor  a]
	lea	l_8A98(a6),a0                      	| [$21b6: ld   hl,$8A98]
	move.b	#0x18,d1                        	| [$21b9: ld   b,$18]
	jbsr	fill_area_0010                            	| [$21bb: rst  $10]
l_21bc:
	lea	l_8D19(a6),a0                      	| [$21bc: ld   hl,$8D19]

	move.l	a3,a1                        	| [$21bf: push iy]
	                        	            | [$21c1: pop  de]
	LOAD_D3D4_FROM_A1_RAM
	clr.b	d0                               	| [$21c2: xor  a]
	btst.b	#3,d4                           	| [$21c3: bit  3,e]
	jeq	l_21c8                             	| [$21c5: jr   z,$21C8]
	addq.w	#1,a0                           	| [$21c7: inc  hl]
l_21c8:
	move.b	d0,(a0)                         	| [$21c8: ld   (hl),a]
	addq.w	#2,a0                           	| [$21c9: inc  hl] * 2
	move.b	d0,(a0)                         	| [$21cb: ld   (hl),a]
	jra	l_22b1                             	| [$21cc: jp   $22B1]
l_21cf:
	btst.b	#0,(0x07,a3)                    	| [$21cf: bit  0,(iy+$07)]
	jne	l_2204                             	| [$21d3: jr   nz,$2204]
	move.b	(0x12,a3),d0                    	| [$21d5: ld   a,(iy+$12)]
	                               	| [$21d8: and  a]
	jne	l_21e1                             	| [$21d9: jr   nz,$21E1]
	addq.b	#1,(0x12,a3)                    	| [$21db: inc  (iy+$12)]
	jbsr	l_0ed2                            	| [$21de: call $0ED2]
l_21e1:
	btst.b	#1,(0x00,a3)                    	| [$21e1: bit  1,(iy+$00)]
	jne	l_2226                             	| [$21e5: jr   nz,$2226]
	jbsr	read_iyl_in_d0                         	| [$21e7: ld   a,iyl]
	btst.b	#3,d0                           	| [$21e9: bit  3,a]
	lea	l_8D1B(a6),a0                      	| [$21eb: ld   hl,$8D1B]
	jeq	l_21f1                             	| [$21ee: jr   z,$21F1]
	addq.w	#1,a0                           	| [$21f0: inc  hl]
l_21f1:
	move.b	(a0),d0                         	| [$21f1: ld   a,(hl)]
	                               	| [$21f2: and  a]
	jeq	l_21f9                             	| [$21f3: jr   z,$21F9]
	clr.b	(a0)                             	| [$21f5: ld   (hl),$00]
	jra	l_221e                             	| [$21f7: jr   $221E]
l_21f9:
	move.b	(0x06,a3),d0                    	| [$21f9: ld   a,(iy+$06)]
	subq.b	#0x04,d0                        	| [$21fc: sub  $04] arrow speed
	jcs	l_221e                             	| [$21fe: jr   c,$221E]
	move.b	d0,(0x06,a3)                    	| [$2200: ld   (iy+$06),a]
	rts                                    	| [$2203: ret]
l_2204:
	move.b	(0x01,a3),d0                    	| [$2204: ld   a,(iy+$01)]
	cmp.b	#0x01,d0                         	| [$2207: cp   $01]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2209: ret  c] [...]
0:
	jne	l_2213                             	| [$220a: jr   nz,$2213]
	move.b	#0x1B,(0x0f,a3)                 	| [$220c: ld   (iy+$0f),$1B]
	addq.b	#1,(0x01,a3)                    	| [$2210: inc  (iy+$01)]
l_2213:
	move.b	(0x04,a3),d0                    	| [$2213: ld   a,(iy+$04)]
	addq.b	#0x04,d0                        	| [$2216: add  a,$04] arrow speed
	move.b	d0,(0x04,a3)                    	| [$2218: ld   (iy+$04),a]
	cmp.b	#0xE8,d0                         	| [$221b: cp   $E8]
	bcc.b	0f                               	| [...]
	rts                                    	| [$221d: ret  c] [...]
0:
l_221e:

	move.l	a3,a0                        	| [$221e: push iy]
	                        	| [$2220: pop  hl]
	move.b	#0x18,d1                        	| [$2221: ld   b,$18]
	CLEAR_XC_FLAGS                         	| [$2223: xor  a]
	clr.b	d0                               	| [$2223: xor  a]
	jbsr	fill_area_0010                            	| [$2224: rst  $10]
	rts                                    	| [$2225: ret]
l_2226:
	move.b	l_8F0E(a6),d0                   	| [$2226: ld   a,($8F0E)]
	                               	| [$2229: and  a]
	bne.b	0f                               	| [...]
	jbsr	l_2282                            	| [$222a: call z,$2282]
0:
	LOAD_WORD	value_16bit_8F10(a6),d3             	| [$222d: ld   de,($8F10)]
	jbsr	read_iyl_in_d0                 	| [$2231: ld   a,iyl]
	move.b	(0x05,a3),d6                    	| [$2235: ld   l,(iy+$05)]
	move.b	(0x06,a3),d5                    	| [$2238: ld   h,(iy+$06)]
	LOAD_D5_16_FROM_D5D6
	lea	l_8D19(a6),a4                      	| [$223b: ld   bc,$8D19]
	btst.b	#3,d0                           	| [$2233: bit  3,a]
	jeq	l_2241                             	| [$223e: jr   z,$2241]
	addq.w	#1,a4                           	| [$2240: inc  bc]
l_2241:
	move.b	(a4),d0                         	| [$2241: ld   a,(bc)]
	btst.b	#0,d0                           	| [$2242: bit  0,a]
	jeq	l_2249                             	| [$2244: jr   z,$2249]
	add.w	d3,d5                            	| [$2246: add  hl,de]
	jra	l_224b                             	| [$2247: jr   $224B]
l_2249:
	sub.w	d3,d5                            	| [$2249: sbc  hl,de]
l_224b:
	LOAD_D5D6_FROM_D5_16
	move.b	d6,(0x05,a3)                    	| [$224b: ld   (iy+$05),l]
	move.b	d5,(0x06,a3)                    	| [$224e: ld   (iy+$06),h]
	LOAD_WORD	value_16bit_8f12(a6),d3             	| [$2251: ld   de,($8F12)]
	move.b	(0x03,a3),d6                    	| [$2255: ld   l,(iy+$03)]
	move.b	(0x04,a3),d5                    	| [$2258: ld   h,(iy+$04)]
	LOAD_D5_16_FROM_D5D6
	add.w	d3,d5                            	| [$225b: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,d0                           	| [$225c: ld   a,h]
	cmp.b	#0xE8,d0                         	| [$225d: cp   $E8]
	jcc	l_226c                             	| [$225f: jr   nc,$226C]
	move.b	D6,(0x03,a3)                    	| [$2261: ld   (iy+$03),l]
	move.b	D5,(0x04,a3)                    	| [$2264: ld   (iy+$04),h]
	lea	l_8F0E(a6),a0                      	| [$2267: ld   hl,$8F0E]
	subq.b	#1,(a0)                         	| [$226a: dec  (hl)]
	rts                                    	| [$226b: ret]
l_226c:
	clr.b	d0                               	| [$226c: xor  a]
	move.b	d0,l_8F0E(a6)                   	| [$226d: ld   ($8F0E),a]
	move.b	d0,meat_speed_8F0F(a6)          	| [$2270: ld   (meat_speed_8F0F),a]
	move.b	d0,l_8F30(a6)                   	| [$2273: ld   ($8F30),a]
	move.b	d0,l_8D45(a6)                   	| [$2276: ld   ($8D45),a]
	move.b	d0,l_8D77(a6)                   	| [$2279: ld   ($8D77),a]
	move.b	d0,l_8F3F(a6)                   	| [$227c: ld   ($8F3F),a]
	jra	l_221e                             	| [$227f: jr   $221E]
	rts                                    	| [$2281: ret]
l_2282:
	move.b	meat_speed_8F0F(a6),d0          	| [$2282: ld   a,(meat_speed_8F0F)]
	LOAD_ROM	0x2712,a0                          	| [$2285: ld   hl,$2712]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$2288: rst  $20]
	move.b	d0,l_8F0E(a6)                   	| [$2289: ld   ($8F0E),a]
	move.b	meat_speed_8F0F(a6),d0          	| [$228c: ld   a,(meat_speed_8F0F)]
	LOAD_ROM	0x271C,a0                          	| [$228f: ld   hl,$271C]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$2292: call $0C45]
	STORE_WORD	d3,value_16bit_8F10(a6)            	| [$2295: ld   ($8F10),de]
	
	move.b	meat_speed_8F0F(a6),d0          	| [$2299: ld   a,(meat_speed_8F0F)]
	LOAD_ROM	0x2730,a0                          	| [$229c: ld   hl,$2730]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$229f: call $0C45]
	STORE_WORD	d3,value_16bit_8f12(a6)            	| [$22a2: ld   ($8F12),de]
	
	lea	meat_speed_8F0F(a6),a0             	| [$22a6: ld   hl,meat_speed_8F0F]
	addq.b	#1,(a0)                         	| [$22a9: inc  (hl)]
	move.b	(a0),d0                         	| [$22aa: ld   a,(hl)]
	cmp.b	#0x09,d0                         	| [$22ab: cp   $09]
	beq.b	0f                               	| [...]
	rts                                    	| [$22ad: ret  nz] [...]
0:
	move.b	#0x08,(a0)                      	| [$22ae: ld   (hl),$08]
	rts                                    	| [$22b0: ret]
l_22b1:
	move.b	l_8D32(a6),d0                   	| [$22b1: ld   a,($8D32)]
	                               	| [$22b4: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$22b5: ret  nz] [...]
0:
	lea	player_structure_8A80(a6),a2      	| [$22b6: ld   ix,player_structure_8A80]
	jbsr	l_22e6                            	| [$22ba: call $22E6]
	move.w	#0x0018,d3                      	| [$22bd: ld   de,$0018] 24
	add.w	d3,a2                            	| [$22c0: add  ix,de]
	jbsr	l_22e6                            	| [$22c2: call $22E6]
	add.w	d3,a2                            	| [$22c5: add  ix,de]
	jbsr	l_22e6                            	| [$22c7: call $22E6]
	add.w	d3,a2                            	| [$22ca: add  ix,de]
	jbsr	l_22e6                            	| [$22cc: call $22E6]
	rts                                    	| [$22cf: ret]
l_22d0:
	lea	l_8C90(a6),a3                      	| [$22d0: ld   iy,$8C90]
	move.w	#0x0018,d3                      	| [$22d4: ld   de,$0018] 24
	move.b	#0x02,d1                        	| [$22d7: ld   b,$02]
	CLEAR_XC_FLAGS                         	| [$22d9: xor  a]
	clr.b	d0                               	| [$22d9: xor  a]
l_22da:
	btst.b	#0,(0x00,a3)                    	| [$22da: bit  0,(iy+$00)]
	jeq	l_22e1                             	| [$22de: jr   z,$22E1]
	rol.b	#1,d0                            	| [$22e0: rlca]
l_22e1:
	add.w	d3,a3                            	| [$22e1: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_22da                             	| [$22e3: djnz $22DA]
	rts                                    	| [$22e5: ret]
l_22e6:
	move.b	(0x0e,a2),d0                    	| [$22e6: ld   a,(ix+$0e)]
	                               	| [$22e9: and  a]
	jeq	l_22f0                             	| [$22ea: jr   z,$22F0]
	subq.b	#1,(0x0e,a2)                    	| [$22ec: dec  (ix+$0e)]
	rts                                    	| [$22ef: ret]
l_22f0:
	LOAD_ROM_POINTER	rom_pointer_8f00(a6),a0             	| [$22f0: ld   hl,($8F00)]
	move.b	(a0),d0                         	| [$22f3: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$22f4: cp   $FF]
	jeq	l_230a                             	| [$22f6: jr   z,$230A]
	move.b	d0,(0x10,a2)                    	| [$22f8: ld   (ix+$10),a]
	addq.w	#1,a0                           	| [$22fb: inc  hl]
	move.b	(a0)+,d0                         	| [$22fc: ld   a,(hl)]
	move.b	d0,(0x0f,a2)                    	| [$22fd: ld   (ix+$0f),a]
	                           	| [$2300: inc  hl]
	move.b	(a0)+,d0                         	| [$2301: ld   a,(hl)]
	move.b	d0,(0x0e,a2)                    	| [$2302: ld   (ix+$0e),a]
	                           	| [$2305: inc  hl]
	STORE_ROM_POINTER	a0,rom_pointer_8f00(a6)            	| [$2306: ld   ($8F00),hl]
	
	rts                                    	| [$2309: ret]

l_230a:
	jbsr	l_22d0                            	| [$230a: call $22D0]
	cmp.b	#0x03,d0                         	| [$230d: cp   $03]
	jne	move_player_if_needed_2319                             	| [$230f: jr   nz,$2319]
	LOAD_ROM	0x26E7,a0                          	| [$2311: ld   hl,$26E7]
	STORE_ROM_POINTER	a0,rom_pointer_8f00(a6)            	| [$2314: ld   ($8F00),hl]
	
	jra	l_22f0                             	| [$2317: jr   $22F0]

move_player_if_needed_2319:
	addq.w	#1,a0                           	| [$2319: inc  hl]
	move.b	(a0)+,d0                         	| [$231a: ld   a,(hl)]
	* kind of STORE_ROM_POINTER
	move.b	d0,rom_pointer_8f00(a6)                   	| [$231b: ld   ($8F00),a]
												| [$231e: inc  hl]
	move.b	(a0),d0                         	| [$231f: ld   a,(hl)]
	move.b	d0,rom_pointer_8f00+1(a6)                   	| [$2320: ld   ($8F01),a]
	jra	l_22f0                             	| [$2323: jr   $22F0]

l_2329:
	btst.b	#2,(0x07,a2)                    	| [$2329: bit  2,(ix+$07)]
	jeq	l_236a                             	| [$232d: jr   z,$236A]
	* try to move up
	subq.b	#1,(0x04,a2)                    	| [$232f: dec  (ix+$04)]
	move.b	(0x04,a2),d0                    	| [$2332: ld   a,(ix+$04)]
	cmp.b	#0x41,d0                         	| [$2335: cp   $41]
l_2337:
	jcc	l_233d                             	| [$2337: jr   nc,$233D]
	move.b	#0x41,(0x04,a2)                 	| [$2339: ld   (ix+$04),$41]
l_233d:
	jbsr	l_23d7                            	| [$233d: call $23D7]
	LOAD_RAM_POINTER	video_ram_pointer_88BE(a6),a0            	| [$2340: ld   hl,($88BE)]
	LOAD_D5D6_FROM_A0_RAM
	move.b	D6,d0                           	| [$2343: ld   a,l]
	cmp.b	#0xE6,d0                         	| [$2344: cp   $E6]
	jne	l_2359                             	| [$2346: jr   nz,$2359]
	move.b	(a0),d0                         	| [$2348: ld   a,(hl)]
	cmp.b	#0x35,d0                         	| [$2349: cp   $35]
	jcc	l_2359                             	| [$234b: jr   nc,$2359]
	move.b	#0x89,d5                        	| [$234d: ld   h,$89]
	move.b	#0x07,d1                        	| [$234f: ld   b,$07]
	LOAD_A0_FROM_D5D6
l_2351:
	addq.w	#1,a0                           	| [$2351: inc  hl]
	move.b	(a0),d0                         	| [$2352: ld   a,(hl)]
	or.b	d0,d0                             	| [$2353: or   a]
	jne	l_2359                             	| [$2354: jr   nz,$2359]
	subq.b	#1,d1                           	| [...]
	jne	l_2351                             	| [$2356: djnz $2351]
	rts                                    	| [$2358: ret]
l_2359:
	jbsr	l_23ec                            	| [$2359: call $23EC]
	lea	l_88BD(a6),a0                      	| [$235c: ld   hl,$88BD]
	addq.b	#1,(a0)                         	| [$235f: inc  (hl)]
	move.b	(a0),d0                         	| [$2360: ld   a,(hl)]
	and.b	#0x07,d0                         	| [$2361: and  $07]
	move.b	d0,(a0)                         	| [$2363: ld   (hl),a]
	                               	| [$2364: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$2365: ret  nz] [...]
0:
	subq.w	#1,a0                           	| [$2366: dec  hl]
	addq.b	#1,(a0)                         	| [$2367: inc  (hl)]
	jra	l_23ad                             	| [$2368: jr   $23AD]
l_236a:
	btst.b	#3,(0x07,a2)                    	| [$236a: bit  3,(ix+$07)]
	bne.b	0f                               	| [...]
	rts                                    	| [$236e: ret  z] [...]
0:
	addq.b	#1,(0x04,a2)                    	| [$236f: inc  (ix+$04)]
	move.b	(0x04,a2),d0                    	| [$2372: ld   a,(ix+$04)]
	cmp.b	#0xC0,d0                         	| [$2375: cp   $C0]
	jcs	l_237d                             	| [$2377: jr   c,$237D]
	move.b	#0xC0,(0x04,a2)                 	| [$2379: ld   (ix+$04),$C0]
l_237d:
	jbsr	l_23d7                            	| [$237d: call $23D7]
	move.b	video_ram_pointer_88BE(a6),d0                   	| [$2380: ld   a,($88BE)]
	cmp.b	#0xF6,d0                         	| [$2383: cp   $F6]
	jne	l_239e                             	| [$2385: jr   nz,$239E]
	lea	checksum_failed_8A38(a6),a0                      	| [$2387: ld   hl,$8A38]
	move.b	#0x03,d1                        	| [$238a: ld   b,$03]
l_238c:
	move.b	(a0),d0                         	| [$238c: ld   a,(hl)]
	                               	| [$238d: and  a]
	jne	l_239e                             	| [$238e: jr   nz,$239E]
	addq.w	#1,a0                           	| [$2390: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_238c                             	| [$2391: djnz $238C]
	lea	l_8083(a6),a0                      	| [$2393: ld   hl,$8083]
	move.b	l_8343(a6),d0                   	| [$2396: ld   a,($8343)]
	add.b	(a0),d0                          	| [$2399: add  a,(hl)]
	and.b	#0x0F,d0                         	| [$239a: and  $0F]
	                               	| [$239c: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$239d: ret  z] [...]
0:
l_239e:
	jbsr	l_2405                            	| [$239e: call $2405]
l_23a1:
	lea	l_88BD(a6),a0                      	| [$23a1: ld   hl,$88BD]
	subq.b	#1,(a0)                         	| [$23a4: dec  (hl)]
	move.b	(a0),d0                         	| [$23a5: ld   a,(hl)]
	and.b	#0x07,d0                         	| [$23a6: and  $07]
	move.b	d0,(a0)                         	| [$23a8: ld   (hl),a]
	tst.b	d0                               	| [$23a9: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$23aa: ret  nz] [...]
0:
	subq.w	#1,a0                           	| [$23ab: dec  hl]
	subq.b	#1,(a0)                         	| [$23ac: dec  (hl)]
l_23ad:
	move.b	(a0),d0                         	| [$23ad: ld   a,(hl)]
	and.b	#0x03,d0                         	| [$23ae: and  $03]
	move.b	d0,(a0)                         	| [$23b0: ld   (hl),a]
	LOAD_ROM	0x26F6,a0                          	| [$23b1: ld   hl,$26F6]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$23b4: call $0C45]
	move.l	a1,-(sp)                        	| [$23b7: push de]
	lea	l_8425(a6),a0                      	| [$23b8: ld   hl,$8425]
	jbsr	write_4x4_tile_block_3325         	| [$23bb: call write_4x4_tile_block_3325]
	move.l	(sp)+,a1                        	| [$23be: pop  de]
	lea	l_8465(a6),a0                        	| [$23bf: ld   l,$65]
	jbsr	write_4x4_tile_block_3325         	| [$23c1: call write_4x4_tile_block_3325]
	lea	l_84A5(a6),a0                        	| [$23c4: ld   l,$A5]
	LOAD_ROM	0x270A,a1                          	| [$23c6: ld   de,$270A]
	move.b	l_88BC(a6),d0                   	| [$23c9: ld   a,($88BC)]
	and.b	#0x01,d0                         	| [$23cc: and  $01]
	jne	l_23d3                             	| [$23ce: jr   nz,$23D3]
	LOAD_ROM	0x270E,a1                          	| [$23d0: ld   de,$270E]
l_23d3:
	jbsr	write_4x4_tile_block_3325         	| [$23d3: call write_4x4_tile_block_3325]
	rts                                    	| [$23d6: ret]
l_23d7:
	lea	player_structure_8A80(a6),a2      	| [$23d7: ld   ix,player_structure_8A80]
	move.b	(0x04,a2),d0                    	| [$23db: ld   a,(ix+$04)]
	move.b	d0,(0x4c,a2)                    	| [$23de: ld   (ix+$4c),a]
	sub.b	#0x10,d0                         	| [$23e1: sub  $10]
	move.b	d0,(0x34,a2)                    	| [$23e3: ld   (ix+$34),a]
	add.b	#0x0A,d0                         	| [$23e6: add  a,$0A]
	move.b	d0,(0x1c,a2)                    	| [$23e8: ld   (ix+$1c),a]
	rts                                    	| [$23eb: ret]
l_23ec:
	lea	l_8F37(a6),a0                      	| [$23ec: ld   hl,$8F37]
	addq.b	#1,(a0)                         	| [$23ef: inc  (hl)]
	btst.b	#0,(a0)                         	| [$23f0: bit  0,(hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$23f2: ret  nz] [...]
0:
	LOAD_RAM_POINTER	video_ram_pointer_88BE(a6),a0             	| [$23f3: ld   hl,($88BE)]
	move.b	(a0),d0                         	| [$23f6: ld   a,(hl)]
	cmp.b	#0x34,d0                         	| [$23f7: cp   $34]
	jeq	l_23fe                             	| [$23f9: jr   z,$23FE]
	subq.b	#1,(a0)                         	| [$23fb: dec  (hl)]
	jra	l_2401                             	| [$23fc: jr   $2401]
l_23fe:
	move.b	#0x10,d0                      	| [$23fe: ld   (hl),$10]
	jbsr	osd_w_videoram
	subq.w	#1,a0                           	| [$2400: dec  hl]
l_2401:
	STORE_RAM_POINTER	a0,video_ram_pointer_88BE(a6)            	| [$2401: ld   ($88BE),hl]
	
	rts                                    	| [$2404: ret]
l_2405:
	lea	l_8F37(a6),a0                      	| [$2405: ld   hl,$8F37]
	addq.b	#1,(a0)                         	| [$2408: inc  (hl)]
	btst.b	#0,(a0)                         	| [$2409: bit  0,(hl)]
	bne.b	0f                               	| [...]
	rts                                    	| [$240b: ret  z] [...]
0:
	LOAD_RAM_POINTER	video_ram_pointer_88BE(a6),a0             	| [$240c: ld   hl,($88BE)]
	move.b	(a0),d0                         	| [$240f: ld   a,(hl)]
	cmp.b	#0x37,d0                         	| [$2410: cp   $37]
	jcc	l_2417                             	| [$2412: jr   nc,$2417]
	addq.b	#1,(a0)                         	| [$2414: inc  (hl)]
	move.b	(a0),d0
	jbsr	osd_w_videoram
	jra	l_241a                             	| [$2415: jr   $241A]
l_2417:
	addq.w	#1,a0                           	| [$2417: inc  hl]
	move.b	#0x34,d0                      	| [$2418: ld   (hl),$34]
	jbsr	osd_w_videoram
l_241a:
	STORE_RAM_POINTER	a0,video_ram_pointer_88BE(a6)            	| [$241a: ld   ($88BE),hl]
	
	rts                                    	| [$241d: ret]
l_241e:
	jbsr	l_2101                            	| [$241e: call $2101]
	jbsr	l_25a6                            	| [$2421: call $25A6]
	jbsr	l_308b                            	| [$2424: call $308B]
	                   	| [$2427: ld   a,($881E)]
	                               	| [$242a: and  a]
												| [...]
											| [$242b: ret  nz] [...]
0:
	lea	player_structure_8A80(a6),a2      	| [$242c: ld   ix,player_structure_8A80]
	move.b	(0x02,a2),d0                    	| [$2430: ld   a,(ix+$02)] state
	and.b	#0x07,d0                         	| [$2433: and  $07]
	jbsr	jump_from_table_below_0028                            	| [$2435: rst  $28]
jump_table_2436:
	.long	init_player_hit_2442
	.long	player_hit_starts_falling_2473
	.long	player_hit_falls_2497
	.long	player_hit_keeps_falling_24b9
	.long	player_hit_touches_ground_24db
	.long	player_hit_lying_on_groundl_24fb

init_player_hit_2442:
											| [$2442: ld   hl,$89E8]
											| [$2445: ld   a,(hl)]
											| [$2446: ld   l,$EF]
												| [$2448: or   (hl)]
											| [...]
											| [$2449: ret  nz] [...]
						
	move.b	#0x10,(0x11,a2)                 	| [$244a: ld   (ix+$11),$10]
	addq.b	#1,(0x02,a2)                    	| [$244e: inc  (ix+$02)]
	lea	player_structure_8A80(a6),a0      	| [$2451: ld   hl,player_structure_8A80]
	lea	l_8A98(a6),a1                      	| [$2454: ld   de,$8A98]
	move.w	#0x0018,d1                      	| [$2457: ld   bc,$0018] 24
	jbsr	ldir                              	| [$245a: ldir]
	move.b	(0x04,a2),d0                    	| [$245c: ld   a,(ix+$04)]
	sub.b	#0x10,d0                         	| [$245f: sub  $10]
	move.b	d0,(0x04,a2)                    	| [$2461: ld   (ix+$04),a]
	LOAD_ROM	0x26BD,a0                          	| [$2464: ld   hl,$26BD]
	jbsr	l_250f                            	| [$2467: call $250F]
	move.b	l_8F24(a6),d0                   	| [$246a: ld   a,($8F24)]
	                               	| [$246d: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$246e: ret  nz] [...]
0:
	jbsr	l_0fad                            	| [$246f: call $0FAD]
	rts                                    	| [$2472: ret]

player_hit_starts_falling_2473:
	subq.b	#1,(0x11,a2)                    	| [$2473: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$2476: ret  nz] [...]
0:
	                   	| [$2477: ld   a,($8A39)]
	 	| [$247a: and  a]
	             	| [$247b: jr   nz,$2483]
	move.b	#0x10,(0x11,a2)                 	| [$247d: ld   (ix+$11),$10]
	addq.b	#1,(0x02,a2)                    	| [$2481: inc  (ix+$02)]
	move.b	(0x04,a2),d0                    	| [$2484: ld   a,(ix+$04)]
	add.b	#0x10,d0                         	| [$2487: add  a,$10]
	move.b	d0,(0x04,a2)                    	| [$2489: ld   (ix+$04),a]
	CLEAR_XC_FLAGS                         	| [$248c: xor  a]
	clr.b	d0                               	| [$248c: xor  a]
	move.b	d0,(0x1e,a2)                    	| [$248d: ld   (ix+$1e),a]
	LOAD_ROM	0x26C1,a0                          	| [$2490: ld   hl,$26C1]
	jbsr	l_250f                            	| [$2493: call $250F]
	rts                                    	| [$2496: ret]
player_hit_falls_2497:
	subq.b	#1,(0x11,a2)                    	| [$2497: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$249a: ret  nz] [...]
0:
	addq.b	#1,(0x02,a2)                    	| [$249b: inc  (ix+$02)]
	LOAD_ROM	0x26C5,a0                          	| [$249e: ld   hl,$26C5]
	jbsr	l_250f                            	| [$24a1: call $250F]
	lea	player_structure_8A80(a6),a2      	| [$24a4: ld   ix,player_structure_8A80]
	move.b	(0x04,a2),d0                    	| [$24a8: ld   a,(ix+$04)]
	addq.b	#0x04,d0                        	| [$24ab: add  a,$04]
	move.b	d0,(0x04,a2)                    	| [$24ad: ld   (ix+$04),a]
	move.b	(0x06,a2),d0                    	| [$24b0: ld   a,(ix+$06)]
	subq.b	#0x06,d0                        	| [$24b3: sub  $06]
	move.b	d0,(0x06,a2)                    	| [$24b5: ld   (ix+$06),a]
	rts                                    	| [$24b8: ret]
player_hit_keeps_falling_24b9:
	addq.b	#1,(0x05,a2)                    	| [$24b9: inc  (ix+$05)]
	btst.b	#0,(0x05,a2)                    	| [$24bc: bit  0,(ix+$05)]
	jne	l_24c5                             	| [$24c0: jr   nz,$24C5]
	subq.b	#1,(0x06,a2)                    	| [$24c2: dec  (ix+$06)]
l_24c5:
	move.b	(0x04,a2),d0                    	| [$24c5: ld   a,(ix+$04)]
	addq.b	#0x02,d0                        	| [$24c8: add  a,$02]
	move.b	d0,(0x04,a2)                    	| [$24ca: ld   (ix+$04),a]
	cmp.b	#0xDC,d0                         	| [$24cd: cp   $DC]
	bcc.b	0f                               	| [...]
	rts                                    	| [$24cf: ret  c] [...]
0:
	jbsr	l_0f21                            	| [$24d0: call $0F21]
	move.b	#0x02,(0x11,a2)                 	| [$24d3: ld   (ix+$11),$02]
	addq.b	#1,(0x02,a2)                    	| [$24d7: inc  (ix+$02)]
	rts                                    	| [$24da: ret]
player_hit_touches_ground_24db:
	subq.b	#1,(0x11,a2)                    	| [$24db: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$24de: ret  nz] [...]
0:
	move.b	(0x04,a2),d0                    	| [$24df: ld   a,(ix+$04)]
	addq.b	#0x04,d0                        	| [$24e2: add  a,$04]
	move.b	d0,(0x04,a2)                    	| [$24e4: ld   (ix+$04),a]
	move.b	(0x06,a2),d0                    	| [$24e7: ld   a,(ix+$06)]
	sub.b	#0x08,d0                         	| [$24ea: sub  $08]
	move.b	d0,(0x06,a2)                    	| [$24ec: ld   (ix+$06),a]
	move.b	#0x1A,(0x0f,a2)                 	| [$24ef: ld   (ix+$0f),$1A]
	move.b	#0x30,(0x11,a2)                 	| [$24f3: ld   (ix+$11),$30]
	addq.b	#1,(0x02,a2)                    	| [$24f7: inc  (ix+$02)]
	rts                                    	| [$24fa: ret]
player_hit_lying_on_groundl_24fb:
	subq.b	#1,(0x11,a2)                    	| [$24fb: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$24fe: ret  nz] [...]
0:
	                      	| [$24ff: ld   hl,$882B]
	         	| [$2502: ld   a,(hl)]
	                               	| [$2503: and  a]
                             	| [$2504: jr   nz,$2508]
	lea	in_game_sub_state_880A(a6),a0                        	| [$2506: ld   l,$0A]
l_2508:
	move.b	#0x07,(a0)                      	| [$2508: ld   (hl),$07]
                   	| [$250a: ld   a,(checksum_failed_8A3C)]
	 	| [$250d: and  a]
	           	| [...]
	rts                                    	| [$250e: ret  z] [...]
0:
l_250f:
	move.w	#0x0018,d3                      	| [$250f: ld   de,$0018] 24
	move.b	#0x04,d1                        	| [$2512: ld   b,$04]
l_2514:
	move.b	(a0)+,d0                         	| [$2514: ld   a,(hl)]
	move.b	d0,(0x0f,a2)                    	| [$2515: ld   (ix+$0f),a]
	                           	| [$2518: inc  hl]
	add.w	d3,a2                            	| [$2519: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2514                             	| [$251b: djnz $2514]
	* removed checksum flag test											| [$251d: ld   hl,$89E5]
												| [$2520: ld   a,($8DF9)]
												| [$2523: or   (hl)]
	                             	| [$2524: jr   nz,$2527]
	rts                                    	| [$2526: ret]
l_2527:
	move.w	#0x0818,d3                        	| [$2527: ld   d,$08]
	jbsr	update_88A0_0038                            	| [$2529: rst  $38]
	lea	l_8902(a6),a0                      	| [$252a: ld   hl,$8902]
	move.b	(a0),d7                         	| [$252d: ld   a,(hl)]
	clr.b	d0                               	| [$2530: ld   a,$00]
	cmp.b	#0x07,d7                         	| [$252e: cp   $07]
	jcs	l_2541                             	| [$2532: jr   c,$2541]
	moveq	#0,d0                   	| [$2534: ld   a,(rom_check_failed_89FB)]
	move.b	#0x04,(a0)                      	| [$2537: ld   (hl),$04]
	lea	l_8934(a6),a0                        	| [$2539: ld   l,$34]
	move.b	#0x04,(a0)                      	| [$253b: ld   (hl),$04]
	move.b	#0x20,d1                        	| [$253d: ld   b,$20]
	lea	tile_or_color_mode_8920(a6),a0                           	| [$253f: ld   l,b]
	jbsr	fill_area_0010                            	| [$2540: rst  $10]
l_2541:
	lea	rom_pointer_8f00(a6),a0                      	| [$2541: ld   hl,$8F00]
	move.b	#0x4F,d1                        	| [$2544: ld   b,$4F]
	jbsr	fill_area_0010                            	| [$2546: rst  $10]
	lea	l_8F57(a6),a0                        	| [$2547: ld   l,$57]
	move.b	#0x04,d1                        	| [$2549: ld   b,$04]
	jbsr	fill_area_0010                            	| [$254b: rst  $10]
	lea	l_8D30(a6),a0                      	| [$254c: ld   hl,$8D30]
	move.b	#0x03,d1                        	| [$254f: ld   b,$03]
	jbsr	fill_area_0010                            	| [$2551: rst  $10]
	move.b	d0,l_8A82(a6)                   	| [$2552: ld   ($8A82),a]
	move.b	d0,l_8C90(a6)                   	| [$2555: ld   ($8C90),a]
	move.b	d0,l_8CA8(a6)                   	| [$2558: ld   ($8CA8),a]
	move.b	d0,l_8F52(a6)                   	| [$255b: ld   ($8F52),a]
	move.b	d0,l_8F63(a6)                   	| [$255e: ld   ($8F63),a]
	rts                                    	| [$2561: ret]

animate_pigs_in_house_2563:
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$2563: ld   a,($8F50)]
	                               	| [$2566: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$2567: ret  nz] [...]
0:
	lea	animation_timer_8F06(a6),a0                      	| [$2568: ld   hl,$8F06]
	move.b	(a0),d0                         	| [$256b: ld   a,(hl)]
	                               	| [$256c: and  a]
	jeq	l_2571                             	| [$256d: jr   z,$2571]
	subq.b	#1,(a0)                         	| [$256f: dec  (hl)]
	rts                                    	| [$2570: ret]
l_2571:
	move.b	#0x0C,(a0)+                      	| [$2571: ld   (hl),$0C]
	                           	| [$2573: inc  hl]
	addq.b	#1,(a0)                         	| [$2574: inc  (hl)]
	exg	a1,a0                              	| [$2575: ex   de,hl]
	move.b	round_number_8907(a6),d7                   	| [$2576: ld   a,($8907)]
	lea	l_87BB(a6),a0                      	| [$257b: ld   hl,$87BB]
	move.b	(a1),d0                         	| [$257e: ld   a,(de)]
	btst.b	#0,d7                           	| [$2579: bit  0,a]
	jne	l_258f                             	| [$257f: jr   nz,$258F]
	lea	l_84BB(a6),a0                        	| [$2581: ld   h,$84]
	LOAD_ROM	0x2744,a1                          	| [$2583: ld   de,$2744]
	and.b	#0x01,d0                         	| [$2586: and  $01]
	jeq	write_two_4x4_tile_block_2599                             	| [$2588: jr   z,$2599]
	LOAD_ROM	0x2748,a1                          	| [$258a: ld   de,$2748]
	jra	write_two_4x4_tile_block_2599                             	| [$258d: jr   $2599]
l_258f:
	LOAD_ROM	0x274C,a1                          	| [$258f: ld   de,$274C]
	and.b	#0x01,d0                         	| [$2592: and  $01]
	jeq	write_two_4x4_tile_block_2599                             	| [$2594: jr   z,$2599]
	LOAD_ROM	0x2750,a1                          	| [$2596: ld   de,$2750]

write_two_4x4_tile_block_2599:
	move.l	a1,-(sp)                        	| [$2599: push de]
	jbsr	write_4x4_tile_block_3325         	| [$259a: call write_4x4_tile_block_3325]
	                         	| [$259d: ld   de,$FFA0]
	* advance 3 chars on right
	sub.w	#0x60,a0                            	| [$25a0: add  hl,de]
	move.l	(sp)+,a1                        	| [$25a1: pop  de]
	jbsr	write_4x4_tile_block_3325         	| [$25a2: call write_4x4_tile_block_3325]
	rts                                    	| [$25a5: ret]
l_25a6:
	move.b	round_number_8907(a6),d0                   	| [$25a6: ld   a,($8907)]
	btst.b	#0,d0                           	| [$25a9: bit  0,a]
	jeq	l_2d66                             	| [$25ab: jp   z,$2D66]
	lea	l_8F09(a6),a0                      	| [$25ae: ld   hl,$8F09]
	subq.b	#1,(a0)                         	| [$25b1: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$25b2: ret  nz] [...]
0:
	move.b	#0x10,(a0)                      	| [$25b3: ld   (hl),$10]
	move.b	l_8902(a6),d0                   	| [$25b5: ld   a,($8902)]
	                               	| [$25b8: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$25b9: ret  z] [...]
0:
	move.b	d0,d2                           	| [$25ba: ld   c,a]
	move.b	tile_or_color_mode_8920(a6),d0                   	| [$25bb: ld   a,($8920)]
	                               	| [$25be: and  a]
	jne	l_2635                             	| [$25bf: jr   nz,$2635]
	move.b	d2,d0                           	| [$25c1: ld   a,c]
	lea	l_8F05(a6),a1                      	| [$25c2: ld   de,$8F05]
	lea	l_8934(a6),a0                      	| [$25c5: ld   hl,$8934]
	cmp.b	(a0),d0                          	| [$25c8: cp   (hl)]
	jeq	l_25db                             	| [$25c9: jr   z,$25DB]
	move.b	(a1),d0                         	| [$25cb: ld   a,(de)]
	                               	| [$25cc: and  a]
	jne	l_25db                             	| [$25cd: jr   nz,$25DB]
	addq.b	#1,(a0)                         	| [$25cf: inc  (hl)]
	addq.b	#1,d0                           	| [$25d0: inc  a]
	move.b	d0,(a1)                         	| [$25d1: ld   (de),a]
	lea	l_86E3(a6),a1                      	| [$25d2: ld   de,$86E3]
	STORE_RAM_POINTER	a1,ram_pointer_8932(a6)            	| [$25d5: ld   ($8932),de]
	
	jra	l_25eb                             	| [$25d9: jr   $25EB]
l_25db:
	move.b	(a1),d0                         	| [$25db: ld   a,(de)]
	                               	| [$25dc: and  a]
	jeq	l_25eb                             	| [$25dd: jr   z,$25EB]
	move.b	ram_pointer_8932(a6),d0                   	| [$25df: ld   a,($8932)]
	cmp.b	#0xA3,d0                         	| [$25e2: cp   $A3]
	jne	l_25eb                             	| [$25e4: jr   nz,$25EB]
	CLEAR_XC_FLAGS                         	| [$25e6: xor  a]
	clr.b	d0                               	| [$25e6: xor  a]
	move.b	d0,(a1)                         	| [$25e7: ld   (de),a]
	move.b	d0,l_8F63(a6)                   	| [$25e8: ld   ($8F63),a]
l_25eb:
	move.b	(a0),d0                         	| [$25eb: ld   a,(hl)]
	cmp.b	#0x07,d0                         	| [$25ec: cp   $07]
	jcs	l_25fe                             	| [$25ee: jr   c,$25FE]
	move.b	ram_pointer_8932(a6),d0                   	| [$25f0: ld   a,($8932)]
	cmp.b	#0xC3,d0                         	| [$25f3: cp   $C3]
	jne	l_25fc                             	| [$25f5: jr   nz,$25FC] drop boulder
	move.b	#0x01,d0                        	| [$25f7: ld   a,$01]
	move.b	d0,l_8F04(a6)                   	| [$25f9: ld   ($8F04),a]
l_25fc:
	move.b	#0x07,d0                        	| [$25fc: ld   a,$07]
l_25fe:
	move.b	d0,d1                           	| [$25fe: ld   b,a]
	move.w  #0xFFC0,d3                          	| [$25ff: ld   de,$FFC0]
	move.b	l_8F05(a6),d0                   	| [$2602: ld   a,($8F05)]
	                               	| [$2605: and  a]
	jeq	l_266b                             	| [$2606: jr   z,$266B]
	lea	l_8F09(a6),a0                      	| [$2608: ld   hl,$8F09]
	move.b	#0x1C,(a0)                      	| [$260b: ld   (hl),$1C]
	move.w	#0xFFE0,d3                          	| [$260d: ld   de,$FFE0]
	LOAD_RAM_POINTER	ram_pointer_8932(a6),a2             	| [$2610: ld   ix,($8932)]
	add.w	d3,a2                            	| [$2614: add  ix,de]
	STORE_RAM_POINTER	a2,ram_pointer_8932(a6)            	| [$2616: ld   ($8932),ix]
	
	addq.w	#1,a0                           	| [$261a: inc  hl]
	LOAD_ROM	0x276C,a0                          	| [$261d: ld   hl,$276C]
	btst.b	#0,(a0)                         	| [$261b: bit  0,(hl)]
	jne	l_2625                             	| [$2620: jr   nz,$2625]
	LOAD_ROM	0x2768,a0                          	| [$2622: ld   hl,$2768]
l_2625:
	move.b	#0x10,(0x40,a2)                 	| [$2625: ld   (ix+$40),$10]
	move.b	#0x10,(0x41,a2)                 	| [$2629: ld   (ix+$41),$10]
	jbsr	l_0f19                            	| [$262d: call $0F19]
	jbsr	l_0f11                            	| [$2630: call $0F11]
	jra	l_2678                             	| [$2633: jr   $2678]
l_2635:
	move.b	l_8F0A(a6),d0                   	| [$2635: ld   a,($8F0A)]
	LOAD_ROM	0x2770,a0                          	| [$263a: ld   hl,$2770]
	btst.b	#0,d0                           	| [$2638: bit  0,a]
	jeq	l_2642                             	| [$263d: jr   z,$2642]
	lea	table_2774,a0                      	| [$263f: ld   hl,table_2774]
l_2642:
	LOAD_RAM_POINTER	ram_pointer_8932(a6),a3             	| [$2642: ld   iy,($8932)]
	                         	| [$2646: ld   a,iyh]
	subq.w	#0x04,a3                        	| [$2648: sub  $04]
	                            	| [$264a: ld   iyh,a]
	move.b	(0x00,a3),d0                    	| [$264c: ld   a,(iy+$00)]
	move.b	#0x07,d1                        	| [$2651: ld   b,$07]
	cmp.b	#0x80,d0                         	| [$264f: cp   $80]
	jeq	l_2678                             	| [$2653: jr   z,$2678]
	move.b	#0x80,d0                        	| [$2655: ld   a,$80]
	move.w	#0xFFC0,d3                          	| [$2657: ld   de,$FFC0]
l_265a:
	move.b	d0,(0x00,a3)                    	| [$265a: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$265d: ld   (iy+$01),a]
	add.w	d3,a3                            	| [$2660: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_265a                             	| [$2662: djnz $265A]
	jbsr	l_0f49                            	| [$2664: call $0F49]
	move.b	#0x07,d1                        	| [$2667: ld   b,$07]
	jra	l_2678                             	| [$2669: jr   $2678]
l_266b:
	move.b	l_8F0A(a6),d0                   	| [$266b: ld   a,($8F0A)]
	btst.b	#0,d0                           	| [$266e: bit  0,a]
	LOAD_ROM	0x2768,a0                          	| [$2670: ld   hl,$2768]
	jeq	l_2678                             	| [$2673: jr   z,$2678]
	LOAD_ROM	0x276C,a0                          	| [$2675: ld   hl,$276C]
l_2678:
	LOAD_RAM_POINTER	ram_pointer_8932(a6),a2             	| [$2678: ld   ix,($8932)]
	move.w	#0xFFC0,d3                          	| [$267c: ld   de,$FFC0]
l_267f:

	move.l	a0,-(sp)                        	| [$267f: push hl]
	move.b	(a0)+,d0                         	| [$2680: ld   a,(hl)]
	move.b	d0,(0x00,a2)                    	| [$2681: ld   (ix+$00),a]
	                           	| [$2684: inc  hl]
	move.b	(a0)+,d0                         	| [$2685: ld   a,(hl)]
	move.b	d0,(0x01,a2)                    	| [$2686: ld   (ix+$01),a]
	                           	| [$2689: inc  hl]
	move.b	(a0)+,d0                         	| [$268a: ld   a,(hl)]
	move.b	d0,(0x20,a2)                    	| [$268b: ld   (ix+$20),a]
	                           	| [$268e: inc  hl]
	move.b	(a0),d0                         	| [$268f: ld   a,(hl)]
	move.b	d0,(0x21,a2)                    	| [$2690: ld   (ix+$21),a]
	add.w	d3,a2                            	| [$2693: add  ix,de]
	move.l	(sp)+,a0                        	| [$2695: pop  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_267f                             	| [$2696: djnz $267F]
	move.b	tile_or_color_mode_8920(a6),d0                   	| [$2698: ld   a,($8920)]
	                               	| [$269b: and  a]
	jne	l_26b8                             	| [$269c: jr   nz,$26B8]
	move.w  #0xFFDF,d3                          	| [$269e: ld   de,$FFDF]
	add.w	d3,a2                            	| [$26a1: add  ix,de]

	move.l	a2,a0                        	| [$26a3: push ix]
	                        	| [$26a5: pop  hl]
	move.b	l_8F0A(a6),d0                   	| [$26a6: ld   a,($8F0A)]
	LOAD_ROM	0x2754,a1                          	| [$26ab: ld   de,$2754]
	btst.b	#0,d0                           	| [$26a9: bit  0,a]
	jeq	l_26b3                             	| [$26ae: jr   z,$26B3]
	LOAD_ROM	0x275E,a1                          	| [$26b0: ld   de,$275E]
l_26b3:
	jbsr	l_3307                            	| [$26b3: call $3307]
	move.b	#0x10,(a0)                      	| [$26b6: ld   (hl),$10]
l_26b8:
	lea	l_8F0A(a6),a0                      	| [$26b8: ld   hl,$8F0A]
	addq.b	#1,(a0)                         	| [$26bb: inc  (hl)]
	rts                                    	| [$26bc: ret]


table_2770:
	.byte	0x3E,0xC8,0x3E,0xC8
table_2774:
	.byte	0x74,0x54,0x74,0x54


l_2778:
	move.b	l_8F30(a6),d0                   	| [$2778: ld   a,($8F30)]
	and.b	#0x07,d0                         	| [$277b: and  $07]
	jbsr	jump_from_table_below_0028                            	| [$277d: rst  $28]
	.long	unknown_in_game_278F
	.long	handle_meat_27f3
	.long	meat_taken_2856
	.long	l_28ad
	.long	do_nothing_28c5



unknown_in_game_278F:
	tst.b	l_8F3F(a6)                   	| [$278f: ld   a,($8F3F)]
	                               	| [$2792: and  a]
	jne	l_27b2                             	| [$2793: jr   nz,$27B2]
	tst.b	l_8D75(a6)                   	| [$2795: ld   a,($8D75)]
	                               	| [$2798: and  a]
	jeq	l_27a5                             	| [$2799: jr   z,$27A5]
	lea	l_8F20(a6),a0                      	| [$279b: ld   hl,$8F20]
	move.b	(a0),d0                         	| [$279e: ld   a,(hl)]
	                               	| [$279f: and  a]
	jne	l_27a5                             	| [$27a0: jr   nz,$27A5]
	addq.b	#1,(a0)                         	| [$27a2: inc  (hl)]
	jra	l_27ad                             	| [$27a3: jr   $27AD]
l_27a5:
	move.b	nb_wolves_8901(a6),d0           	| [$27a5: ld   a,(nb_wolves_8901)]
	                               	| [$27a8: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$27a9: ret  z] [...]
0:
	and.b	#0x07,d0                         	| [$27aa: and  $07]
	beq.b	0f                               	| [...]
	rts                                    	| [$27ac: ret  nz] meat delay [...]
0:
l_27ad:
	move.b	#0x01,d0                        	| [$27ad: ld   a,$01]
	move.b	d0,l_8F3F(a6)                   	| [$27af: ld   ($8F3F),a]
l_27b2:
	move.b	l_8AB4(a6),d0                   	| [$27b2: ld   a,($8AB4)]
	cmp.b	#0x3C,d0                         	| [$27b5: cp   $3C]
	bcc.b	0f                               	| [...]
	rts                                    	| [$27b7: ret  c] [...]
0:
	move.b	l_8C90(a6),d0                   	| [$27b8: ld   a,($8C90)]
	btst.b	#1,d0                           	| [$27bb: bit  1,a]
	beq.b	0f                               	| [...]
	rts                                    	| [$27bd: ret  nz] [...]
0:
	move.b	l_8CA8(a6),d0                   	| [$27be: ld   a,($8CA8)]
	btst.b	#1,d0                           	| [$27c1: bit  1,a]
	beq.b	0f                               	| [...]
	rts                                    	| [$27c3: ret  nz] [...]
0:
	lea	l_8F30(a6),a0                      	| [$27c4: ld   hl,$8F30]
	addq.b	#1,(a0)                         	| [$27c7: inc  (hl)]
	move.b	#0x08,d0                        	| [$27c8: ld   a,$08]
	move.b	d0,l_892F(a6)                   	| [$27ca: ld   ($892F),a]
	move.b	l_8806(a6),d0                   	| [$27cd: ld   a,($8806)]
	                               	| [$27d0: and  a]
	jne	l_27e1                             	| [$27d1: jr   nz,$27E1]
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$27d3: ld   a,($8F50)]
	lea	l_8F3F(a6),a0                      	| [$27d6: ld   hl,$8F3F]
	or.b	(a0),d0                           	| [$27d9: or   (hl)]
	jeq	l_27e1                             	| [$27da: jr   z,$27E1]
	move.b	#0x6F,d0                        	| [$27dc: ld   a,$6F]
	move.b	d0,l_8508(a6)                   	| [$27de: ld   ($8508),a]
l_27e1:
	move.b	l_8D7A(a6),d0                   	| [$27e1: ld   a,($8D7A)]
	                               	| [$27e4: and  a]
	jeq	l_27ea                             	| [$27e5: jr   z,$27EA]
	move.b	d0,l_8F20(a6)                   	| [$27e7: ld   ($8F20),a]
l_27ea:
	lea	l_84A7(a6),a0                      	| [$27ea: ld   hl,$84A7]
	LOAD_ROM	0x2D51,a1                          	| [$27ed: ld   de,$2D51]
	jra	write_4x4_tile_block_3325          	| [$27f0: jp   write_4x4_tile_block_3325]
handle_meat_27f3:
	move.b	l_8AB4(a6),d0                   	| [$27f3: ld   a,($8AB4)]
	cmp.b	#0x34,d0                         	| [$27f6: cp   $34]
	jcs	l_2813                             	| [$27f8: jr   c,$2813] collect meat
	lea	l_892F(a6),a0                      	| [$27fa: ld   hl,$892F]
	subq.b	#1,(a0)                         	| [$27fd: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$27fe: ret  nz] [...]
0:
	move.b	#0x10,(a0)                      	| [$27ff: ld   (hl),$10]
	                           	| [$2801: dec  hl]
	addq.b	#1,-(a0)                         	| [$2802: inc  (hl)]
	LOAD_ROM	0x2D51,a1                          	| [$2808: ld   de,$2D51]
	lea	l_84A7(a6),a0                      	| [$2805: ld   hl,$84A7]
	btst.b	#0,(a0)                         	| [$2803: bit  0,(hl)]
	jne	l_2810                             	| [$280b: jr   nz,$2810]
	LOAD_ROM	0x2D55,a1                          	| [$280d: ld   de,$2D55]
l_2810:
	jra	write_4x4_tile_block_3325          	| [$2810: jp   write_4x4_tile_block_3325]
l_2813:
	lea	l_8C90(a6),a0                      	| [$2813: ld   hl,$8C90]
	move.w	#0x0018,d3                      	| [$2816: ld   de,$0018] 24
	move.b	#0x02,d1                        	| [$2819: ld   b,$02]
l_281b:
	move.b	(a0),d0                         	| [$281b: ld   a,(hl)]
	                               	| [$281c: and  a]
	jeq	l_2823                             	| [$281d: jr   z,$2823]
	add.w	d3,a0                            	| [$281f: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_281b                             	| [$2820: djnz $281B]
	rts                                    	| [$2822: ret]
l_2823:
	move.b	#0x02,d0                        	| [$2823: ld   a,$02]
	move.b	d0,l_8F30(a6)                   	| [$2825: ld   ($8F30),a]
	move.b	d0,(a0)                         	| [$2828: ld   (hl),a]
	jbsr	l_0f05                            	| [$2829: call $0F05]
	lea	l_84A7(a6),a0                      	| [$282c: ld   hl,$84A7]
	LOAD_ROM	0x2D55,a1                          	| [$282f: ld   de,$2D55]
	jbsr	write_4x4_tile_block_3325         	| [$2832: call write_4x4_tile_block_3325]
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$2835: ld   a,($8F50)]
	lea	l_8F3F(a6),a0                      	| [$2838: ld   hl,$8F3F]
	or.b	(a0),d0                           	| [$283b: or   (hl)]
	*jeq	l_2841                             	| [$283c: jr   z,$2841] bogus
	move.b	#0x10,d0                        	| [$283e: ld   a,$10]
	move.b	d0,l_8508(a6)                   	| [$2840: ld   ($8508),a]
	move.b	#0x01,d0                        	| [$2843: ld   a,$01]
	move.b	d0,l_8A99(a6)                   	| [$2845: ld   ($8A99),a]
	move.b	l_8A86(a6),d0                   	| [$2848: ld   a,($8A86)]
	add.b	#0x0C,d0                         	| [$284b: add  a,$0C]
	move.b	d0,l_8A9E(a6)                   	| [$284d: ld   ($8A9E),a]
	move.b	#0x10,d0                        	| [$2850: ld   a,$10]
	move.b	d0,l_8AA7(a6)                   	| [$2852: ld   ($8AA7),a]
	rts                                    	| [$2855: ret]
meat_taken_2856:
	tst.b	is_bonus_stage_8F50(a6)                   	| [$2856: ld   a,($8F50)]
	                               	        | [$2859: and  a]
	jne	l_2896                             	| [$285a: jr   nz,$2896]
	lea	l_8C78(a6),a2                      	| [$285c: ld   ix,$8C78]
	move.w  #0xFFE8,d3                          	| [$2860: ld   de,$FFE8]
	move.b	#0x06,d1                        	| [$2863: ld   b,$06]
l_2865:
	move.b	(0x00,a2),d0                    	| [$2865: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$2868: or   (ix+$01)]
	jeq	l_2872                             	| [$286b: jr   z,$2872]
	add.w	d3,a2                            	| [$286d: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2865                             	| [$286f: djnz $2865]
	rts                                    	| [$2871: ret]

l_2872:
	move.b	#0x05,(0x01,a2)                 	| [$2872: ld   (ix+$01),$05]
	move.b	#0x10,(0x02,a2)                 	| [$2876: ld   (ix+$02),$10]
	clr.b	(0x03,a2)                        	| [$287a: ld   (ix+$03),$00]
	move.b	#0x08,(0x04,a2)                 	| [$287e: ld   (ix+$04),$08]
	clr.b	(0x05,a2)                        	| [$2882: ld   (ix+$05),$00]
	move.b	#0x1A,(0x06,a2)                 	| [$2886: ld   (ix+$06),$1A]
	move.b	#0x37,(0x0f,a2)                 	| [$288a: ld   (ix+$0f),$37]
	move.b	#0x42,(0x10,a2)                 	| [$288e: ld   (ix+$10),$42]
	STORE_RAM_POINTER	a2,ram_pointer_8F32(a6)            	| [$2892: ld   ($8F32),ix]
	
l_2896:
	lea	l_8F30(a6),a0                      	| [$2896: ld   hl,$8F30]
	addq.b	#1,(a0)                         	| [$2899: inc  (hl)]
	move.b	l_8F61(a6),d0                   	| [$289a: ld   a,($8F61)]
	                               	| [$289d: and  a]
	jeq	l_28a4                             	| [$289e: jr   z,$28A4]
	lea	l_8F5D(a6),a0                        	| [$28a0: ld   l,$5D]
	addq.b	#1,(a0)                         	| [$28a2: inc  (hl)]
	rts                                    	| [$28a3: ret]
l_28a4:
	lea	l_8F34(a6),a0                        	| [$28a4: ld   l,$34]
	move.b	#0x20,(a0)                      	| [$28a6: ld   (hl),$20]
	move.w	#0x0315,d3                          	| [$28a8: ld   de,$0315]
	jbsr	update_88A0_0038                            	| [$28ab: rst  $38]
	rts                                    	| [$28ac: ret]
l_28ad:
	lea	l_8F34(a6),a0                      	| [$28ad: ld   hl,$8F34]
	move.b	(a0),d0                         	| [$28b0: ld   a,(hl)]
	                               	| [$28b1: and  a]
	jeq	l_28b6                             	| [$28b2: jr   z,$28B6]
	subq.b	#1,(a0)                         	| [$28b4: dec  (hl)]
	rts                                    	| [$28b5: ret]
l_28b6:
	lea	l_8F30(a6),a0                        	| [$28b6: ld   l,$30]
	addq.b	#1,(a0)                         	| [$28b8: inc  (hl)]
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$28b9: ld   a,($8F50)]
	                               	| [$28bc: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$28bd: ret  nz] [...]
0:
	CLEAR_XC_FLAGS                         	| [$28be: xor  a]
	clr.b	d0                               	| [$28be: xor  a]
	LOAD_RAM_POINTER	ram_pointer_8F32(a6),a0             	| [$28bf: ld   hl,($8F32)]
	move.b	#0x18,d1                        	| [$28c2: ld   b,$18]
	jbsr	fill_area_0010                            	| [$28c4: rst  $10]
do_nothing_28c5:
	rts                                    	| [$28c5: ret]
l_28c6:
	jbsr	l_2101                            	| [$28c6: call $2101]
	move.b	round_number_8907(a6),d0                   	| [$28c9: ld   a,($8907)]
	btst.b	#0,d0                           	| [$28cc: bit  0,a]
	lea	in_game_sub_state_880A(a6),a0      	| [$28ce: ld   hl,in_game_sub_state_880A]
	jne	l_28d6                             	| [$28d1: jr   nz,$28D6]
	move.b	#0x06,(a0)                      	| [$28d3: ld   (hl),$06]
	rts                                    	| [$28d5: ret]
l_28d6:
	move.b	l_8F08(a6),d0                   	| [$28d6: ld   a,($8F08)]
	                               	| [$28d9: and  a]
	jeq	l_28df                             	| [$28da: jr   z,$28DF]
	move.b	#0x04,(a0)                      	| [$28dc: ld   (hl),$04]
	rts                                    	| [$28de: ret]
l_28df:
	lea	player_structure_8A80(a6),a2      	| [$28df: ld   ix,player_structure_8A80]
	pea	l_2B8D(pc)                          	| [$28e3: ld   hl,$2B8D]

	                        	| [$28e6: push hl]
	subq.b	#1,(0x11,a2)                    	| [$28e7: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$28ea: ret  nz] [...]
0:
	move.b	(0x02,a2),d0                    	| [$28eb: ld   a,(ix+$02)]
	and.b	#0x07,d0                         	| [$28ee: and  $07]
	jbsr	jump_from_table_below_0028                            	| [$28f0: rst  $28]
	.long	l_2901
	.long	l_29a0
	.long	l_2a01
	.long	l_2a32
	.long	l_2a79
	.long	l_2a96
	.long	l_2ab3
	.long	l_2ae8

l_2901:
	move.b	#0x01,(0x11,a2)                 	| [$2901: ld  (ix+$11),$01]
	addq.b	#1,(0x04,a2)                    	| [$2905: inc  (ix+$04)]
	move.b	(0x04,a2),d0                    	| [$2908: ld   a,(ix+$04)]
	cmp.b	#0xDC,d0                         	| [$290b: cp   $DC]
	jcc	l_291e                             	| [$290d: jr   nc,$291E]
	jbsr	l_23d7                            	| [$290f: call $23D7]
	move.b	video_ram_pointer_88BE(a6),d0                   	| [$2912: ld   a,($88BE)]
	cmp.b	#0xF9,d0                         	| [$2915: cp   $F9]
	bne.b	0f                               	| [...]
	rts                                    	| [$2917: ret  z] [...]
0:
	jbsr	l_2405                            	| [$2918: call $2405]
	jra	l_23a1                             	| [$291b: jp   $23A1]
l_291e:
	LOAD_ROM	0x2D59,a0                          	| [$291e: ld   hl,$2D59]
	jbsr	l_250f                            	| [$2921: call $250F]
	lea	l_8A91(a6),a0                      	| [$2924: ld   hl,$8A91]
	move.b	#0x0C,(a0)                      	| [$2927: ld   (hl),$0C]
	lea	l_8A82(a6),a0                        	| [$2929: ld   l,$82]
	addq.b	#1,(a0)                         	| [$292b: inc  (hl)]
	addq.w	#2,a0                           	| [$292c: inc  hl] * 2
	move.b	(a0),d0                         	| [$292e: ld   a,(hl)]
	subq.b	#0x03,d0                        	| [$292f: sub  $03]
	move.b	d0,(a0)                         	| [$2931: ld   (hl),a]
	clr.b	d0                               	| [$2932: xor  a]
	move.b	d0,l_8A9C(a6)                   	| [$2933: ld   ($8A9C),a]
	move.b	d0,l_8A9E(a6)                   	| [$2936: ld   ($8A9E),a]
												| [$2939: ld   hl,$0859]
												| [$293c: ld   bc,$2000]
	* you gotta love those zillions of rom code compare checks									
												| [$293f: ld   a,(hl)]
												| [$2940: add  a,c]
												| [$2941: ld   c,a]
												| [$2942: inc  hl]
												| [...]
												| [$2943: djnz $293F]
												| [$2945: cp   $63]
												| [$2947: jp   nz,$2AE8]
												| [$294a: ld   b,$20]
												| [$294c: ld   de,$2980]
										
												| [$294f: dec  de]
												| [$2950: ld   a,(de)]
												| [$2951: cp   (hl)]
												| [$2952: jp   nz,$2B9A]
												| [$2955: inc  hl]
												| [...]
												| [$2956: djnz $294F]
	jbsr	l_0fa2                            	| [$2958: call $0FA2]
	rts                                    	| [$295b: ret]

l_29a0:
	move.b	#0x03,(0x11,a2)                 	| [$29a0: ld   (ix+$11),$03]
	addq.b	#1,(0x0b,a2)                    	| [$29a4: inc  (ix+$0b)]
	move.b	(0x0b,a2),d0                    	| [$29a7: ld   a,(ix+$0b)]
	and.b	#0x03,d0                         	| [$29aa: and  $03]
	jne	l_29bc                             	| [$29ac: jr   nz,$29BC]
	move.b	(0x0f,a2),d7                    	| [$29ae: ld   a,(ix+$0f)]
	move.b	#0x15,d0                        	| [$29b3: ld   a,$15]
	cmp.b	#0x15,d7                         	| [$29b1: cp   $15]
	jne	l_29b9                             	| [$29b5: jr   nz,$29B9]
	move.b	#0x1E,d0                        	| [$29b7: ld   a,$1E]
l_29b9:
	move.b	d0,(0x0f,a2)                    	| [$29b9: ld   (ix+$0f),a]
l_29bc:
	move.b	(0x06,a2),d0                    	| [$29bc: ld   a,(ix+$06)]
	subq.b	#0x02,d0                        	| [$29bf: sub  $02]
	move.b	d0,(0x06,a2)                    	| [$29c1: ld   (ix+$06),a]
	cmp.b	#0x2C,d0                         	| [$29c4: cp   $2C]
	bcs.b	0f                               	| [...]
	rts                                    	| [$29c6: ret  nc] [...]
0:
	move.b	l_8343(a6),d0                   	| [$29c7: ld   a,($8343)]
	                               	| [$29ca: and  a]
	jne	l_2b23                             	| [$29cb: jp   nz,$2B23]
	add.b	#0x30,d0                         	| [$29ce: add  a,$30]
	move.b	d0,l_8D30(a6)                   	| [$29d0: ld   ($8D30),a]
	move.b	#0x18,(0x11,a2)                 	| [$29d3: ld   (ix+$11),$18]
	addq.b	#1,(0x02,a2)                    	| [$29d7: inc  (ix+$02)]
	LOAD_ROM	0x0879,a0                          	| [$29da: ld   hl,$0879]
	move.w	#0x2000,d1                          	| [$29dd: ld   bc,$2000]
	LOAD_D1D2_FROM_D1_16
l_29e0:
	move.b	(a0),d0                         	| [$29e0: ld   a,(hl)]
	add.b	d2,d0                            	| [$29e1: add  a,c]
	move.b	d0,d2                           	| [$29e2: ld   c,a]
	addq.w	#1,a0                           	| [$29e3: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_29e0                             	| [$29e4: djnz $29E0]
	cmp.b	#0x37,d0                         	| [$29e6: cp   $37]
	jne	l_2ab3                             	| [$29e8: jp   nz,$2AB3]
	LOAD_ROM	0x0859,a0                          	| [$29eb: ld   hl,$0859]
	move.b	#0x20,d1                        	| [$29ee: ld   b,$20]
	LOAD_ROM	0x2980,a1                          	| [$29f0: ld   de,$2980]
l_29f3:
	move.b	(a1),d0                         	| [$29f3: ld   a,(de)]
	cmp.b	(a0),d0                          	| [$29f4: cp   (hl)]
	jne	l_2901                             	| [$29f5: jp   nz,$2901]
	addq.w	#1,a0                           	| [$29f8: inc  hl]
	addq.w	#1,a1                           	| [$29f9: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_29f3                             	| [$29fa: djnz $29F3]
	move.w	#0x0614,d3                          	| [$29fc: ld   de,$0614]
	jbsr	update_88A0_0038                            	| [$29ff: rst  $38]
	rts                                    	| [$2a00: ret]

l_2a01:
	move.b	#0x08,(0x11,a2)                 	| [$2a01: ld   (ix+$11),$08]
	bset.b	#7,(0x10,a2)                    	| [$2a05: set  7,(ix+$10)]
	lea	l_875A(a6),a0                      	| [$2a09: ld   hl,$875A]
	move.b	#0xBC,d0                        	| [$2a0c: ld   a,$BC]
	move.b	d0,(a0)                         	| [$2a0e: ld   (hl),a]
	addq.w	#1,a0                           	| [$2a0f: inc  hl]
	move.b	d0,(a0)                         	| [$2a10: ld   (hl),a]
	addq.w	#1,a0                           	| [$2a11: inc  hl]
	move.b	d0,(a0)                         	| [$2a12: ld   (hl),a]
	addq.b	#1,(0x02,a2)                    	| [$2a13: inc  (ix+$02)]
	CLEAR_XC_FLAGS                         	| [$2a16: xor  a]
	clr.b	d0                               	| [$2a16: xor  a]
	LOAD_ROM	0x0839,a0                          	| [$2a17: ld   hl,$0839]
	move.b	#0x20,d1                        	| [$2a1a: ld   b,$20]
l_2a1c:
	add.b	(a0),d0                          	| [$2a1c: add  a,(hl)]
	addq.w	#1,a0                           	| [$2a1d: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_2a1c                             	| [$2a1e: djnz $2A1C]
	subq.b	#1,d0                           	| [$2a20: dec  a]
	jne	l_2c58                             	| [$2a21: jp   nz,$2C58]
	move.w	#0x0615,d3                          	| [$2a24: ld   de,$0615]
	jbsr	update_88A0_0038                            	| [$2a27: rst  $38]
	lea	l_8903(a6),a0                      	| [$2a28: ld   hl,$8903]
	move.b	(a0),d0                         	| [$2a2b: ld   a,(hl)]
	cmp.b	#0x09,d0                         	| [$2a2c: cp   $09]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2a2e: ret  c] [...]
0:
	move.b	#0x08,(a0)                      	| [$2a2f: ld   (hl),$08]
	rts                                    	| [$2a31: ret]
l_2a32:
	move.b	#0x03,(0x11,a2)                 	| [$2a32: ld   (ix+$11),$03]
	addq.b	#1,(0x0b,a2)                    	| [$2a36: inc  (ix+$0b)]
	move.b	(0x0b,a2),d0                    	| [$2a39: ld   a,(ix+$0b)]
	and.b	#0x03,d0                         	| [$2a3c: and  $03]
	jne	l_2a4e                             	| [$2a3e: jr   nz,$2A4E]
	move.b	(0x0f,a2),d7                    	| [$2a40: ld   a,(ix+$0f)]
	move.b	#0x15,d0                        	| [$2a45: ld   a,$15]
	cmp.b	#0x15,d7                         	| [$2a43: cp   $15]
	jne	l_2a4b                             	| [$2a47: jr   nz,$2A4B]
	move.b	#0x1E,d0                        	| [$2a49: ld   a,$1E]
l_2a4b:
	move.b	d0,(0x0f,a2)                    	| [$2a4b: ld   (ix+$0f),a]
l_2a4e:
	move.b	#0x80,d0                        	| [$2a4e: ld   a,$80]
	add.b	(0x05,a2),d0                     	| [$2a50: add  a,(ix+$05)]
	move.b	d0,(0x05,a2)                    	| [$2a53: ld   (ix+$05),a]
	move.b	(0x06,a2),d0                    	| [$2a56: ld   a,(ix+$06)]
	SET_C_FROM_X
	jcc	l_2a5c                             	| [$2a59: jr   nc,$2A5C]
	addq.b	#1,d0                           	| [$2a5b: inc  a]
l_2a5c:
	addq.b	#1,d0                           	| [$2a5c: inc  a]
	move.b	d0,(0x06,a2)                    	| [$2a5d: ld   (ix+$06),a]
	cmp.b	#0x52,d0                         	| [$2a60: cp   $52]
	jne	l_2a69                             	| [$2a62: jr   nz,$2A69]
	move.w	#0x0694,d3                          	| [$2a64: ld   de,$0694]
	jbsr	update_88A0_0038                            	| [$2a67: rst  $38]
	rts                                    	| [$2a68: ret]
l_2a69:
	cmp.b	#0x64,d0                         	| [$2a69: cp   $64]
	jne	l_2a72                             	| [$2a6b: jr   nz,$2A72]
	move.w	#0x0695,d3                          	| [$2a6d: ld   de,$0695]
	jbsr	update_88A0_0038                            	| [$2a70: rst  $38]
	rts                                    	| [$2a71: ret]
l_2a72:
	cmp.b	#0xAC,d0                         	| [$2a72: cp   $AC]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2a74: ret  c] [...]
0:
	addq.b	#1,(0x02,a2)                    	| [$2a75: inc  (ix+$02)]
	rts                                    	| [$2a78: ret]

l_2a79:
										| [$2a79: ld   hl,$1C66] another protection check
										| [$2a7c: ld   de,$2B23]
										| [$2a7f: ld   b,$68]
								
										| [$2a81: ld   a,(de)]
											| [$2a82: sub  (hl)]
										| [$2a83: jp   nz,$29A0] code not identical: corrupt/hacked
										| [$2a86: inc  hl]
										| [$2a87: inc  de]
										| [...]
										| [$2a88: djnz $2A81]
	move.b	#0x30,(0x11,a2)                 	| [$2a8a: ld   (ix+$11),$30]
	bclr.b	#7,(0x10,a2)                    	| [$2a8e: res  7,(ix+$10)]
	addq.b	#1,(0x02,a2)                    	| [$2a92: inc  (ix+$02)]
	rts                                    	| [$2a95: ret]

l_2a96:
    	| [$2a96: ld   hl,$67DF]
    	| [$2a99: ld   de,$2B23]
     	| [$2a9c: ld   b,$20]

     	| [$2a9e: ld   a,(de)]
      	| [$2a9f: sub  (hl)]
    	| [$2aa0: jp   nz,$2A01]
     	| [$2aa3: inc  hl]
     	| [$2aa4: dec  de]
     	| [...]
    	| [$2aa5: djnz $2A9E]
	move.b	#0x18,(0x11,a2)                 	| [$2aa7: ld   (ix+$11),$18]
	bset.b	#7,(0x10,a2)                    	| [$2aab: set  7,(ix+$10)]
	addq.b	#1,(0x02,a2)                    	| [$2aaf: inc  (ix+$02)]
	rts                                    	| [$2ab2: ret]
l_2ab3:
	move.b	#0x02,(0x11,a2)                 	| [$2ab3: ld   (ix+$11),$02]
	addq.b	#1,(0x0b,a2)                    	| [$2ab7: inc  (ix+$0b)]
	move.b	(0x0b,a2),d0                    	| [$2aba: ld   a,(ix+$0b)]
	and.b	#0x03,d0                         	| [$2abd: and  $03]
	jne	l_2acf                             	| [$2abf: jr   nz,$2ACF]
	move.b	(0x0f,a2),d7                    	| [$2ac1: ld   a,(ix+$0f)]
	move.b	#0x15,d0                        	| [$2ac6: ld   a,$15]
	cmp.b	#0x15,d7                         	| [$2ac4: cp   $15]
	jne	l_2acc                             	| [$2ac8: jr   nz,$2ACC]
	move.b	#0x1E,d0                        	| [$2aca: ld   a,$1E]
l_2acc:
	move.b	d0,(0x0f,a2)                    	| [$2acc: ld   (ix+$0f),a]
l_2acf:
	addq.b	#1,(0x06,a2)                    	| [$2acf: inc  (ix+$06)]
	move.b	(0x06,a2),d0                    	| [$2ad2: ld   a,(ix+$06)]
	cmp.b	#0xC0,d0                         	| [$2ad5: cp   $C0]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2ad7: ret  c] [...]
0:
	move.b	(0x04,a2),d0                    	| [$2ad8: ld   a,(ix+$04)]
	subq.b	#0x03,d0                        	| [$2adb: sub  $03]
	move.b	d0,(0x04,a2)                    	| [$2add: ld   (ix+$04),a]
	addq.b	#1,(0x02,a2)                    	| [$2ae0: inc  (ix+$02)]
	move.b	#0x40,(0x11,a2)                 	| [$2ae3: ld   (ix+$11),$40]
	rts                                    	| [$2ae7: ret]
l_2ae8:
	clr.b	d0                               	| [$2ae8: xor  a]
	lea	player_structure_8A80(a6),a0      	| [$2ae9: ld   hl,player_structure_8A80]
	move.b	d0,(a0)                         	| [$2aec: ld   (hl),a]
	lea	l_8A81(a6),a1                      	| [$2aed: ld   de,$8A81]
	move.w	#0x0240,d1                          	| [$2af0: ld   bc,$0240]
	jbsr	ldir                              	| [$2af3: ldir]
	move.b	d0,l_8902(a6)                   	| [$2af5: ld   ($8902),a]
	move.b	d0,l_8903(a6)                   	| [$2af8: ld   ($8903),a]
	move.b	d0,l_8931(a6)                   	| [$2afb: ld   ($8931),a]
	move.b	#0x06,d0                        	| [$2afe: ld   a,$06]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$2b00: ld   (in_game_sub_state_880A),a]
	rts                                    	| [$2b03: ret]

l_2b23:
	lea	l_8808(a6),a0                      	| [$2b23: ld   hl,$8808]
	subq.b	#1,(a0)                         	| [$2b26: dec  (hl)]
	move.b	l_8E2A(a6),d0                   	| [$2b27: ld   a,($8E2A)]
	                               	| [$2b2a: and  a]
	jeq	l_2b31                             	| [$2b2b: jr   z,$2B31]
	move.b	(a0),d0                         	| [$2b2d: ld   a,(hl)]
	                               	| [$2b2e: and  a]
	jeq	l_2b59                             	| [$2b2f: jr   z,$2B59]
l_2b31:
	jbsr	l_7e94                            	| [$2b31: call $7E94]
	move.b	l_89FC(a6),d0                   	| [$2b34: ld   a,($89FC)]
	                               	| [$2b37: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$2b38: ret  z] [...]
0:
	move.b	l_8808(a6),d0                   	| [$2b39: ld   a,($8808)]
	and.b	#0x07,d0                         	| [$2b3c: and  $07]
	beq.b	0f                               	| [...]
	rts                                    	| [$2b3e: ret  nz] [...]
0:
	move.b	l_89FF(a6),d0                   	| [$2b3f: ld   a,($89FF)]
	LOAD_RAM_POINTER	ram_pointer_89fd(a6),a0             	| [$2b42: ld   hl,($89FD)]
	move.w	#0x0020,d3                      	| [$2b45: ld   de,$0020] 32
	move.b	#0x1C,d1                        	| [$2b48: ld   b,$1C]
l_2b4a:
	move.b	d0,(a0)                         	| [$2b4a: ld   (hl),a]
	add.w	d3,a0                            	| [$2b4b: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2b4a                             	| [$2b4c: djnz $2B4A]
	addq.b	#1,d0                           	| [$2b4e: inc  a]
	cmp.b	#0x10,d0                         	| [$2b4f: cp   $10]
	jcs	l_2b55                             	| [$2b51: jr   c,$2B55]
	move.b	#0x06,d0                        	| [$2b53: ld   a,$06]
l_2b55:
	move.b	d0,l_89FF(a6)                   	| [$2b55: ld   ($89FF),a]
	rts                                    	| [$2b58: ret]
l_2b59:
	lea	round_text_address_855f(a6),a0                      	| [$2b59: ld   hl,$855F]
	move.w  #-0x20,d3                          	| [$2b5c: ld   de,$FFE0]
	move.b	#0x08,d1                        	| [$2b5f: ld   b,$08]
l_2b61:
	move.b	#0x10,d0                        	| [$2b61: ld   a,$10]
	jbsr	osd_w_videoram                         	| [$2b63: ld   (hl),a]
	add.w	d3,a0                            	| [$2b64: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2b61                             	| [$2b65: djnz $2B61]
	lea	l_82BC(a6),a0                      	| [$2b67: ld   hl,$82BC]
	move.w  #-0x20,d3                          	| [$2b6a: ld   de,$FFE0]
	move.b	#0x0A,d1                          	| [$2b6d: ld   bc,$0A00]
	move.b	#0x00,d2                          	| [$2b6d: ld   bc,$0A00]
l_2b70:
	move.b	(a0),d0                         	| [$2b70: ld   a,(hl)]
	add.b	d2,d0                            	| [$2b71: add  a,c]
	move.b	d0,d2                           	| [$2b72: ld   c,a]
	add.w	d3,a0                            	| [$2b73: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2b70                             	| [$2b74: djnz $2B70]
	move.b	d2,d0                           	| [$2b76: ld   a,c]
	cmp.b	#0xAA,d0                         	| [$2b77: cp   $AA]
	beq.b	0f                               	| [...]
	rts                                    	| [$2b79: ret  nz] [...]
0:
	clr.b	d0                               	| [$2b7a: xor  a]
	move.b	d0,l_8E2A(a6)                   	| [$2b7b: ld   ($8E2A),a]
	*move.b	two_player_mode_880E(a6),d0                   	| [$2b7e: ld   a,($880E)]
	                               	| [$2b81: and  a]
	*jeq	l_2bd2                             	| [$2b82: jr   z,$2BD2] bogus
	move.b	current_player_is_p2_880D(a6),d0                   	| [$2b84: ld   a,($880D)]
	                               	| [$2b87: and  a]
	jeq	l_2bb3                             	| [$2b88: jr   z,$2BB3]
	move.b	l_8948(a6),d0                   	| [$2b8a: ld   a,($8948)]
l_2B8D:
	move.b	l_8A82(a6),d0                   	| [$2b8d: ld   a,($8A82)]
	cmp.b	#0x03,d0                         	| [$2b90: cp   $03]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2b92: ret  c] [...]
0:
	jbsr	l_2b9a                            	| [$2b93: call $2B9A]
	jbsr	l_2c2c                            	| [$2b96: call $2C2C]
	rts                                    	| [$2b99: ret]
l_2b9a:
	lea	l_8903(a6),a0                      	| [$2b9a: ld   hl,$8903]
	move.b	(a0),d0                         	| [$2b9d: ld   a,(hl)]
	cmp.b	#0x02,d0                         	| [$2b9e: cp   $02]
	bcc.b	0f                               	| [...]
	jbsr	l_2bbf                            	| [$2ba0: call c,$2BBF]
0:
	lea	l_8D30(a6),a0                      	| [$2ba3: ld   hl,$8D30]
	move.b	(a0),d0                         	| [$2ba6: ld   a,(hl)]
	                               	| [$2ba7: and  a]
	jeq	l_2bac                             	| [$2ba8: jr   z,$2BAC]
	subq.b	#1,(a0)                         	| [$2baa: dec  (hl)]
	rts                                    	| [$2bab: ret]
l_2bac:
	lea	l_8C60(a6),a2                      	| [$2bac: ld   ix,$8C60]
	move.w  #0xFFE8,d3                          	| [$2bb0: ld   de,$FFE8]
l_2bb3:
	move.b	#0x11,d1                        	| [$2bb3: ld   b,$11]
l_2bb5:
	jbsr	exx                               	| [$2bb5: exx]
	jbsr	l_2be5                            	| [$2bb6: call $2BE5]
	jbsr	exx                               	| [$2bb9: exx]
	add.w	d3,a2                            	| [$2bba: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2bb5                             	| [$2bbc: djnz $2BB5]
	rts                                    	| [$2bbe: ret]
l_2bbf:
	cmp.b	#0x01,d0                         	| [$2bbf: cp   $01]
	lea	l_877B(a6),a0                      	| [$2bc1: ld   hl,$877B]
	jeq	l_2bd3                             	| [$2bc4: jr   z,$2BD3]
	move.b	(a0),d0                         	| [$2bc6: ld   a,(hl)]
	cmp.b	#0xBA,d0                         	| [$2bc7: cp   $BA]
	jne	l_2bcd                             	| [$2bc9: jr   nz,$2BCD]
	move.w	(sp)+,d0                        	| [$2bcb: pop  af]
	rts                                    	| [$2bcc: ret]
l_2bcd:
	LOAD_ROM	0x2BE1,a1                          	| [$2bcd: ld   de,$2BE1]
	jbsr	write_4x4_tile_block_3325         	| [$2bd0: call write_4x4_tile_block_3325]
l_2bd3:
	lea	l_87BB(a6),a0                      	| [$2bd3: ld   hl,$87BB]
	move.b	(a0),d0                         	| [$2bd6: ld   a,(hl)]
	cmp.b	#0xBA,d0                         	| [$2bd7: cp   $BA]
	bne.b	0f                               	| [...]
	rts                                    	| [$2bd9: ret  z] [...]
0:
	LOAD_ROM	0x2BE1,a1                          	| [$2bda: ld   de,$2BE1]
	jbsr	write_4x4_tile_block_3325         	| [$2bdd: call write_4x4_tile_block_3325]
	rts                                    	| [$2be0: ret]

l_2be5:
	move.b	(0x00,a2),d0                    	| [$2be5: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$2be8: or   (ix+$01)]
	ror.b	#1,d0                            	| [$2beb: rrca]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2bec: ret  c] [...]
0:
	move.b	#0x01,(0x00,a2)                 	| [$2bed: ld   (ix+$00),$01]
	CLEAR_XC_FLAGS                         	| [$2bf1: xor  a]
	clr.b	d0                               	| [$2bf1: xor  a]
	move.b	#0x11,(0x02,a2)                 	| [$2bf2: ld   (ix+$02),$11]
	move.b	d0,(0x03,a2)                    	| [$2bf6: ld   (ix+$03),a]
	move.b	d0,(0x05,a2)                    	| [$2bf9: ld   (ix+$05),a]
	move.b	#0x1C,(0x04,a2)                 	| [$2bfc: ld   (ix+$04),$1C]
	move.b	#0x03,(0x06,a2)                 	| [$2c00: ld   (ix+$06),$03]
	lea	l_8903(a6),a0                      	| [$2c04: ld   hl,$8903]
	subq.b	#1,(a0)                         	| [$2c07: dec  (hl)]
	btst.b	#0,(a0)                         	| [$2c08: bit  0,(hl)]
	jeq	l_2c0d                             	| [$2c0a: jr   z,$2C0D]
	addq.b	#1,d0                           	| [$2c0c: inc  a]
l_2c0d:
	move.b	d0,(0x07,a2)                    	| [$2c0d: ld   (ix+$07),a]
	LOAD_ROM	0x2D5D,a1                          	| [$2c10: ld   de,$2D5D]
	jbsr	store_de_in_struct_381e                            	| [$2c13: call $381E]
	move.b	l_8903(a6),d0                   	| [$2c16: ld   a,($8903)]
	cmp.b	#0x0A,d0                         	| [$2c19: cp   $0A]
	jcs	l_2c1f                             	| [$2c1b: jr   c,$2C1F]
	move.b	#0x0A,d0                        	| [$2c1d: ld   a,$0A]
l_2c1f:
	move.b	d0,d1                           	| [$2c1f: ld   b,a]
	move.b	#0x20,d0                        	| [$2c20: ld   a,$20]
	sub.b	d1,d0                            	| [$2c22: sub  b]
	move.b	d0,l_8D30(a6)                   	| [$2c23: ld   ($8D30),a]
	move.b	#0x10,(0x09,a2)                 	| [$2c26: ld   (ix+$09),$10]
	move.w	(sp)+,d0                        	| [$2c2a: pop  af]
	rts                                    	| [$2c2b: ret]
l_2c2c:
	lea	l_8AE0(a6),a2                      	| [$2c2c: ld   ix,$8AE0]
	move.w	#0x0018,d3                      	| [$2c30: ld   de,$0018] 24
	move.b	#0x11,d1                        	| [$2c33: ld   b,$11]
l_2c35:
	jbsr	exx                               	| [$2c35: exx]
	jbsr	l_2c3f                            	| [$2c36: call $2C3F]
	jbsr	exx                               	| [$2c39: exx]
	add.w	d3,a2                            	| [$2c3a: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2c35                             	| [$2c3c: djnz $2C35]
	rts                                    	| [$2c3e: ret]
l_2c3f:
	move.b	(0x00,a2),d0                    	| [$2c3f: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$2c42: or   (ix+$01)]
	ror.b	#1,d0                            	| [$2c45: rrca]
	bcs.b	0f                               	| [...]
	rts                                    	| [$2c46: ret  nc] [...]
0:
	move.b	(0x02,a2),d0                    	| [$2c47: ld   a,(ix+$02)]
	and.b	#0x1F,d0                         	| [$2c4a: and  $1F]
	sub.b	#0x11,d0                         	| [$2c4c: sub  $11]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2c4e: ret  c] [...]
0:
	jbsr	jump_from_table_below_0028                            	| [$2c4f: rst  $28]
	.long	l_2c58
	.long	l_2cb3
	.long	l_2d24
	.long	l_2d4a


l_2c58:
	jbsr	l_4006                            	| [$2c58: call $4006]
	move.b	(0x05,a2),d0                    	| [$2c5b: ld   a,(ix+$05)]
	add.b	(0x09,a2),d0                     	| [$2c5e: add  a,(ix+$09)]
	jcc	l_2c66                             	| [$2c61: jr   nc,$2C66]
	addq.b	#1,(0x06,a2)                    	| [$2c63: inc  (ix+$06)]
l_2c66:
	move.b	d0,(0x05,a2)                    	| [$2c66: ld   (ix+$05),a]
	move.b	d0,d1                           	| [$2c69: ld   b,a]
	move.b	(0x06,a2),d0                    	| [$2c6a: ld   a,(ix+$06)]
	cmp.b	#0x12,d0                         	| [$2c6d: cp   $12]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2c6f: ret  c] [...]
0:
	lea	l_8AE0(a6),a2                      	| [$2c70: ld   ix,$8AE0]
	move.b	#0x11,d1                        	| [$2c74: ld   b,$11]
l_2c76:
	jbsr	l_2c85                            	| [$2c76: call $2C85]
	move.w	#0x0018,d3                      	| [$2c79: ld   de,$0018] 24
	add.w	d3,a2                            	| [$2c7c: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2c76                             	| [$2c7e: djnz $2C76]
	jbsr	l_0f3f                            	| [$2c80: call $0F3F]
	move.w	(sp)+,d0                        	| [$2c83: pop  af]
	rts                                    	| [$2c84: ret]
l_2c85:
	move.b	(0x02,a2),d0                    	| [$2c85: ld   a,(ix+$02)]
	cmp.b	#0x11,d0                         	| [$2c88: cp   $11]
	beq.b	0f                               	| [...]
	rts                                    	| [$2c8a: ret  nz] [...]
0:
	move.b	#0x12,(0x02,a2)                 	| [$2c8b: ld   (ix+$02),$12]
	LOAD_ROM	0x2CA7,a1                          	| [$2c8f: ld   de,$2CA7]
	jbsr	store_de_in_struct_381e                            	| [$2c92: call $381E]
	LOAD_ROM	0x2D00,a0                          	| [$2c95: ld   hl,$2D00]
	LOAD_D5D6_FROM_A0_ROM
	move.b	d6,(0x16,a2)                    	| [$2c98: ld   (ix+$16),l]
	move.b	d5,(0x17,a2)                    	| [$2c9b: ld   (ix+$17),h]
	clr.b	(0x15,a2)                        	| [$2c9e: ld   (ix+$15),$00]
	rts                                    	| [$2ca2: ret]

l_2cb3:
	jbsr	l_4006                            	| [$2cb3: call $4006]
	move.b	(0x16,a2),d6                    	| [$2cb6: ld   l,(ix+$16)]
	move.b	(0x17,a2),d5                    	| [$2cb9: ld   h,(ix+$17)]
	LOAD_A0_FROM_D5D6
l_2cbc:
	move.b	(a0),d0                         	| [$2cbc: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$2cbd: cp   $FF]
	jne	l_2cc7                             	| [$2cbf: jr   nz,$2CC7]
	move.b	d0,(0x15,a2)                    	| [$2cc1: ld   (ix+$15),a]
	addq.w	#1,a0                           	| [$2cc4: inc  hl]
	jra	l_2cbc                             	| [$2cc5: jr   $2CBC]
l_2cc7:
	cmp.b	#0x88,d0                         	| [$2cc7: cp   $88]
	jne	l_2cd9                             	| [$2cc9: jr   nz,$2CD9]
	addq.b	#1,(0x02,a2)                    	| [$2ccb: inc  (ix+$02)]
	LOAD_ROM	0x2D5D,a1                          	| [$2cce: ld   de,$2D5D]
	jbsr	store_de_in_struct_381e                            	| [$2cd1: call $381E]
	move.b	#0x20,(0x11,a2)                 	| [$2cd4: ld   (ix+$11),$20]
	rts                                    	| [$2cd8: ret]
l_2cd9:
	addq.w	#1,a0                           	| [$2cd9: inc  hl]
	LOAD_D5D6_FROM_A0_ROM
	move.b	d6,(0x16,a2)                    	| [$2cda: ld   (ix+$16),l]
	move.b	d5,(0x17,a2)                    	| [$2cdd: ld   (ix+$17),h]
	btst.b	#0,(0x15,a2)                    	| [$2ce0: bit  0,(ix+$15)]
	jne	l_2cf4                             	| [$2ce4: jr   nz,$2CF4]
	move.b	d0,d1                           	| [$2ce6: ld   b,a]
	move.b	(0x03,a2),d0                    	| [$2ce7: ld   a,(ix+$03)]
	sub.b	d1,d0                            	| [$2cea: sub  b]
	jcc	l_2cf0                             	| [$2ceb: jr   nc,$2CF0]
	subq.b	#1,(0x04,a2)                    	| [$2ced: dec  (ix+$04)]
l_2cf0:
	move.b	d0,(0x03,a2)                    	| [$2cf0: ld   (ix+$03),a]
	rts                                    	| [$2cf3: ret]
l_2cf4:
	add.b	(0x03,a2),d0                     	| [$2cf4: add  a,(ix+$03)]
	jcc	l_2cfc                             	| [$2cf7: jr   nc,$2CFC]
	addq.b	#1,(0x04,a2)                    	| [$2cf9: inc  (ix+$04)]
l_2cfc:
	move.b	d0,(0x03,a2)                    	| [$2cfc: ld   (ix+$03),a]
	rts                                    	| [$2cff: ret]

l_2d24:
	jbsr	l_4006                            	| [$2d24: call $4006]
	move.b	(0x05,a2),d0                    	| [$2d27: ld   a,(ix+$05)]
	add.b	(0x09,a2),d0                     	| [$2d2a: add  a,(ix+$09)]
	jcc	l_2d32                             	| [$2d2d: jr   nc,$2D32]
	addq.b	#1,(0x06,a2)                    	| [$2d2f: inc  (ix+$06)]
l_2d32:
	move.b	d0,(0x05,a2)                    	| [$2d32: ld   (ix+$05),a]
	move.b	(0x06,a2),d0                    	| [$2d35: ld   a,(ix+$06)]
	cmp.b	#0x19,d0                         	| [$2d38: cp   $19]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2d3a: ret  c] [...]
0:
	addq.b	#1,(0x02,a2)                    	| [$2d3b: inc  (ix+$02)]
	CLEAR_XC_FLAGS                         	| [$2d3e: xor  a]
	clr.b	d0                               	| [$2d3e: xor  a]
	move.b	d0,(0x05,a2)                    	| [$2d3f: ld   (ix+$05),a]
	move.b	d0,(0x06,a2)                    	| [$2d42: ld   (ix+$06),a]
	move.b	d0,(0x16,a2)                    	| [$2d45: ld   (ix+$16),a]
	move.w	(sp)+,d0                        	| [$2d48: pop  af]
	rts                                    	| [$2d49: ret]
l_2d4a:
	clr.b	d0                               	| [$2d4a: ld   a,$00]
	move.b	d0,l_8F36(a6)                   	| [$2d4c: ld   ($8F36),a]
	move.w	(sp)+,d0                        	| [$2d4f: pop  af]
	rts                                    	| [$2d50: ret]

l_2d66:
	move.b	l_8D32(a6),d0                   	| [$2d66: ld   a,($8D32)]
	                               	| [$2d69: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$2d6a: ret  nz] [...]
0:
	move.b	l_8903(a6),d0                   	| [$2d6b: ld   a,($8903)]
	subq.b	#0x02,d0                        	| [$2d6e: sub  $02]
	bne.b	0f                               	| [...]
	rts                                    	| [$2d70: ret  z] [...]
0:
	jbsr	l_2d78                            	| [$2d71: call $2D78]
	jbsr	l_2e22                            	| [$2d74: call $2E22]
	rts                                    	| [$2d77: ret]
l_2d78:
	move.b	l_8F14(a6),d0                   	| [$2d78: ld   a,($8F14)]
	jbsr	jump_from_table_below_0028                            	| [$2d7b: rst  $28]
	.long	l_2d80
	.long	l_2dbc

l_2d80:
	move.b	l_8903(a6),d0                   	| [$2d80: ld   a,($8903)]
	subq.b	#0x02,d0                        	| [$2d83: sub  $02]
	lea	l_8931(a6),a0                      	| [$2d85: ld   hl,$8931]
	cmp.b	(a0),d0                          	| [$2d88: cp   (hl)]
	bne.b	0f                               	| [...]
	rts                                    	| [$2d89: ret  z] [...]
0:
	addq.b	#1,(a0)                         	| [$2d8a: inc  (hl)]
	lea	l_8F18(a6),a0                      	| [$2d8b: ld   hl,$8F18]
	move.b	(a0),d0                         	| [$2d8e: ld   a,(hl)]
	cmp.b	#0x04,d0                         	| [$2d8f: cp   $04]
	jcs	l_2d98                             	| [$2d91: jr   c,$2D98]
                   	| [$2d93: ld   a,($89EF)]
 	| [$2d96: and  a]
           	| [...]
	rts                                    	| [$2d97: ret  z] [...]
0:
l_2d98:
	addq.b	#1,(a0)                         	| [$2d98: inc  (hl)]
	LOAD_ROM	0x2DB8,a0                          	| [$2d99: ld   hl,$2DB8]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$2d9c: rst  $20]
	move.b	d0,D6                           	| [$2d9d: ld   l,a]
	move.b	#0x84,D5                        	| [$2d9e: ld   h,$84]
	LOAD_A0_FROM_D5D6
	STORE_RAM_POINTER	a0,video_ram_pointer_8f19(a6)            	| [$2da0: ld   ($8F19),hl]
	
	move.b	l_8F18(a6),d0                   	| [$2da3: ld   a,($8F18)]
	move.b	d0,d1                           	| [$2da6: ld   b,a]
	lea	l_8F26(a6),a0                      	| [$2da7: ld   hl,$8F26]
l_2daa:
	addq.w	#1,a0                           	| [$2daa: inc  hl]
	addq.w	#1,a0                           	| [$2dab: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_2daa                             	| [$2dac: djnz $2DAA]
	move.b	#0x10,(a0)                      	| [$2dae: ld   (hl),$10]
	lea	l_8F14(a6),a0                        	| [$2db0: ld   l,$14]
	addq.b	#1,(a0)                         	| [$2db2: inc  (hl)]
	lea	l_8F16(a6),a0                        	| [$2db3: ld   l,$16]
	move.b	#0x10,(a0)                      	| [$2db5: ld   (hl),$10]
	rts                                    	| [$2db7: ret]

l_2dbc:
	lea	l_8F16(a6),a0                      	| [$2dbc: ld   hl,$8F16]
	move.b	(a0),d0                         	| [$2dbf: ld   a,(hl)]
	                               	| [$2dc0: and  a]
	jeq	l_2dc5                             	| [$2dc1: jr   z,$2DC5]
	subq.b	#1,(a0)                         	| [$2dc3: dec  (hl)]
	rts                                    	| [$2dc4: ret]
l_2dc5:
	move.b	#0x08,(a0)                      	| [$2dc5: ld   (hl),$08]
	lea	l_8F1B(a6),a0                        	| [$2dc7: ld   l,$1B]
	move.b	(a0),d0                         	| [$2dc9: ld   a,(hl)]
	cmp.b	#0x08,d0                         	| [$2dca: cp   $08]
	jne	l_2ddd                             	| [$2dcc: jr   nz,$2DDD]
	CLEAR_XC_FLAGS                         	| [$2dce: xor  a]
	clr.b	d0                               	| [$2dce: xor  a]
	move.b	d0,(a0)                         	| [$2dcf: ld   (hl),a]
	lea	l_8F14(a6),a0                        	| [$2dd0: ld   l,$14]
	move.b	d0,(a0)                         	| [$2dd2: ld   (hl),a]
	moveq	#0,d0
	move.b	l_8F18(a6),d0                   	| [$2dd3: ld   a,($8F18)]
	add.b	#0x1B,d0                        	| [$2dd6: ld   l,$1B]
	add.w	d0,a0                            	| [$2dd8: add  a,l]
												| [$2dd9: ld   l,a]
	move.b	#0x01,(a0)                      	| [$2dda: ld   (hl),$01]
	rts                                    	| [$2ddc: ret]
l_2ddd:
	LOAD_ROM	0x2DEE,a0                          	| [$2ddd: ld   hl,$2DEE]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$2de0: call $0C45]
	LOAD_RAM_POINTER	video_ram_pointer_8f19(a6),a0             	| [$2de3: ld   hl,($8F19)]
	jbsr	write_4x4_tile_block_3325         	| [$2de6: call write_4x4_tile_block_3325]
	lea	l_8F1B(a6),a0                      	| [$2de9: ld   hl,$8F1B]
	addq.b	#1,(a0)                         	| [$2dec: inc  (hl)]
	rts                                    	| [$2ded: ret]


l_2e22:
	move.b	l_8F18(a6),d0                   	| [$2e22: ld   a,($8F18)]
	                               	| [$2e25: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$2e26: ret  z] [...]
0:
	lea	l_8F1C(a6),a2                      	| [$2e27: ld   ix,$8F1C]
	move.b	d0,d1                           	| [$2e2b: ld   b,a]
l_2e2c:
	jbsr	exx                               	| [$2e2c: exx]
	jbsr	l_2e36                            	| [$2e2d: call $2E36]
	jbsr	exx                               	| [$2e30: exx]
	addq.w	#1,a2                           	| [$2e31: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	l_2e2c                             	| [$2e33: djnz $2E2C]
	rts                                    	| [$2e35: ret]

l_2e36:
	move.b	(0x00,a2),d0                    	| [$2e36: ld   a,(ix+$00)]
	subq.b	#0x01,d0                        	| [$2e39: sub  $01]
	bcc.b	0f                               	| [...]
	rts                                    	| [$2e3b: ret  c] [...]
0:
	jbsr	jump_from_table_below_0028                            	| [$2e3c: rst  $28]
	.long	l_2e5e
	.long	l_2ecb
	.long	l_2f01
	.long	l_2f2f

l_2e45:
	jbsr  read_ixl_in_d0                         	| [$2e45: ld   a,ixl]
	move.b	d0,d2                           	| [$2e47: ld   c,a]
	and.b	#0x03,d0                         	| [$2e48: and  $03]
	add.b	d0,d0                            	| [$2e4a: add  a,a]
	add.b	#0x28,d0                         	| [$2e4b: add  a,$28]
	move.b	d0,D6                           	| [$2e4d: ld   l,a]
	move.b	#0x8F,D5                        	| [$2e4e: ld   h,$8F]
	LOAD_A0_FROM_D5D6
	subq.b	#1,(a0)                         	| [$2e50: dec  (hl)]
	rts                                    	| [$2e51: ret]
compute_screen_address_2e52:
	jbsr  read_ixl_in_d0                         	| [$2e52: ld   a,ixl]
	and.b	#0x03,d0                         	| [$2e54: and  $03]
	LOAD_ROM	0x2DB8,a0                          	| [$2e56: ld   hl,$2DB8]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$2e59: rst  $20]
	move.b	d0,D6                           	| [$2e5a: ld   l,a]
	move.b	#0x84,D5                        	| [$2e5b: ld   h,$84]
	LOAD_A0_FROM_D5D6
	rts                                    	| [$2e5d: ret]
l_2e5e:
	move.b	l_8A5F(a6),d0                   	| [$2e5e: ld   a,($8A5F)]
	and.b	#0x03,d0                         	| [$2e61: and  $03]
	beq.b	0f                               	| [...]
	rts                                    	| [$2e63: ret  nz] [...]
0:
	jbsr	l_2e45                            	| [$2e64: call $2E45]
	beq.b	0f                               	| [...]
	rts                                    	| [$2e67: ret  nz] [...]
0:
	move.b	#0x01,(a0)                      	| [$2e68: ld   (hl),$01]
	lea	l_8C48(a6),a3                      	| [$2e6a: ld   iy,$8C48]
	move.w	#0x0018,d3                      	| [$2e6e: ld   de,$0018] 24
	move.b	#0x03,d1                        	| [$2e71: ld   b,$03]
l_2e73:
	move.b	(0x00,a3),d0                    	| [$2e73: ld   a,(iy+$00)]
	or.b	(0x01,a3),d0                      	| [$2e76: or   (iy+$01)]
	ror.b	#1,d0                            	| [$2e79: rrca]
	jcc	l_2e81                             	| [$2e7a: jr   nc,$2E81]
	add.w	d3,a3                            	| [$2e7c: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2e73                             	| [$2e7e: djnz $2E73]
	rts                                    	| [$2e80: ret]
l_2e81:
	move.b	round_number_8907(a6),d0                   	| [$2e81: ld   a,($8907)]
	cmp.b	#0x10,d0                         	| [$2e84: cp   $10]
	jcs	l_2e8a                             	| [$2e86: jr   c,$2E8A]
	move.b	#0x10,d0                        	| [$2e88: ld   a,$10]
l_2e8a:
	sub.b	#0x28,d0                         	| [$2e8a: sub  $28]
	not.b	d0                               	| [$2e8c: cpl]
	move.b	d0,(a0)                         	| [$2e8d: ld   (hl),a]
	addq.w	#1,a0                           	| [$2e8e: inc  hl]
	move.b	d1,d0                           	| [$2e8f: ld   a,b]
	not.b	d0                               	| [$2e90: cpl]
	and.b	#0x03,d0                         	| [$2e91: and  $03]
	move.b	d0,(a0)                         	| [$2e93: ld   (hl),a]
	jbsr  read_ixl_in_d0                         	| [$2e94: ld   a,ixl]
	and.b	#0x03,d0                         	| [$2e96: and  $03]
	LOAD_ROM	0x2EC7,a0                          	| [$2e98: ld   hl,$2EC7]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$2e9b: rst  $20]
	move.b	#0x07,(0x00,a3)                 	| [$2e9c: ld   (iy+$00),$07]
	move.b	#0x10,(0x02,a3)                 	| [$2ea0: ld   (iy+$02),$10]
	move.b	d0,(0x04,a3)                    	| [$2ea4: ld   (iy+$04),a]
	move.b	#0x40,(0x05,a3)                 	| [$2ea7: ld   (iy+$05),$40]
	move.b	#0x1A,(0x06,a3)                 	| [$2eab: ld   (iy+$06),$1A]
	move.b	#0x2E,(0x0f,a3)                 	| [$2eaf: ld   (iy+$0f),$2E]
	move.b	#0x40,(0x10,a3)                 	| [$2eb3: ld   (iy+$10),$40]
	addq.b	#1,(0x00,a2)                    	| [$2eb7: inc  (ix+$00)]
	jbsr	compute_screen_address_2e52                            	| [$2eba: call $2E52]
	LOAD_ROM	0x2DFE,a1                          	| [$2ebd: ld   de,$2DFE]
	jbsr	write_4x4_tile_block_3325         	| [$2ec0: call write_4x4_tile_block_3325]
	jbsr	l_0f11                            	| [$2ec3: call $0F11]
	rts                                    	| [$2ec6: ret]
	                         	| [$2ec7: jr   $2EDD]
	                          	| [...]
	                         	| [$2ec9: djnz $2ED6]
l_2ecb:
	jbsr	l_2e45                            	| [$2ecb: call $2E45]
	beq.b	0f                               	| [...]
	rts                                    	| [$2ece: ret  nz] [...]
0:
	move.b	round_number_8907(a6),d0                   	| [$2ecf: ld   a,($8907)]
	cmp.b	#0x10,d0                         	| [$2ed2: cp   $10]
	jcs	l_2ed8                             	| [$2ed4: jr   c,$2ED8]
l_2ed6:
	move.b	#0x10,d0                        	| [$2ed6: ld   a,$10]
l_2ed8:
	rol.b	#1,d0                            	| [$2ed8: rlca]
	add.b	#0x18,d0                         	| [$2ed9: add  a,$18]
	move.b	d0,(a0)                         	| [$2edb: ld   (hl),a]
	lea	l_8C30(a6),a3                      	| [$2edc: ld   iy,$8C30]
	move.w	#0x0018,d3                      	| [$2ee0: ld   de,$0018] 24
	addq.w	#1,a0                           	| [$2ee3: inc  hl]
	move.b	(a0),d1                         	| [$2ee4: ld   b,(hl)]
	addq.b	#1,d1                           	| [$2ee5: inc  b]
l_2ee6:
	add.w	d3,a3                            	| [$2ee6: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2ee6                             	| [$2ee8: djnz $2EE6]
	addq.b	#1,(0x0f,a3)                    	| [$2eea: inc  (iy+$0f)]
	clr.b	(0x05,a3)                        	| [$2eed: ld   (iy+$05),$00]
	subq.b	#1,(0x06,a3)                    	| [$2ef1: dec  (iy+$06)]
	addq.b	#1,(0x00,a2)                    	| [$2ef4: inc  (ix+$00)]
	jbsr	compute_screen_address_2e52                            	| [$2ef7: call $2E52]
	LOAD_ROM	0x2E1E,a1                          	| [$2efa: ld   de,$2E1E]
	jbsr	write_4x4_tile_block_3325         	| [$2efd: call write_4x4_tile_block_3325]
	rts                                    	| [$2f00: ret]
l_2f01:
	jbsr	l_305f                            	| [$2f01: call $305F]
	jbsr	l_2e45                            	| [$2f04: call $2E45]
	beq.b	0f                               	| [...]
	rts                                    	| [$2f07: ret  nz] [...]
0:
	move.b	#0x0C,(a0)                      	| [$2f08: ld   (hl),$0C]
	lea	l_8C30(a6),a3                      	| [$2f0a: ld   iy,$8C30]
	move.w	#0x0018,d3                      	| [$2f0e: ld   de,$0018] 24
	addq.w	#1,a0                           	| [$2f11: inc  hl]
	move.b	(a0),d1                         	| [$2f12: ld   b,(hl)]
	addq.b	#1,d1                           	| [$2f13: inc  b]
l_2f14:
	add.w	d3,a3                            	| [$2f14: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2f14                             	| [$2f16: djnz $2F14]
	subq.b	#1,(0x0f,a3)                    	| [$2f18: dec  (iy+$0f)]
	move.b	#0xC0,(0x05,a3)                 	| [$2f1b: ld   (iy+$05),$C0]
	addq.b	#1,(0x06,a3)                    	| [$2f1f: inc  (iy+$06)]
	addq.b	#1,(0x00,a2)                    	| [$2f22: inc  (ix+$00)]
	jbsr	compute_screen_address_2e52                            	| [$2f25: call $2E52]
	LOAD_ROM	0x2DFE,a1                          	| [$2f28: ld   de,$2DFE]
	jbsr	write_4x4_tile_block_3325         	| [$2f2b: call write_4x4_tile_block_3325]
	rts                                    	| [$2f2e: ret]
l_2f2f:
	jbsr	l_2e45                            	| [$2f2f: call $2E45]
	beq.b	0f                               	| [...]
	rts                                    	| [$2f32: ret  nz] [...]
0:
	move.b	l_8931(a6),d0                   	| [$2f33: ld   a,($8931)]
	                               	| [$2f36: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$2f37: ret  z] [...]
0:

	move.l	a0,-(sp)                        	| [$2f38: push hl]
	move.b	round_number_8907(a6),d0                   	| [$2f39: ld   a,($8907)]
	lsr.b	#2,d0                            	| [$2f3c: srl  a] * 2
	cmp.b	#0x04,d0                         	| [$2f40: cp   $04]
	jcs	l_2f46                             	| [$2f42: jr   c,$2F46]
	move.b	#0x03,d0                        	| [$2f44: ld   a,$03]
l_2f46:
	move.b	d0,d1                           	| [$2f46: ld   b,a]
	move.b	l_8820(a6),d0                   	| [$2f47: ld   a,($8820)]
	and.b	#0x04,d0                         	| [$2f4a: and  $04]
	ror.b	#1,d0                            	| [$2f4c: rrca]
	add.b	d1,d0                            	| [$2f4d: add  a,b]
	LOAD_ROM	0x2F93,a0                          	| [$2f4e: ld   hl,$2F93]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$2f51: call $0C45]
	exg	a1,a0                              	| [$2f54: ex   de,hl]
	move.b	l_8931(a6),d0                   	| [$2f55: ld   a,($8931)]
	subq.b	#1,d0                           	| [$2f58: dec  a]
	cmp.b	#0x20,d0                         	| [$2f59: cp   $20]
	jcs	l_2f5f                             	| [$2f5b: jr   c,$2F5F]
	move.b	#0x1F,d0                        	| [$2f5d: ld   a,$1F]
l_2f5f:
	jbsr	read_byte_a0_plus_d0_0020                            	| [$2f5f: rst  $20]
	move.l	(sp)+,a0                        	| [$2f60: pop  hl]
	LOAD_D5D6_FROM_A0_RAM
	move.b	d0,d4                           	| [$2f61: ld   e,a]
	move.b	D6,d0                           	| [$2f62: ld   a,l]
	cmp.b	#0x28,d0                         	| [$2f63: cp   $28]
	jeq	l_2f73                             	| [$2f65: jr   z,$2F73]
	                        	| [$2f67: sub  $02]
	                           	| [$2f69: ld   l,a]
	move.b	(-2,a0),d0                         	| [$2f6a: ld   a,(hl)]
	and.b	#0x1C,d0                         	| [$2f6b: and  $1C]
	add.b	d4,d0                            	| [$2f6d: add  a,e]
	move.b	d0,d4                           	| [$2f6e: ld   e,a]
                        	| [$2f6f: ld   a,l]
	                        	| [$2f70: add  a,$02]
                           	| [$2f72: ld   l,a]
l_2f73:
	move.b	d4,d0                           	| [$2f73: ld   a,e]
	move.b	d0,(a0)+                         	| [$2f74: ld   (hl),a]
	move.w	#0x0018,d3                      	| [$2f75: ld   de,$0018] 24
	                           	| [$2f78: inc  hl]
	move.b	(a0),d1                         	| [$2f79: ld   b,(hl)]
	lea	l_8C30(a6),a0                      	| [$2f7a: ld   hl,$8C30]
	addq.b	#1,d1                           	| [$2f7d: inc  b]
l_2f7e:
	add.w	d3,a0                            	| [$2f7e: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_2f7e                             	| [$2f7f: djnz $2F7E]
	clr.b	d0                               	| [$2f81: xor  a]
	move.b	#0x18,d1                        	| [$2f82: ld   b,$18]
	jbsr	fill_area_0010                            	| [$2f84: rst  $10]
	addq.b	#1,d0                           	| [$2f85: inc  a]
	move.b	d0,(0x00,a2)                    	| [$2f86: ld   (ix+$00),a]
	jbsr	compute_screen_address_2e52                            	| [$2f89: call $2E52]
	LOAD_ROM	0x2E1A,a1                          	| [$2f8c: ld   de,$2E1A]
	jbsr	write_4x4_tile_block_3325         	| [$2f8f: call write_4x4_tile_block_3325]
	rts                                    	| [$2f92: ret]

l_305f:
	jbsr  read_ixl_in_d0                   	| [$305f: ld   a,ixl]
	and.b	#0x03,d0                         	| [$3061: and  $03]
	LOAD_ROM	0x3087,a0                          	| [$3063: ld   hl,$3087]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$3066: rst  $20]
	move.b	d0,d1                           	| [$3067: ld   b,a]
	move.b	lift_speed_8A84(a6),d0          	| [$3068: ld   a,(lift_speed_8A84)]
	subq.b	#0x07,d0                        	| [$306b: sub  $07]
	move.b	d0,d2                           	| [$306d: ld   c,a]
	add.b	#0x0E,d0                         	| [$306e: add  a,$0E]
	cmp.b	d1,d0                            	| [$3070: cp   b]
* collision detection (wolf)
	bcc.b	0f                               	| [...]
	rts                                    	| [$3071: ret  c] [...]
0:
	move.b	d2,d0                           	| [$3072: ld   a,c]
	cmp.b	d1,d0                            	| [$3073: cp   b]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3074: ret  nc] [...]
0:
	lea	l_8F24(a6),a0                      	| [$3075: ld   hl,$8F24]
	move.b	l_8F08(a6),d0                   	| [$3078: ld   a,($8F08)]
	or.b	(a0),d0                           	| [$307b: or   (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$307c: ret  nz] [...]
0:
	move.b	#0x01,d0                        	| [$307d: ld   a,$01]
	move.b	d0,l_8D32(a6)                   	| [$307f: ld   ($8D32),a]
	jbsr	l_0f15                            	| [$3082: call $0F15]
	move.w	(sp)+,d0                        	| [$3085: pop  af]
	rts                                    	| [$3086: ret]
	beq.b	0f                               	| [...]
	rts                                    	| [$3087: ret  nz] [...]
0:
	and.b	d1,d0                            	| [$3088: and  b]
	add.b	d1,d0                            	| [$3089: add  a,b]
	move.b	d1,d4                           	| [$308a: ld   e,b]
l_308b:
	move.b	l_8F04(a6),d0                   	| [$308b: ld   a,($8F04)]
	                               	| [$308e: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$308f: ret  z] [...]
0:
	move.b	l_8F08(a6),d0                   	| [$3090: ld   a,($8F08)]
	                               	| [$3093: and  a]
	jne	l_30e0                             	| [$3094: jr   nz,$30E0]
	lea	l_8AE0(a6),a2                      	| [$3096: ld   ix,$8AE0]
	lea	tile_or_color_mode_8920(a6),a3                      	| [$309a: ld   iy,$8920]
	move.w	#0x0018,d3                      	| [$309e: ld   de,$0018] 24
	move.b	#0x11,d1                        	| [$30a1: ld   b,$11]
l_30a3:
	move.b	(0x00,a2),d0                    	| [$30a3: ld   a,(ix+$00)]
	                               	| [$30a6: and  a]
	jeq	l_30b6                             	| [$30a7: jr   z,$30B6]
	cmp.b	#0x05,d0                         	| [$30a9: cp   $05]
	jeq	l_30b6                             	| [$30ab: jr   z,$30B6]
l_30ad:
	add.w	d3,a2                            	| [$30ad: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_30a3                             	| [$30af: djnz $30A3]
	clr.b	d0                               	| [$30b1: xor  a]
	move.b	d0,tile_or_color_mode_8920(a6)                   	| [$30b2: ld   ($8920),a]
	rts                                    	| [$30b5: ret]
l_30b6:
	move.b	(0x01,a2),d0                    	| [$30b6: ld   a,(ix+$01)]
	                               	| [$30b9: and  a]
	jne	l_30ad                             	| [$30ba: jr   nz,$30AD]

	move.l	a2,a0                        	| [$30bc: push ix]
	LOAD_D5D6_FROM_A0_RAM                        	| [$30be: pop  hl]
	move.b	D6,(0x00,a3)                    	| [$30bf: ld   (iy+$00),l]
	move.b	D5,(0x01,a3)                    	| [$30c2: ld   (iy+$01),h]
	move.b	#0x05,(0x00,a2)                 	| [$30c5: ld   (ix+$00),$05]
	move.b	#0x10,(0x02,a2)                 	| [$30c9: ld   (ix+$02),$10]
	addq.w	#2,a3                           	| [$30cd: inc  iy] * 2
	jbsr	read_iyl_in_d0                         	| [$30d1: ld   a,iyl]
	cmp.b	#0x28,d0                         	| [$30d3: cp   $28]
	jne	l_30ad                             	| [$30d5: jr   nz,$30AD]
	lea	l_8F08(a6),a0                      	| [$30d7: ld   hl,$8F08]
	move.b	#0x01,(a0)                      	| [$30da: ld   (hl),$01]
	addq.w	#1,a0                           	| [$30dc: inc  hl]
	move.b	#0x20,(a0)                      	| [$30dd: ld   (hl),$20]
	rts                                    	| [$30df: ret]
l_30e0:
	pea	l_32BD(pc)                          	| [$30e0: ld   hl,$32BD]

	                        	| [$30e3: push hl]
	move.b	l_8F08(a6),d0                   	| [$30e4: ld   a,($8F08)]
	and.b	#0x03,d0                         	| [$30e7: and  $03]
	subq.b	#1,d0                           	| [$30e9: dec  a]
	jbsr	jump_from_table_below_0028                            	| [$30ea: rst  $28]
	.long	l_30f1
	.long	l_316e
	.long	rom_checksum_3266

l_30f1:
	lea	tile_or_color_mode_8920(a6),a2                      	| [$30f1: ld   ix,$8920]
	LOAD_ROM	0x3337,a0                          	| [$30f5: ld   hl,$3337]
	move.b	#0x04,d1                        	| [$30f8: ld   b,$04]
l_30fa:
	move.b	(0x00,a2),d4                    	| [$30fa: ld   e,(ix+$00)]
	move.b	(0x01,a2),d3                    	| [$30fd: ld   d,(ix+$01)]
	LOAD_A1_FROM_D3D4
	move.l	a1,a3											| [$3100: ld   iyl,e]
									
												| [$3102: ld   iyh,d]
									
	move.b	(a0)+,d0                         	| [$3104: ld   a,(hl)]
	move.b	d0,(0x04,a3)                    	| [$3105: ld   (iy+$04),a]
	                           	| [$3108: inc  hl]
	move.b	(a0)+,d0                         	| [$3109: ld   a,(hl)]
	move.b	d0,(0x06,a3)                    	| [$310a: ld   (iy+$06),a]
	                           	| [$310d: inc  hl]
	move.b	(a0)+,d0                         	| [$310e: ld   a,(hl)]
	move.b	d0,(0x0f,a3)                    	| [$310f: ld   (iy+$0f),a]
	                           	| [$3112: inc  hl]
	move.b	(a0)+,d0                         	| [$3113: ld   a,(hl)]
	move.b	d0,(0x10,a3)                    	| [$3114: ld   (iy+$10),a]
	move.b	#0x30,(0x09,a3)                 	| [$3117: ld   (iy+$09),$30]
	addq.w	#2,a2                           	| [$311b: inc  ix] * 2
	                           	| [$311f: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_30fa                             	| [$3120: djnz $30FA]
	move.b	#0x0C,d0                        	| [$3122: ld   a,$0C]
	move.b	d0,l_8928(a6)                   	| [$3124: ld   ($8928),a]
	lea	l_8F08(a6),a0                      	| [$3127: ld   hl,$8F08]
	addq.b	#1,(a0)                         	| [$312a: inc  (hl)]
	move.b	#0x10,d0                        	| [$312b: ld   a,$10]
	move.w	#0x001D,d3                      	| [$312d: ld   de,$001D] 29
	lea	l_84C2(a6),a0                      	| [$3130: ld   hl,$84C2]
	move.b	#0x03,d2                        	| [$3133: ld   c,$03]
l_3135:
	move.b	#0x03,d1                        	| [$3135: ld   b,$03]
	jbsr	fill_area_0010                            	| [$3137: rst  $10]
	add.w	d3,a0                            	| [$3138: add  hl,de]
	subq.b	#1,d2                           	| [$3139: dec  c]
	jne	l_3135                             	| [$313a: jr   nz,$3135]
	LOAD_ROM	0x3370,a0                          	| [$313c: ld   hl,$3370]
	STORE_ROM_POINTER	a0,rom_pointer_8f48(a6)            	| [$313f: ld   ($8F4B),hl]
	
	jbsr	l_0f19                            	| [$3142: call $0F19]
	jbsr	l_323e                            	| [$3145: call $323E]
	* skipping another ROM checksum
												| [$3148: ld   de,$68AC]
												| [$314b: ld   hl,$3278]
												| [$314e: ld   b,$40]
												| [$3150: ld   a,e]
													| [$3151: cp   (hl)]
												| [$3152: jr   nz,$3163]
												| [$3154: ld   a,d]
												| [$3155: inc  hl]
													| [$3156: cp   (hl)]
												| [$3157: jr   nz,$3163]
												| [$3159: inc  hl]
							
												| [$315a: ld   a,(de)]
													| [$315b: cp   (hl)]
												| [$315c: jr   nz,$3163]
												| [$315e: inc  de]
												| [$315f: inc  hl]
												| [...]
												| [$3160: djnz $315A]
	rts                                    	| [$3162: ret]
			
			
			
						| [$3163: xor  a]
					| [$3164: ld   hl,$8800]
					| [$3167: ld   de,$8801]
					| [$316a: ld   (hl),a]
						| [$316b: ldir]
					| [$316d: ret]
	
l_316e:
	lea	l_8928(a6),a0                      	| [$316e: ld   hl,$8928]
	move.b	(a0),d0                         	| [$3171: ld   a,(hl)]
	                               	| [$3172: and  a]
	jeq	l_3177                             	| [$3173: jr   z,$3177]
	subq.b	#1,(a0)                         	| [$3175: dec  (hl)]
	rts                                    	| [$3176: ret]
l_3177:
	lea	tile_or_color_mode_8920(a6),a0                        	| [$3177: ld   l,$20]
	move.b	(a0)+,d4                         	| [$3179: ld   e,(hl)]
	                           	| [$317a: inc  hl]
	move.b	(a0),d3                         	| [$317b: ld   d,(hl)]
	LOAD_A1_FROM_D3D4
	move.l	a1,a3                        	| [$317c: push de]
	                        	| [$317d: pop  iy]
	LOAD_ROM_POINTER	rom_pointer_8f48(a6),a0             	| [$317f: ld   hl,($8F4B)]
	move.b	(a0),d0                         	| [$3182: ld   a,(hl)]
	                               	| [$3183: and  a]
	jeq	l_3199                             	| [$3184: jr   z,$3199]
	add.b	(0x05,a3),d0                     	| [$3186: add  a,(iy+$05)]
	jcc	l_318e                             	| [$3189: jr   nc,$318E]
	addq.b	#1,(0x06,a3)                    	| [$318b: inc  (iy+$06)]
l_318e:
	move.b	d0,(0x05,a3)                    	| [$318e: ld   (iy+$05),a]
	addq.w	#1,a0                           	| [$3191: inc  hl]
	move.b	(a0)+,d0                         	| [$3192: ld   a,(hl)]
	                           	| [$3193: inc  hl]
	STORE_ROM_POINTER	a0,rom_pointer_8f48(a6)            	| [$3194: ld   ($8F4B),hl]
	
	jra	l_31a4                             	| [$3197: jr   $31A4]
l_3199:
	addq.b	#1,(0x09,a3)                    	| [$3199: inc  (iy+$09)]
	jne	l_31a1                             	| [$319c: jr   nz,$31A1]
	addq.b	#1,(0x04,a3)                    	| [$319e: inc  (iy+$04)]
l_31a1:
	move.b	(0x09,a3),d0                    	| [$31a1: ld   a,(iy+$09)]
l_31a4:
	add.b	(0x03,a3),d0                     	| [$31a4: add  a,(iy+$03)]
	jcc	l_31ac                             	| [$31a7: jr   nc,$31AC]
	addq.b	#1,(0x04,a3)                    	| [$31a9: inc  (iy+$04)]
l_31ac:
	move.b	d0,(0x03,a3)                    	| [$31ac: ld   (iy+$03),a]
	                               	| [$31b2: and  a]
	move.b	(0x04,a3),d0                    	| [$31b3: ld   a,(iy+$04)]
	tst.b	ram_or_rom_pointer_8f4a(a6)                   	| [$31af: ld   a,($8F4A)]
	jne	l_31d7                             	| [$31b6: jr   nz,$31D7]
	rol.b	#3,d0                            	| [$31b8: rlca] * 3
	add.b	#0x18,d0                         	| [$31bb: add  a,$18]
	move.b	d0,d2                           	| [$31bd: ld   c,a]
	move.b	lift_speed_8A84(a6),d0          	| [$31be: ld   a,(lift_speed_8A84)]
	cmp.b	d2,d0                            	| [$31c1: cp   c]
	jcc	l_31e5                             	| [$31c2: jr   nc,$31E5]
	move.b	#0x01,d0                        	| [$31c4: ld   a,$01]
	move.b	d0,l_8F24(a6)                   	| [$31c6: ld   ($8F24),a]
	move.b	d0,ram_or_rom_pointer_8f4a(a6)                   	| [$31c9: ld   ($8F4A),a]
	LOAD_ROM	0x3348,a0                          	| [$31cc: ld   hl,$3348]
	STORE_ROM_POINTER	a0,rom_pointer_8f48(a6)            	| [$31cf: ld   ($8F4B),hl]
	
	jbsr	l_0f1d                            	| [$31d2: call $0F1D]
	jra	l_31e5                             	| [$31d5: jr   $31E5]
l_31d7:
	cmp.b	#0x1B,d0                         	| [$31d7: cp   $1B]
	jcs	l_31e5                             	| [$31d9: jr   c,$31E5]
	move.b	d0,l_8928(a6)                   	| [$31db: ld   ($8928),a]
	lea	l_8F08(a6),a0                      	| [$31de: ld   hl,$8F08]
	addq.b	#1,(a0)                         	| [$31e1: inc  (hl)]
	jbsr	l_0f1d                            	| [$31e2: call $0F1D]
l_31e5:
	move.b	(0x04,a3),d2                    	| [$31e5: ld   c,(iy+$04)]
	move.b	(0x06,a3),d1                    	| [$31e8: ld   b,(iy+$06)]
	lea	tile_or_color_mode_8920(a6),a2                      	| [$31eb: ld   ix,$8920]
	move.w	#0x0003,d3                      	| [$31ef: ld   de,$0003] 3
	move.b	(0x02,a2),D6                    	| [$31f2: ld   l,(ix+$02)]
	move.b	(0x03,a2),D5                    	| [$31f5: ld   h,(ix+$03)]
	LOAD_A0_FROM_D5D6
	add.w	d3,a0                            	| [$31f8: add  hl,de]
	move.b	(0x03,a3),d0                    	| [$31f9: ld   a,(iy+$03)]
	move.b	d0,(a0)+                         	| [$31fc: ld   (hl),a]
	                           	| [$31fd: inc  hl]
	move.b	d2,d0                           	| [$31fe: ld   a,c]
	move.b	d0,(a0)+                         	| [$31ff: ld   (hl),a]
	                           	| [$3200: inc  hl]
	move.b	(0x05,a3),d0                    	| [$3201: ld   a,(iy+$05)]
	move.b	d0,(a0)+                         	| [$3204: ld   (hl),a]
	                           	| [$3205: inc  hl]
	move.b	d1,d0                           	| [$3206: ld   a,b]
	addq.b	#0x02,d0                        	| [$3207: add  a,$02]
	move.b	d0,(a0)                         	| [$3209: ld   (hl),a]
	move.b	(0x04,a2),D6                    	| [$320a: ld   l,(ix+$04)]
	move.b	(0x05,a2),D5                    	| [$320d: ld   h,(ix+$05)]
	LOAD_A0_FROM_D5D6
	add.w	d3,a0                            	| [$3210: add  hl,de]
	move.b	(0x03,a3),d0                    	| [$3211: ld   a,(iy+$03)]
	move.b	d0,(a0)+                         	| [$3214: ld   (hl),a]
	                           	| [$3215: inc  hl]
	move.b	d2,d0                           	| [$3216: ld   a,c]
	addq.b	#0x02,d0                        	| [$3217: add  a,$02]
	move.b	d0,(a0)+                         	| [$3219: ld   (hl),a]
												| [$321a: inc  hl]
	move.b	(0x05,a3),d0                    	| [$321b: ld   a,(iy+$05)]
	move.b	d0,(a0)+                         	| [$321e: ld   (hl),a]
	                           	| [$321f: inc  hl]
	move.b	d1,d0                           	| [$3220: ld   a,b]
	move.b	d0,(a0)                         	| [$3221: ld   (hl),a]
	move.b	(0x06,a2),D6                    	| [$3222: ld   l,(ix+$06)]
	move.b	(0x07,a2),D5                    	| [$3225: ld   h,(ix+$07)]
	LOAD_A0_FROM_D5D6
	add.w	d3,a0                            	| [$3228: add  hl,de]
	move.b	(0x03,a3),d0                    	| [$3229: ld   a,(iy+$03)]
	move.b	d0,(a0)+                         	| [$322c: ld   (hl),a]
	                           	| [$322d: inc  hl]
	move.b	d2,d0                           	| [$322e: ld   a,c]
	addq.b	#0x02,d0                        	| [$322f: add  a,$02]
	move.b	d0,(a0)+                         	| [$3231: ld   (hl),a]
	                           	| [$3232: inc  hl]
	move.b	(0x05,a3),d0                    	| [$3233: ld   a,(iy+$05)]
	move.b	d0,(a0)+                         	| [$3236: ld   (hl),a]
	                           	| [$3237: inc  hl]
	move.b	d1,d0                           	| [$3238: ld   a,b]
	addq.b	#0x02,d0                        	| [$3239: add  a,$02]
	move.b	d0,(a0)                         	| [$323b: ld   (hl),a]
	move.b	#0x04,d1                        	| [$323c: ld   b,$04]
l_323e:
	move.b	(0x01,a2),d0                    	| [$323e: ld   a,(ix+$01)]
	cmp.b	#0x8C,d0                         	| [$3241: cp   $8C]
	bne.b	0f                               	| [...]
	jbsr	l_324d                            	| [$3243: call z,$324D]
0:
	addq.w	#2,a2                           	| [$3246: inc  ix] * 2
	subq.b	#1,d1                           	| [...]
	jne	l_323e                             	| [$324a: djnz $323E]
	rts                                    	| [$324c: ret]
l_324d:
	move.b	(0x00,a2),d0                    	| [$324d: ld   a,(ix+$00)]
	cmp.b	#0x40,d0                         	| [$3250: cp   $40]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3252: ret  c] [...]
0:
	move.b	#0x8C,d5                        	| [$3253: ld   h,$8C]
	addq.b	#0x05,d0                        	| [$3255: add  a,$05]
	move.b	d0,d6                           	| [$3257: ld   l,a]
	LOAD_A0_FROM_D5D6
	move.b	(a0),d0                         	| [$3258: ld   a,(hl)]
	sub.b	#0x40,d0                         	| [$3259: sub  $40]
	bcs.b	0f                               	| [...]
	move.b	d0,(a0)                         	| [$325b: ld   (hl),a]
	rts                                    	| [$325c: ret  nc] [...]
0:
	move.b	d0,(a0)+                         	| [$325b: ld   (hl),a]
										| [$325d: inc  hl]
	subq.b	#1,(a0)                         	| [$325e: dec  (hl)]
	* removed rom check flag test                   	| [$325f: ld   a,($89E5)]
	                               	| [$3262: and  a]
	                             	| [$3263: jr   nz,$3278]
	rts                                    	| [$3265: ret]
rom_checksum_3266:
								| [$3266: ld   hl,$0799]
								| [$3269: ld   bc,$2000]
					
									| [$326c: ld   a,(hl)]
									| [$326d: add  a,c]
									| [$326e: ld   c,a]
									| [$326f: inc  hl]
									| [...]
								| [$3270: djnz $326C]
									| [$3272: cp   $DC]
								| [$3274: jp   nz,$0799]
	rts                                    	| [$3277: ret]


       	| [$32b0: ld   a,d]
       	| [$32b1: inc  hl]
        	| [$32b2: cp   (hl)]
        	| [...]
      	| [$32b3: ret  z] [...]

       	| [...]
      	| [$32b4: djnz $32B0]
      	| [$32b6: jp   $3829]

l_32BD:
	move.b	l_8F24(a6),d0                   	| [$32bd: ld   a,($8F24)]
	                               	| [$32c0: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$32c1: ret  z] [...]
0:
	cmp.b	#0x02,d0                         	| [$32c2: cp   $02]
	jeq	l_32e8                             	| [$32c4: jr   z,$32E8]
	bcs.b	0f                               	| [...]
	rts                                    	| [$32c6: ret  nc] [...]
0:
	CLEAR_XC_FLAGS                         	| [$32c7: xor  a]
	clr.b	d0                               	| [$32c7: xor  a]
	lea	l_8D21(a6),a0                      	| [$32c8: ld   hl,$8D21]
	move.b	d0,(a0)                         	| [$32cb: ld   (hl),a]
	addq.w	#1,a0                           	| [$32cc: inc  hl]
	move.b	#0x20,(a0)                      	| [$32cd: ld   (hl),$20]
	jbsr	l_0fad                            	| [$32cf: call $0FAD]
	lea	l_8F24(a6),a0                      	| [$32d2: ld   hl,$8F24]
	addq.b	#1,(a0)                         	| [$32d5: inc  (hl)]
												| [$32d6: ld   hl,$0779]
												| [$32d9: ld   bc,$2000]
								
												| [$32dc: ld   a,(hl)]
													| [$32dd: add  a,c]
												| [$32de: ld   c,a]
												| [$32df: inc  hl]
												| [...]
												| [$32e0: djnz $32DC]
													| [$32e2: and  $47]
												| [$32e4: jp   nz,$1F40]
	rts                                    	| [$32e7: ret]
l_32e8:
	lea	lift_speed_8A84(a6),a0             	| [$32e8: ld   hl,lift_speed_8A84]
	addq.b	#2,(a0)                         	| [$32eb: inc  (hl)] * 2
	move.b	(a0),d0                         	| [$32ed: ld   a,(hl)]
	cmp.b	#0xDB,d0                         	| [$32ee: cp   $DB]
	jcc	l_32f6                             	| [$32f0: jr   nc,$32F6]
	jbsr	l_23d7                            	| [$32f2: call $23D7]
	rts                                    	| [$32f5: ret]
l_32f6:
	jbsr	l_0f30                            	| [$32f6: call $0F30]
	move.b	l_8083(a6),d0                   	| [$32f9: ld   a,($8083)]
	                               	| [$32fc: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$32fd: ret  nz] [...]
0:
	addq.b	#1,d0                           	| [$32fe: inc  a]
	move.b	d0,l_8D32(a6)                   	| [$32ff: ld   ($8D32),a]
	lea	l_8F24(a6),a0                      	| [$3302: ld   hl,$8F24]
	addq.b	#1,(a0)                         	| [$3305: inc  (hl)]
	rts                                    	| [$3306: ret]
l_3307:
	move.w	#0x001D,d1                      	| [$3307: ld   bc,$001D] 29
	movem.w	d1/d2,-(sp)                    	| [$330a: push bc]
	move.b	#0x03,d1                        	| [$330b: ld   b,$03]
l_330d:
	move.b	(a1)+,d0                         	| [$330d: ld   a,(de)]
	move.b	d0,(a0)+                         	| [$330e: ld   (hl),a]
	                           	| [$330f: inc  de]
	                           	| [$3310: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_330d                             	| [$3311: djnz $330D]
	movem.w	(sp)+,d1/d2                    	| [$3313: pop  bc]
	add.w	d1,a0                            	| [$3314: add  hl,bc]
	move.b	l_8F0B(a6),d0                   	| [$3315: ld   a,($8F0B)]
	addq.b	#1,d0                           	| [$3318: inc  a]
	move.b	d0,l_8F0B(a6)                   	| [$3319: ld   ($8F0B),a]
	cmp.b	#0x03,d0                         	| [$331c: cp   $03]
	jne	l_3307                             	| [$331e: jr   nz,$3307]
	CLEAR_XC_FLAGS                         	| [$3320: xor  a]
	clr.b	d0                               	| [$3320: xor  a]
	move.b	d0,l_8F0B(a6)                   	| [$3321: ld   ($8F0B),a]
	rts                                    	| [$3324: ret]

* < DE: input char data
* < HL: screen address
write_4x4_tile_block_3325:
	move.w	#0x0020,d1                      	| [$3325: ld   bc,$0020] to previous char 32
	move.b	(a1)+,d0                         	| [$3328: ld   a,(de)]
	jbsr	osd_w_videoram                         	| [$3329: ld   (hl),a] store video
	                           	| [$332a: inc  de]
	addq.w	#1,a0                           	| [$332b: inc  hl]
	move.b	(a1)+,d0                         	| [$332c: ld   a,(de)]
	jbsr	osd_w_videoram                         	| [$332d: ld   (hl),a] store video
	                           	| [$332e: inc  de]
	add.w	d1,a0                            	| [$332f: add  hl,bc]
	move.b	(a1)+,d0                         	| [$3330: ld   a,(de)]
	jbsr	osd_w_videoram                         	| [$3331: ld   (hl),a]
	                           	| [$3332: inc  de]
	subq.w	#1,a0                           	| [$3333: dec  hl]
	move.b	(a1),d0                         	| [$3334: ld   a,(de)]
	jbsr	osd_w_videoram                         	| [$3335: ld   (hl),a]
	rts                                    	| [$3336: ret]


l_3377:
	lea	l_8AE0(a6),a2                      	| [$3377: ld   ix,$8AE0]
	move.w	#0x0018,d3                      	| [$337b: ld   de,$0018] 24
	move.b	#0x0E,d1                        	| [$337e: ld   b,$0E]
l_3380:
	jbsr	exx                               	| [$3380: exx]
	jbsr	l_338a                            	| [$3381: call $338A]
	jbsr	exx                               	| [$3384: exx]
	add.w	d3,a2                            	| [$3385: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3380                             	| [$3387: djnz $3380]
	rts                                    	| [$3389: ret]
l_338a:
	move.b	(0x00,a2),d0                    	| [$338a: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$338d: or   (ix+$01)]
	ror.b	#1,d0                            	| [$3390: rrca]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3391: ret  nc] [...]
0:
	move.b	(0x02,a2),d0                    	| [$3392: ld   a,(ix+$02)]
	and.b	#0x1F,d0                         	| [$3395: and  $1F]
	cmp.b	#0x11,d0                         	| [$3397: cp   $11]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3399: ret  nc] [...]
0:
	jbsr	jump_from_table_below_0028                            	| [$339a: rst  $28]
	.long	l_33bd
	.long	l_3423
	.long	l_3536
	.long	update_walking_wolves_355b
	.long	wolf_updates_baloon_3865
	.long	wolf_descending_with_baloon_39af
	.long	l_3be3
	.long	l_3c92
	.long	l_3d18
	.long	wolf_baloon_exploding_3d5c
	.long	wolf_shot_by_arrow_falls_3d8f
	.long	l_3e69
	.long	l_3e9c
	.long	l_3f5c
	.long	l_3f72
	.long	l_3f7c
	.long	rom_check_3fe9


l_33bd:
	subq.b	#1,(0x11,a2)                    	| [$33bd: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$33c0: ret  nz] [...]
0:
	addq.b	#1,(0x02,a2)                    	| [$33c1: inc  (ix+$02)]
	btst.b	#0,(0x0b,a2)                    	| [$33c4: bit  0,(ix+$0b)]
	jne	l_33f7                             	| [$33c8: jr   nz,$33F7]
l_33ca:
	move.b	l_8D43(a6),d0                   	| [$33ca: ld   a,($8D43)]
	and.b	#0x0F,d0                         	| [$33cd: and  $0F]
	lea	table_3418,a0                      	| [$33cf: ld   hl,table_3418]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$33d2: rst  $20]
	move.b	d0,l_8D4B(a6)                   	| [$33d3: ld   ($8D4B),a]
	cmp.b	(0x06,a2),d0                     	| [$33d6: cp   (ix+$06)]
	jeq	l_33ec                             	| [$33d9: jr   z,$33EC]
	LOAD_ROM	0x3829,a1                          	| [$33dd: ld   de,$3829]
	clr.b	d0                               	| [$33db: ld   a,$00]
	jcc	l_33e6                             	| [$33e0: jr   nc,$33E6]
	addq.b	#1,d0                           	| [$33e2: inc  a]
l_33e3:
	LOAD_ROM	0x3838,a1                          	| [$33e3: ld   de,$3838]
l_33e6:
	move.b	d0,(0x08,a2)                    	| [$33e6: ld   (ix+$08),a]
l_33e9:
	jra	store_de_in_struct_381e                             	| [$33e9: jp   $381E]
l_33ec:
	move.b	(0x09,a2),d0                    	| [$33ec: ld   a,(ix+$09)]
	cmp.b	(0x05,a2),d0                     	| [$33ef: cp   (ix+$05)]
	jcs	l_33e3                             	| [$33f2: jr   c,$33E3]
	jra	l_3473                             	| [$33f4: jp   $3473]
l_33f7:
	lea	l_8D4C(a6),a0                      	| [$33f7: ld   hl,$8D4C]
	addq.b	#1,(a0)                         	| [$33fa: inc  (hl)]
	move.b	#0x06,d0                        	| [$33fb: ld   a,$06]
	move.b	d0,nb_wolves_8901(a6)           	| [$33fd: ld   (nb_wolves_8901),a]
	CLEAR_XC_FLAGS                         	| [$3400: xor  a]
	clr.b	d0                               	| [$3400: xor  a]
	move.b	d0,l_8D4A(a6)                   	| [$3401: ld   ($8D4A),a]
	move.b	d0,(0x0b,a2)                    	| [$3404: ld   (ix+$0b),a]
	jbsr	l_33ca                            	| [$3407: call $33CA]
	LOAD_ROM	0x3847,a1                          	| [$340a: ld   de,$3847]
	btst.b	#0,(0x08,a2)                    	| [$340d: bit  0,(ix+$08)]
	jeq	l_33e9                             	| [$3411: jr   z,$33E9]
	LOAD_ROM	0x3856,a1                          	| [$3413: ld   de,$3856]
	jra	l_33e9                             	| [$3416: jr   $33E9]
table_3418:
	.byte	0x08
	.byte	0x08
	.byte	0x08
	.byte	0x08
	.byte	0x08
	.byte	0x08
	.byte	0x08
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.byte	0x00
	.align	2
l_3423:
	jbsr	l_4006                            	| [$3423: call $4006]
	btst.b	#0,(0x01,a2)                    	| [$3426: bit  0,(ix+$01)]
	jeq	l_3437                             	| [$342a: jr   z,$3437]
	move.b	l_8F63(a6),d0                   	| [$342c: ld   a,($8F63)]
	                               	| [$342f: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$3430: ret  nz] [...]
0:
	clr.b	(0x01,a2)                        	| [$3431: ld   (ix+$01),$00]
	jra	l_3473                             	| [$3435: jr   $3473]
l_3437:
	move.b	(0x08,a2),d0                    	| [$3437: ld   a,(ix+$08)]
	                               	| [$343a: and  a]
	jne	l_34f2                             	| [$343b: jp   nz,$34F2]
l_343e:
	move.b	(0x05,a2),d0                    	| [$343e: ld   a,(ix+$05)]
	add.b	(0x09,a2),d0                     	| [$3441: add  a,(ix+$09)]
	jcc	l_3449                             	| [$3444: jr   nc,$3449]
	addq.b	#1,(0x06,a2)                    	| [$3446: inc  (ix+$06)]
l_3449:
	move.b	d0,(0x05,a2)                    	| [$3449: ld   (ix+$05),a]
	move.b	d0,d1                           	| [$344c: ld   b,a]
	move.b	l_8D4B(a6),d0                   	| [$344d: ld   a,($8D4B)]
	move.b	d0,d2                           	| [$3450: ld   c,a]
	move.b	(0x06,a2),d0                    	| [$3451: ld   a,(ix+$06)]
	and.b	#0x1F,d0                         	| [$3454: and  $1F]
	cmp.b	d2,d0                            	| [$3456: cp   c]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3457: ret  c] [...]
0:
	jeq	l_3464                             	| [$3458: jr   z,$3464]
	move.b	#0x01,(0x08,a2)                 	| [$345a: ld   (ix+$08),$01]
	LOAD_ROM	0x3838,a1                          	| [$345e: ld   de,$3838]
	jra	store_de_in_struct_381e                             	| [$3461: jp   $381E]
l_3464:
	tst.b	d0                               	| [$3464: and  a]
	jeq	l_34b0                             	| [$3465: jp   z,$34B0]
	move.b	in_game_sub_state_880A(a6),d0   	| [$3468: ld   a,(in_game_sub_state_880A)]
	cmp.b	#0x04,d0                         	| [$346b: cp   $04]
	beq.b	0f                               	| [...]
	rts                                    	| [$346d: ret  nz] [...]
0:
	move.b	(0x09,a2),d0                    	| [$346e: ld   a,(ix+$09)]
	cmp.b	d1,d0                            	| [$3471: cp   b]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3472: ret  c] [...]
0:
l_3473:
	move.b	l_8F63(a6),d0                   	| [$3473: ld   a,($8F63)]
	                               	| [$3476: and  a]
	jeq	l_347f                             	| [$3477: jp   z,$347F]
	move.b	#0x01,(0x01,a2)                 	| [$347a: ld   (ix+$01),$01]
	rts                                    	| [$347e: ret]
l_347f:
	clr.b	(0x01,a2)                        	| [$347f: ld   (ix+$01),$00]
	lea	l_8D43(a6),a0                      	| [$3483: ld   hl,$8D43]
	move.b	(a0),d0                         	| [$3486: ld   a,(hl)]
	cmp.b	#0x07,d0                         	| [$3487: cp   $07]
	jcc	l_34b0                             	| [$3489: jr   nc,$34B0]
	cmp.b	#0x0A,d0                         	| [$348b: cp   $0A]
	jcc	l_3490                             	| [$348d: jr   nc,$3490]
	addq.b	#1,(a0)                         	| [$348f: inc  (hl)]
l_3490:
	move.b	(a0),d0                         	| [$3490: ld   a,(hl)]
	lea	table_3418,a0                      	| [$3491: ld   hl,table_3418]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$3494: rst  $20]
	move.b	d0,l_8D4B(a6)                   	| [$3495: ld   ($8D4B),a]
	lea	l_86E3(a6),a0                      	| [$3498: ld   hl,$86E3]
	* bogus set to 0x40 not used
	move.w	#0x001F,d3                      	| [$349b: ld   de,$0040] 64
	move.b	#0xD8,(a0)+                      	| [$349e: ld   (hl),$D8]
	                           	| [$34a0: inc  hl]
	move.b	#0xD9,(a0)                      	| [$34a1: ld   (hl),$D9]
	                        	| [$34a3: ld   e,$1F]
	add.w	d3,a0                            	| [$34a5: add  hl,de]
	move.b	#0xDA,(a0)+                     	| [$34a6: ld   (hl),$DA]
	                           	| [$34a8: inc  hl]
	move.b	#0xDB,(a0)                      	| [$34a9: ld   (hl),$DB]
	move.b	#0x01,d0                        	| [$34ab: ld   a,$01]
	move.b	d0,l_8F63(a6)                   	| [$34ad: ld   ($8F63),a]
l_34b0:
	jbsr	l_3553                            	| [$34b0: call $3553]
	lea	l_8D40(a6),a0                      	| [$34b3: ld   hl,$8D40]
	subq.b	#1,(a0)                         	| [$34b6: dec  (hl)]
	lea	nb_wolves_8901(a6),a0              	| [$34b7: ld   hl,nb_wolves_8901]
	move.b	(a0),d0                         	| [$34ba: ld   a,(hl)]
	move.b	d0,d2                           	| [$34bb: ld   c,a]
	tst.b	d0                               	| [$34bc: and  a]
	jeq	l_34c0                             	| [$34bd: jr   z,$34C0]
	subq.b	#1,(a0)                         	| [$34bf: dec  (hl)]
l_34c0:
	move.b	in_game_sub_state_880A(a6),d0   	| [$34c0: ld   a,(in_game_sub_state_880A)]
	cmp.b	#0x04,d0                         	| [$34c3: cp   $04]
	jne	l_34c9                             	| [$34c5: jr   nz,$34C9]
	addq.w	#1,a0                           	| [$34c7: inc  l]
	addq.b	#1,(a0)                         	| [$34c8: inc  (hl)]
l_34c9:
	move.b	nb_wolves_8901(a6),d0           	| [$34c9: ld   a,(nb_wolves_8901)]
	move.b	d0,d1                           	| [$34cc: ld   b,a]
	lea	l_8743(a6),a0                      	| [$34cd: ld   hl,$8743]
	move.w	#0x0020,d3                      	| [$34d0: ld   de,$0020] 32
	cmp.b	#0x0A,d0                         	| [$34d3: cp   $0A]
	jcs	l_34e3                             	| [$34d5: jr   c,$34E3]
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$34d7: ld   a,($8F50)]
	                               	| [$34da: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$34db: ret  nz] [...]
0:
	subq	#1,d1
	and.w	#0xFF,d1
	CLEAR_XC_FLAGS                         	| [$34dc: xor  a]
	clr.b	d0                               	| [$34dc: xor  a]
	moveq	#1,d7
l_34dd:
	abcd	d7,d0                        	| [$34dd: add  a,$01]
	*daa
	dbf	d1,l_34dd                             	| [$34e0: djnz $34DD]
	move.b	d0,d1                           	| [$34e2: ld   b,a]
l_34e3:
	and.b	#0x0F,d0                         	| [$34e3: and  $0F]
	move.b	d0,(a0)                         	| [$34e5: ld   (hl),a]
	add.w	d3,a0                            	| [$34e6: add  hl,de]
	move.b	d1,d0                           	| [$34e7: ld   a,b]
	ror.b	#4,d0                            	| [$34e8: rrca] * 4
	and.b	#0x0F,d0                         	| [$34ec: and  $0F]
	                               	| [$34ee: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$34ef: ret  z] [...]
0:
	move.b	d0,(a0)                         	| [$34f0: ld   (hl),a]
	rts                                    	| [$34f1: ret]
l_34f2:
	move.b	(0x0a,a2),d0                    	| [$34f2: ld   a,(ix+$0a)]
	neg.b	d0                               	| [$34f5: neg]
	move.b	d0,d1                           	| [$34f7: ld   b,a]
	move.b	(0x05,a2),d0                    	| [$34f8: ld   a,(ix+$05)]
	cmp.b	d1,d0                            	| [$34fb: cp   b]
	jcc	l_3501                             	| [$34fc: jr   nc,$3501]
	subq.b	#1,(0x06,a2)                    	| [$34fe: dec  (ix+$06)]
l_3501:
	add.b	(0x0a,a2),d0                     	| [$3501: add  a,(ix+$0a)]
	move.b	d0,(0x05,a2)                    	| [$3504: ld   (ix+$05),a]
	move.b	d0,d1                           	| [$3507: ld   b,a]
	move.b	l_8D4B(a6),d0                   	| [$3508: ld   a,($8D4B)]
	move.b	d0,d2                           	| [$350b: ld   c,a]
	move.b	(0x06,a2),d0                    	| [$350c: ld   a,(ix+$06)]
	and.b	#0x1F,d0                         	| [$350f: and  $1F]
	cmp.b	d2,d0                            	| [$3511: cp   c]
	jeq	l_3524                             	| [$3512: jr   z,$3524]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3514: ret  nc] [...]
0:
	tst.b	d0                               	| [$3515: and  a]
	jeq	l_34b0                             	| [$3516: jp   z,$34B0]
	move.b	in_game_sub_state_880A(a6),d0   	| [$3519: ld   a,(in_game_sub_state_880A)]
	cmp.b	#0x04,d0                         	| [$351c: cp   $04]
	beq.b	0f                               	| [...]
	rts                                    	| [$351e: ret  nz] [...]
0:
	clr.b	(0x08,a2)                        	| [$351f: ld   (ix+$08),$00]
	rts                                    	| [$3523: ret]
l_3524:
	tst.b	d0                               	| [$3524: and  a]
	jeq	l_34b0                             	| [$3525: jp   z,$34B0]
	move.b	in_game_sub_state_880A(a6),d0   	| [$3528: ld   a,(in_game_sub_state_880A)]
	cmp.b	#0x04,d0                         	| [$352b: cp   $04]
	beq.b	0f                               	| [...]
	rts                                    	| [$352d: ret  nz] [...]
0:
	move.b	(0x09,a2),d0                    	| [$352e: ld   a,(ix+$09)]
	cmp.b	d1,d0                            	| [$3531: cp   b]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3532: ret  c] [...]
0:
	jra	l_3473                             	| [$3533: jp   $3473]
l_3536:
	jbsr	l_4006                            	| [$3536: call $4006]
	subq.b	#1,(0x11,a2)                    	| [$3539: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$353c: ret  nz] [...]
0:
	move.b	(0x07,a2),d0                    	| [$353d: ld   a,(ix+$07)]
	and.b	#0xF0,d0                         	| [$3540: and  $F0]
	jeq	l_3553                             	| [$3542: jr   z,$3553]
	lea	l_8D76(a6),a0                      	| [$3544: ld   hl,$8D76]
	addq.b	#1,(a0)                         	| [$3547: inc  (hl)]
	move.b	(a0),d0                         	| [$3548: ld   a,(hl)]
	cmp.b	#0x03,d0                         	| [$3549: cp   $03]
	jcs	l_3553                             	| [$354b: jr   c,$3553]
	subq.w	#1,a0                           	| [$354d: dec  l]
	CLEAR_XC_FLAGS                         	| [$354e: xor  a]
	clr.b	d0                               	| [$354e: xor  a]
	move.b	d0,(a0)                         	| [$354f: ld   (hl),a]
	move.b	d0,l_8F20(a6)                   	| [$3550: ld   ($8F20),a]
l_3553:
	CLEAR_XC_FLAGS                         	| [$3553: xor  a]
	clr.b	d0                               	| [$3553: xor  a]

	move.l	a2,-(sp)                        	| [$3554: push ix]
	move.l	(sp)+,a0                        	| [$3556: pop  hl]
	move.b	#0x17,d1                        	| [$3557: ld   b,$17]
	jbsr	fill_area_0010                            	| [$3559: rst  $10]
	rts                                    	| [$355a: ret]
update_walking_wolves_355b:
	jbsr	l_4006                            	| [$355b: call $4006]
	move.b	(0x08,a2),d0                    	| [$355e: ld   a,(ix+$08)]
	                               	| [$3561: and  a]
	jne	l_3757                             	| [$3562: jp   nz,$3757]
	move.b	(0x05,a2),d0                    	| [$3565: ld   a,(ix+$05)]
	add.b	(0x09,a2),d0                     	| [$3568: add  a,(ix+$09)]
	jcc	l_3570                             	| [$356b: jr   nc,$3570]
	addq.b	#1,(0x06,a2)                    	| [$356d: inc  (ix+$06)]
l_3570:
	move.b	d0,(0x05,a2)                    	| [$3570: ld   (ix+$05),a]
	move.b	d0,d1                           	| [$3573: ld   b,a]
	move.b	nb_wolves_8901(a6),d0           	| [$3574: ld   a,(nb_wolves_8901)]
	cmp.b	#0x03,d0                         	| [$3577: cp   $03]
	jcs	l_362d                             	| [$3579: jp   c,$362D]
l_357c:
	move.b	l_8D79(a6),d0                   	| [$357c: ld   a,($8D79)]
	                               	| [$357f: and  a]
	jne	l_35b4                             	| [$3580: jr   nz,$35B4]
	lea	table_35C7,a0                      	| [$3582: ld   hl,table_35C7]
	move.b	round_number_8907(a6),d0                   	| [$3585: ld   a,($8907)]
	and.b	#0x0F,d0                         	| [$3588: and  $0F]
	lsr.b	#1,d0                            	| [$358a: srl  a]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$358c: call $0C45]
	exg	a1,a0                              	| [$358f: ex   de,hl]
	move.b	character_animation_timer_8D41(a6),d0                   	| [$3590: ld   a,($8D41)]
	and.b	#0x07,d0                         	| [$3593: and  $07]
l_3595:
	jbsr	read_byte_a0_plus_d0_0020                            	| [$3595: rst  $20]
	move.b	d0,d2                           	| [$3596: ld   c,a]
	move.b	(0x06,a2),d0                    	| [$3597: ld   a,(ix+$06)]
	cmp.b	d2,d0                            	| [$359a: cp   c]
	jeq	l_3617                             	| [$359b: jp   z,$3617]
l_359e:
	cmp.b	#0x14,d0                         	| [$359e: cp   $14]
	bcc.b	0f                               	| [...]
	rts                                    	| [$35a0: ret  c] [...]
0:
	move.b	#0x01,(0x08,a2)                 	| [$35a1: ld   (ix+$08),$01]
	LOAD_ROM	0x3838,a1                          	| [$35a5: ld   de,$3838]
	btst.b	#1,(0x07,a2)                    	| [$35a8: bit  1,(ix+$07)]
	jeq	l_35b1                             	| [$35ac: jr   z,$35B1]
	LOAD_ROM	0x3856,a1                          	| [$35ae: ld   de,$3856]
l_35b1:
	jra	store_de_in_struct_381e                             	| [$35b1: jp   $381E]
l_35b4:
	btst.b	#2,(0x07,a2)                    	| [$35b4: bit  2,(ix+$07)]
	jeq	l_35c2                             	| [$35b8: jr   z,$35C2]
	LOAD_ROM_POINTER	rom_pointer_8D6F(a6),a0             	| [$35ba: ld   hl,($8D6F)]
	move.b	l_8D7B(a6),d0                   	| [$35bd: ld   a,($8D7B)]
	jra	l_3595                             	| [$35c0: jr   $3595]
l_35c2:
	move.b	(0x06,a2),d0                    	| [$35c2: ld   a,(ix+$06)]
	jra	l_359e                             	| [$35c5: jr   $359E]

table_35C7:
	.long	l_35d7
	.long	l_35df
	.long	l_35e7
	.long	l_35ef
	.long	l_35f7
	.long	l_35ff
	.long	l_3607
	.long	l_360f

* terrible spaghetti/overlapping instructions !!
* maybe not even reached
l_35d7:
	illegal
	add.w	d1,a0                      	| [$35d6: add  hl,bc]
	subq.b	#1,d1                           	| [$35d8: dec  c]
	*lea	l_0D09,a1                          	| [$35d9: ld   de,$0D09]
	*lea	l_0D09,a1                          	| [$35dc: ld   de,$0D09]
l_35df:
	add.w	d1,a0                            	| [$35df: add  hl,bc]
	ILLEGAL  | reached?
	*lea	l_110D,a1                          	| [$35e0: ld   de,$110D]
	subq.b	#1,d1                           	| [$35e3: dec  c]
	add.w	d1,a0                            	| [$35e4: add  hl,bc]
	subq.b	#1,d1                           	| [$35e5: dec  c]
	add.w	d1,a0                            	| [$35e6: add  hl,bc]
l_35e7:
	*lea	l_090D,a1                          	| [$35e7: ld   de,$090D]
	*lea	l_090D,a1                          	| [$35ea: ld   de,$090D]
	LOAD_ROM	0x080D,a1                          	| [$35ed: ld   de,$080D]
	jra		l_35f0
l_35ef:
	exg	d0,d7
l_35f0:
	subq.w	#1,d1                           	| [$35f0: dec  bc]
	ror.b	#1,d0                            	| [$35f1: rrca]
	move.b	d0,(a1)                         	| [$35f2: ld   (de),a]
	exg	d0,d7                              	| [$35f3: ex   af,af']
	move.b	d0,(a1)                         	| [$35f4: ld   (de),a]
	subq.w	#1,d1                           	| [$35f5: dec  bc]
	ror.b	#1,d0                            	| [$35f6: rrca]
l_35f7:
	move.b	d0,(a1)                         	| [$35f7: ld   (de),a]
	ror.b	#1,d0                            	| [$35f8: rrca]
	subq.w	#1,a4                           	| [$35f9: dec  bc]
	exg	d0,d7                              	| [$35fa: ex   af,af']
	ror.b	#1,d0                            	| [$35fb: rrca]
	move.b	d0,(a1)                         	| [$35fc: ld   (de),a]
	exg	d0,d7                              	| [$35fd: ex   af,af']
	subq.w	#1,d1                           	| [$35fe: dec  bc]
l_35ff:
	exg	d0,d7                              	| [$35ff: ex   af,af']
	subq.w	#1,d1                           	| [$3600: dec  bc]
	move.b	#0x11,d1                        	| [$3601: ld   c,$11]
	subq.w	#1,d1                           	| [$3603: dec  bc]
	exg	d0,d7                              	| [$3604: ex   af,af']
	LOAD_ROM	0x110E,a1                          	| [$3605: ld   de,$110E]
	jra	0f
l_3607:
	LOAD_ROM	0x0B0E,a1                          	| [$3607: ld   de,$0B0E]
0:
	exg	d0,d7                              	| [$360a: ex   af,af']
	move.b	#0x11,d1                        	| [$360b: ld   c,$11]
	subq.w	#1,d1                           	| [$360d: dec  bc]
	exg	d0,d7                              	| [$360e: ex   af,af']
l_360f:
	exg	d0,d7                              	| [$360f: ex   af,af']
	subq.w	#1,d1                           	| [$3610: dec  bc]
	ror.b	#1,d0                            	| [$3611: rrca]
	move.b	d0,(a1)                         	| [$3612: ld   (de),a]
	move.b	(a4),d0                         	| [$3613: ld   a,(bc)]
	LOAD_ROM	0x0D09,a1                          	| [$3614: ld   de,$0D09]
l_3617:
	move.b	d1,d0                           	| [$3617: ld   a,b]
	cmp.b	#0x20,d0                         	| [$3618: cp   $20]
	bcs.b	0f                               	| [...]
	rts                                    	| [$361a: ret  nc] [...]
0:
	jra	l_365d                             	| [$361b: jr   $365D]
l_361d:
	btst.b	#0,(0x08,a2)                    	| [$361d: bit  0,(ix+$08)]
	bne.b	0f                               	| [...]
	rts                                    	| [$3621: ret  z] [...]
0:
	jra	l_3775                             	| [$3622: jp   $3775]
l_3625:
	btst.b	#0,(0x08,a2)                    	| [$3625: bit  0,(ix+$08)]
	beq.b	0f                               	| [...]
	rts                                    	| [$3629: ret  nz] [...]
0:
	jra	l_357c                             	| [$362a: jp   $357C]
l_362d:
	move.b	(0x06,a2),d0                    	| [$362d: ld   a,(ix+$06)]
	cmp.b	#0x07,d0                         	| [$3630: cp   $07]
	jcs	l_361d                             	| [$3632: jr   c,$361D]
	cmp.b	#0x14,d0                         	| [$3634: cp   $14]
	jcc	l_3625                             	| [$3636: jr   nc,$3625]
	move.b	l_8D7D(a6),d0                   	| [$3638: ld   a,($8D7D)]
	cmp.b	#0x0E,d0                         	| [$363b: cp   $0E]
	jcs	l_3645                             	| [$363d: jr   c,$3645]
	move.b	(0x06,a2),d0                    	| [$363f: ld   a,(ix+$06)]
	cmp.b	#0x13,d0                         	| [$3642: cp   $13]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3644: ret  c] [...]
0:
l_3645:
	lea	l_8D6B(a6),a0                      	| [$3645: ld   hl,$8D6B]
	move.b	(a0),d0                         	| [$3648: ld   a,(hl)]
	                               	| [$3649: and  a]
	jeq	l_364e                             	| [$364a: jr   z,$364E]
	subq.b	#1,(a0)                         	| [$364c: dec  (hl)]
	rts                                    	| [$364d: ret]
l_364e:
	move.b	d1,d0                           	| [$364e: ld   a,b]
	cmp.b	#0x80,d0                         	| [$364f: cp   $80]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3651: ret  nc] [...]
0:
	exg	a1,a0                              	| [$3652: ex   de,hl]
	lea	table_368E(pc),a0                          	| [$3653: ld   hl,$368E]
	move.b	round_number_8907(a6),d0                   	| [$3656: ld   a,($8907)]
	and.b	#0x07,d0                         	| [$3659: and  $07]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$365b: rst  $20]
	move.b	d0,(a1)                         	| [$365c: ld   (de),a]
l_365d:
	btst.b	#0,(0x0b,a2)                    	| [$365d: bit  0,(ix+$0b)]
	jeq	l_3677                             	| [$3661: jr   z,$3677]
	lea	l_8AE2(a6),a0                      	| [$3663: ld   hl,$8AE2]
	move.w	#0x0018,d3                      	| [$3666: ld   de,$0018] 24
	move.b	d3,d2                           	| [$3669: ld   c,d]
	move.b	#0x06,d1                        	| [$366a: ld   b,$06]
l_366c:
	move.b	(a0),d0                         	| [$366c: ld   a,(hl)]
	cmp.b	#0x03,d0                         	| [$366d: cp   $03]
	jne	l_3672                             	| [$366f: jr   nz,$3672]
	addq.b	#1,d2                           	| [$3671: inc  c]
l_3672:
	add.w	d3,a0                            	| [$3672: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_366c                             	| [$3673: djnz $366C]
	subq.b	#1,d2                           	| [$3675: dec  c]
	beq.b	0f                               	| [...]
	rts                                    	| [$3676: ret  nz] [...]
0:
l_3677:
	lea	l_8B70(a6),a3                      	| [$3677: ld   iy,$8B70]
	move.w	#0x0018,d3                      	| [$367b: ld   de,$0018] 24
	move.b	#0x05,d1                        	| [$367e: ld   b,$05]
l_3680:
	move.b	(0x00,a3),d0                    	| [$3680: ld   a,(iy+$00)]
	or.b	(0x01,a3),d0                      	| [$3683: or   (iy+$01)]
	ror.b	#1,d0                            	| [$3686: rrca]
	jcc	l_3696                             	| [$3687: jr   nc,$3696]
	add.w	d3,a3                            	| [$3689: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3680                             	| [$368b: djnz $3680]
	rts                                    	| [$368d: ret]
table_368E:
	.byte	0x28,0x28 
	.byte	0x20,0x20 
	.byte	0x18,0x18 
	.byte	0x10,0x10 

l_3696:
	btst.b	#2,(0x07,a2)                    	| [$3696: bit  2,(ix+$07)]
	jeq	l_36af                             	| [$369a: jr   z,$36AF]
	lea	l_8D7B(a6),a0                      	| [$369c: ld   hl,$8D7B]
	addq.b	#1,(a0)                         	| [$369f: inc  (hl)]
	lea	l_8D79(a6),a0                      	| [$36a0: ld   hl,$8D79]
	move.b	(a0),d0                         	| [$36a3: ld   a,(hl)]
	                               	| [$36a4: and  a]
	jeq	l_36af                             	| [$36a5: jr   z,$36AF]
	subq.b	#1,(a0)                         	| [$36a7: dec  (hl)]
	lea	l_8D75(a6),a0                      	| [$36a8: ld   hl,$8D75]
	move.b	d0,(a0)                         	| [$36ab: ld   (hl),a]
l_36ac:
	addq.w	#1,a0                           	| [$36ac: inc  l]
	clr.b	(a0)                             	| [$36ad: ld   (hl),$00]
l_36af:
	lea	character_animation_timer_8D41(a6),a0                      	| [$36af: ld   hl,$8D41]
l_36b2:
	addq.b	#1,(a0)                         	| [$36b2: inc  (hl)]
	jne	l_36b6                             	| [$36b3: jr   nz,$36B6]
	addq.b	#1,(a0)                         	| [$36b5: inc  (hl)]
l_36b6:
	move.b	(a0),d2                         	| [$36b6: ld   c,(hl)]
	move.b	d2,(0x14,a2)                    	| [$36b7: ld   (ix+$14),c]
	LOAD_ROM	0x3988,a0                          	| [$36ba: ld   hl,$3988]
	btst.b	#1,(0x07,a2)                    	| [$36bd: bit  1,(ix+$07)]
	jeq	l_36c6                             	| [$36c1: jr   z,$36C6]
	LOAD_ROM	0x3994,a0                          	| [$36c3: ld   hl,$3994]
l_36c6:
	LOAD_D5D6_FROM_A0_ROM
	move.b	d6,(0x0c,a2)                    	| [$36c6: ld   (ix+$0c),l]
	move.b	d5,(0x0d,a2)                    	| [$36c9: ld   (ix+$0d),h]
	clr.b	(0x0e,a2)                        	| [$36cc: ld   (ix+$0e),$00]
	move.b	#0x28,(0x11,a2)                 	| [$36d0: ld   (ix+$11),$28]
	move.b	#0x04,(0x02,a2)                 	| [$36d4: ld   (ix+$02),$04]
	jbsr	l_36de                            	| [$36d8: call $36DE]
	jra	l_379d                             	| [$36db: jp   $379D]
l_36de:
	move.b	round_number_8907(a6),d0                   	| [$36de: ld   a,($8907)]
	cmp.b	#0x10,d0                         	| [$36e1: cp   $10]
	jcs	l_36e7                             	| [$36e3: jr   c,$36E7]
	move.b	#0x0E,d0                        	| [$36e5: ld   a,$0E]
l_36e7:
	move.b	d0,d1                           	| [$36e7: ld   b,a]
	move.b	l_8820(a6),d0                   	| [$36e8: ld   a,($8820)]
	add.b	d0,d0                            	| [$36eb: add  a,a]
	add.b	d1,d0                            	| [$36ec: add  a,b]
	LOAD_ROM	0x3737,a0                          	| [$36ed: ld   hl,$3737]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$36f0: rst  $20]
	btst.b	#0,(0x16,a2)                    	| [$36f1: bit  0,(ix+$16)]
	jeq	l_3703                             	| [$36f5: jr   z,$3703]
	subq.b	#1,d0                           	| [$36f7: dec  a]
	jeq	l_3710                             	| [$36f8: jr   z,$3710]
	btst.b	#0,(0x13,a2)                    	| [$36fa: bit  0,(ix+$13)]
	jeq	l_3703                             	| [$36fe: jr   z,$3703]
	subq.b	#1,d0                           	| [$3700: dec  a]
	jeq	l_3710                             	| [$3701: jr   z,$3710]
l_3703:
	move.b	d0,d1                           	| [$3703: ld   b,a]
	move.b	(0x06,a2),d0                    	| [$3704: ld   a,(ix+$06)]
	move.b	d1,d0                           	| [$3709: ld   a,b]
	cmp.b	#0x09,d0                         	| [$3707: cp   $09]
	jcc	l_3710                             	| [$370a: jr   nc,$3710]
	subq.b	#1,d0                           	| [$370c: dec  a]
	jeq	l_3710                             	| [$370d: jr   z,$3710]
	subq.b	#1,d0                           	| [$370f: dec  a]
l_3710:
	move.b	d0,d1                           	| [$3710: ld   b,a]
	move.b	nb_wolves_8901(a6),d0           	| [$3711: ld   a,(nb_wolves_8901)]
	move.b	d1,d0                           	| [$3716: ld   a,b]
	cmp.b	#0x04,d0                         	| [$3714: cp   $04]
	jcc	l_371c                             	| [$3717: jr   nc,$371C]
	move.b	#0x03,d0                        	| [$3719: ld   a,$03]
	add.b	d1,d0                            	| [$371b: add  a,b]
l_371c:
	LOAD_ROM	0x3727,a0                          	| [$371c: ld   hl,$3727]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$371f: rst  $20]
	or.b	(0x08,a2),d0                      	| [$3720: or   (ix+$08)]
	move.b	d0,(0x08,a2)                    	| [$3723: ld   (ix+$08),a]
	rts                                    	| [$3726: ret]

l_3757:
	move.b	(0x0a,a2),d0                    	| [$3757: ld   a,(ix+$0a)]
	neg.b	d0                               	| [$375a: neg]
	move.b	d0,d1                           	| [$375c: ld   b,a]
	move.b	(0x05,a2),d0                    	| [$375d: ld   a,(ix+$05)]
	cmp.b	d1,d0                            	| [$3760: cp   b]
	jcc	l_3766                             	| [$3761: jr   nc,$3766]
	subq.b	#1,(0x06,a2)                    	| [$3763: dec  (ix+$06)]
l_3766:
	add.b	(0x0a,a2),d0                     	| [$3766: add  a,(ix+$0a)]
	move.b	d0,(0x05,a2)                    	| [$3769: ld   (ix+$05),a]
	move.b	d0,d1                           	| [$376c: ld   b,a]
	move.b	nb_wolves_8901(a6),d0           	| [$376d: ld   a,(nb_wolves_8901)]
	cmp.b	#0x03,d0                         	| [$3770: cp   $03]
	jcs	l_362d                             	| [$3772: jp   c,$362D]
l_3775:
	move.b	in_game_sub_state_880A(a6),d0   	| [$3775: ld   a,(in_game_sub_state_880A)]
	cmp.b	#0x05,d0                         	| [$3778: cp   $05]
	jeq	l_3795                             	| [$377a: jr   z,$3795]
	move.b	(0x06,a2),d0                    	| [$377c: ld   a,(ix+$06)]
	cmp.b	#0x02,d0                         	| [$377f: cp   $02]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3781: ret  nc] [...]
0:
	clr.b	(0x08,a2)                        	| [$3782: ld   (ix+$08),$00]
	LOAD_ROM	0x3829,a1                          	| [$3786: ld   de,$3829]
	btst.b	#1,(0x07,a2)                    	| [$3789: bit  1,(ix+$07)]
	jeq	l_3792                             	| [$378d: jr   z,$3792]
	LOAD_ROM	0x3847,a1                          	| [$378f: ld   de,$3847]
l_3792:
	jra	store_de_in_struct_381e                             	| [$3792: jp   $381E]
l_3795:
	move.b	(0x06,a2),d0                    	| [$3795: ld   a,(ix+$06)]
	                               	| [$3798: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$3799: ret  nz] [...]
0:
	jra	l_3553                             	| [$379a: jp   $3553]
l_379d:
	move.b	#0x01,(0x00,a3)                 	| [$379d: ld   (iy+$00),$01]
	move.b	#0x04,(0x02,a3)                 	| [$37a1: ld   (iy+$02),$04]
	move.b	d2,(0x14,a3)                    	| [$37a5: ld   (iy+$14),c]
	CLEAR_XC_FLAGS                         	| [$37a8: xor  a]
	clr.b	d0                               	| [$37a8: xor  a]
	move.b	d0,(0x07,a3)                    	| [$37a9: ld   (iy+$07),a]
	move.b	d0,(0x0e,a3)                    	| [$37ac: ld   (iy+$0e),a]
	move.b	(0x05,a2),d0                    	| [$37af: ld   a,(ix+$05)]
	add.b	#0x80,d0                         	| [$37b2: add  a,$80]
	move.b	d0,(0x05,a3)                    	| [$37b4: ld   (iy+$05),a]
	move.b	(0x03,a2),d0                    	| [$37b7: ld   a,(ix+$03)]
	add.b	#0x80,d0                         	| [$37ba: add  a,$80]
	move.b	d0,(0x03,a3)                    	| [$37bc: ld   (iy+$03),a]
	move.b	(0x04,a2),d0                    	| [$37bf: ld   a,(ix+$04)]
	subq.b	#0x01,d0                        	| [$37c2: sub  $01]
	move.b	d0,(0x04,a3)                    	| [$37c4: ld   (iy+$04),a]
	move.b	(0x06,a2),d0                    	| [$37c7: ld   a,(ix+$06)]
	addq.b	#0x01,d0                        	| [$37ca: add  a,$01]
	move.b	d0,(0x06,a3)                    	| [$37cc: ld   (iy+$06),a]
	LOAD_ROM	0x38A5,a0                          	| [$37cf: ld   hl,$38A5]
	move.b	l_8820(a6),d0                   	| [$37d2: ld   a,($8820)]
	cmp.b	#0x07,d0                         	| [$37d5: cp   $07]
	jne	l_37dc                             	| [$37d7: jr   nz,$37DC]
	LOAD_ROM	0x38AD,a0                          	| [$37d9: ld   hl,$38AD]
l_37dc:
	move.b	play_variables_player_1_8900(a6),d0	| [$37dc: ld   a,(play_variables_player_1_8900)]
	cmp.b	#0x08,d0                         	| [$37df: cp   $08]
	jcs	l_37e5                             	| [$37e1: jr   c,$37E5]
	move.b	#0x07,d0                        	| [$37e3: ld   a,$07]
l_37e5:
	jbsr	read_byte_a0_plus_d0_0020                            	| [$37e5: rst  $20]
	move.b	round_number_8907(a6),d7                   	| [$37e6: ld   a,($8907)]
	move.b	(a0),d0                         	| [$37eb: ld   a,(hl)]
	and.b	#0x01,d7                         	| [$37e9: and  $01]
	jeq	l_37f0                             	| [$37ec: jr   z,$37F0]
	neg.b	d0                               	| [$37ee: neg]
l_37f0:
	move.b	d0,(0x0a,a3)                    	| [$37f0: ld   (iy+$0a),a]
	move.b	d0,(0x0a,a2)                    	| [$37f3: ld   (ix+$0a),a]
	LOAD_ROM	0x38B5,a0                          	| [$37f6: ld   hl,$38B5]
l_37f9:
	move.b	(0x07,a2),d0                    	| [$37f9: ld   a,(ix+$07)]
	and.b	#0xF0,d0                         	| [$37fc: and  $F0]
	ror.b	#4,d0                            	| [$37fe: rrca] * 4
	jbsr	load_16bit_rom_pointer_0c45                            	| [$3802: call $0C45]
	move.b	(0x0b,a2),d0                    	| [$3805: ld   a,(ix+$0b)]
	                               	| [$3808: and  a]
	jeq	l_380e                             	| [$3809: jr   z,$380E]
	LOAD_ROM	0x3952,a1                          	| [$380b: ld   de,$3952]
l_380e:
	LOAD_D3D4_FROM_A1_ROM
	move.b	d0,(0x0b,a3)                    	| [$380e: ld   (iy+$0b),a]
	move.b	d4,(0x0c,a3)                    	| [$3811: ld   (iy+$0c),e]
	move.b	d3,(0x0d,a3)                    	| [$3814: ld   (iy+$0d),d]
	move.b	#0x28,(0x11,a3)                 	| [$3817: ld   (iy+$11),$28]
l_381b:
	jra	l_0ee3                             	| [$381b: jp   $0EE3]
	
* < A1: ROM address to store
* < A2: structure pointer
store_de_in_struct_381e:
	move.l	a1,d3
	sub.l	#rom_base,d3
	LOAD_D3D4_FROM_D3_16
	move.b	d4,(0x0c,a2)                    	| [$381e: ld   (ix+$0c),e]
	move.b	d3,(0x0d,a2)                    	| [$3821: ld   (ix+$0d),d]
	clr.b	(0x0e,a2)                        	| [$3824: ld   (ix+$0e),$00]
	rts                                    	| [$3828: ret]
	
wolf_updates_baloon_3865:
	jbsr	l_4006                            	| [$3865: call $4006]
	subq.b	#1,(0x11,a2)                    	| [$3868: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$386b: ret  nz] [...]
0:
	addq.b	#1,(0x02,a2)                    	| [$386c: inc  (ix+$02)]
	bclr.b	#0,(0x08,a2)                    	| [$386f: res  0,(ix+$08)]

	move.l	a2,-(sp)                        	| [$3873: push ix]
	move.l	(sp)+,a0                        	| [$3875: pop  hl]
	move.b	d5,d0                           	| [$3876: ld   a,h]
	cmp.b	#0x8B,d0                         	| [$3877: cp   $8B]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3879: ret  c] [...]
0:
	move.b	d6,d0                           	| [$387a: ld   a,l]
	cmp.b	#0x70,d0                         	| [$387b: cp   $70]
	bcc.b	0f                               	| [...]
	rts                                    	| [$387d: ret  c] [...]
0:
	subq.b	#1,(0x04,a2)                    	| [$387e: dec  (ix+$04)]
	subq.b	#1,(0x06,a2)                    	| [$3881: dec  (ix+$06)]
	move.b	l_8A5F(a6),d0                   	| [$3884: ld   a,($8A5F)]
	                               	| [$3887: and  a]
	                               	| [...]
	rts                                    	| [$3888: ret  nz] [...]

* another ROM integrity check,
							
								| [$3889: ld   hl,$4282]
									| [$388c: ld   c,$00]
								| [$388e: ld   e,c]
							
								| [$388f: ld   a,(hl)]
								| [$3890: dec  hl]
									| [$3891: add  a,c]
								| [$3892: ld   c,a]
							
								| [$3893: jr   nc,$3896]
								| [$3895: inc  e]
							
								| [$3896: ld   a,$1A]
									| [$3898: cp   (hl)]
								| [$3899: jr   nz,$388F]
								| [$389b: ld   a,e]
									| [$389c: add  a,c]
									| [$389d: and  $9E]
									| [...]
								| [$389f: ret  z] [...]
							
								| [$38a0: ld   hl,checksum_failed_8EF0]
								| [$38a3: inc  (hl)]
								| [$38a4: ret]

wolf_descending_with_baloon_39af:
	jbsr	l_4006                            	| [$39af: call $4006]
	                 	| [$39b2: ld   a,($8907)]
	                  	| [$39b5: and  $01]
	                	| [$39b7: jp   z,$3B87] anti-cheat?
l_39ba:
	move.b	(0x0a,a2),d0                    	| [$39ba: ld   a,(ix+$0a)]
	neg.b	d0                               	| [$39bd: neg]
	move.b	d0,d1                           	| [$39bf: ld   b,a]
	move.b	(0x03,a2),d0                    	| [$39c0: ld   a,(ix+$03)]
	cmp.b	d1,d0                            	| [$39c3: cp   b]
	jcc	l_39c9                             	| [$39c4: jr   nc,$39C9]
	subq.b	#1,(0x04,a2)                    	| [$39c6: dec  (ix+$04)]
l_39c9:
	add.b	(0x0a,a2),d0                     	| [$39c9: add  a,(ix+$0a)]
	move.b	d0,(0x03,a2)                    	| [$39cc: ld   (ix+$03),a]
	move.b	(0x04,a2),d1                    	| [$39cf: ld   b,(ix+$04)]
	move.b	(0x07,a2),d0                    	| [$39d2: ld   a,(ix+$07)]
	                               	| [$39d5: and  a]
	jeq	l_3a51                             	| [$39d6: jr   z,$3A51]
	move.b	d1,d0                           	| [$39d8: ld   a,b]
	cmp.b	#0x04,d0                         	| [$39d9: cp   $04]
	jcs	l_3a48                             	| [$39db: jr   c,$3A48]
	cmp.b	#0x10,d0                         	| [$39dd: cp   $10]
	bcc.b	0f                               	| [...]
	rts                                    	| [$39df: ret  c] [...]
0:
l_39e0:
	lea	l_8D7D(a6),a0                      	| [$39e0: ld   hl,$8D7D]
	move.b	(a0),d0                         	| [$39e3: ld   a,(hl)]
	cmp.b	#0x0E,d0                         	| [$39e4: cp   $0E]
	jcc	l_3a08                             	| [$39e6: jr   nc,$3A08]
	move.b	round_number_8907(a6),d0                   	| [$39e8: ld   a,($8907)]
	cmp.b	#0x06,d0                         	| [$39eb: cp   $06]
	jcc	l_39fb                             	| [$39ed: jr   nc,$39FB]
	move.b	nb_lives_8908(a6),d0            	| [$39ef: ld   a,(nb_lives_8908)]
	cmp.b	#0x03,d0                         	| [$39f2: cp   $03]
	jcs	l_39fb                             	| [$39f4: jr   c,$39FB]
	move.b	(a0),d0                         	| [$39f6: ld   a,(hl)]
	cmp.b	#0x08,d0                         	| [$39f7: cp   $08]
	jcc	l_3a08                             	| [$39f9: jr   nc,$3A08]
l_39fb:
	move.b	l_8820(a6),d0                   	| [$39fb: ld   a,($8820)]
	cmp.b	#0x07,d0                         	| [$39fe: cp   $07]
	jeq	l_3a08                             	| [$3a00: jr   z,$3A08]
	move.b	(0x06,a2),d0                    	| [$3a02: ld   a,(ix+$06)]
	cmp.b	#0x10,d0                         	| [$3a05: cp   $10]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3a07: ret  nc] [...]
0:
l_3a08:
	move.b	l_8D75(a6),d0                   	| [$3a08: ld   a,($8D75)]
	                               	| [$3a0b: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$3a0c: ret  nz] [...]
0:
	move.b	(0x08,a2),d0                    	| [$3a0d: ld   a,(ix+$08)]
	and.b	#0xF0,d0                         	| [$3a10: and  $F0]
	bne.b	0f                               	| [...]
	rts                                    	| [$3a12: ret  z] [...]
0:
	move.b	(0x15,a2),d0                    	| [$3a13: ld   a,(ix+$15)]
	                               	| [$3a16: and  a]
	jeq	l_3a1d                             	| [$3a17: jr   z,$3A1D]
	subq.b	#1,(0x15,a2)                    	| [$3a19: dec  (ix+$15)]
	rts                                    	| [$3a1c: ret]
l_3a1d:
	move.b	l_8842(a6),d0                   	| [$3a1d: ld   a,($8842)]
	move.b	d0,d2                           	| [$3a20: ld   c,a]
	move.b	cabinet_upright_881F(a6),d0                   	| [$3a21: ld   a,($881F)]
	move.b	d0,d1                           	| [$3a24: ld   b,a]
	                               	| [$3a25: and  a]
	move.b	d2,d0                           	| [$3a26: ld   a,c]
	                             	| [$3a27: jr   nz,$3A2B]
	                               	| [$3a29: neg]
l_3a2b:
	ror.b	#3,d0                            	| [$3a2b: rrca]
	                            	| [$3a2c: rrca] * 2
	and.b	#0x1F,d0                         	| [$3a2e: and  $1F]
	move.b	d0,d2                           	| [$3a30: ld   c,a]
	move.b	d1,d0                           	| [$3a31: ld   a,b]
	                               	| [$3a32: and  a]
	jne	l_3a37                             	| [$3a33: jr   nz,$3A37]
	subq.b	#2,d2                           	| [$3a35: dec  c]
l_3a37:
	move.b	round_number_8907(a6),d7                   	| [$3a37: ld   a,($8907)]
	move.b	d7,d1                           	| [$3a3a: ld   b,a]
	move.b	d2,d0                           	| [$3a3d: ld   a,c]
	btst.b	#0,d7                           	| [$3a3b: bit  0,a]
	jeq	l_3a42                             	| [$3a3e: jr   z,$3A42]
	addq.b	#0x04,d0                        	| [$3a40: add  a,$04]
l_3a42:
	cmp.b	(0x04,a2),d0                     	| [$3a42: cp   (ix+$04)]
	jeq	l_3a6c                             	| [$3a45: jr   z,$3A6C]
	rts                                    	| [$3a47: ret]
l_3a48:
	clr.b	(0x02,a2)                        	| [$3a48: ld   (ix+$02),$00]
	move.b	#0x20,(0x11,a2)                 	| [$3a4c: ld   (ix+$11),$20]
	rts                                    	| [$3a50: ret]
l_3a51:
	move.b	d1,d0                           	| [$3a51: ld   a,b]
	cmp.b	#0x02,d0                         	| [$3a52: cp   $02]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3a54: ret  nc] [...]
0:
	LOAD_ROM	0x3BD1,a1                          	| [$3a55: ld   de,$3BD1]
	jbsr	store_de_in_struct_381e                            	| [$3a58: call $381E]
	move.b	#0x02,(0x02,a2)                 	| [$3a5b: ld   (ix+$02),$02]
	move.b	#0x28,(0x11,a2)                 	| [$3a5f: ld   (ix+$11),$28]
	rts                                    	| [$3a63: ret]
											| [...]
											| [$3a64: djnz $3A7B]
											| [$3a66: dec  c]
										
											| [$3a67: dec  de]
											| [$3a68: rrca]
											| [$3a69: ld   de,$1C13]
l_3a6c:
	lea	l_8D42(a6),a0                      	| [$3a6c: ld   hl,$8D42]
	addq.b	#1,(a0)                         	| [$3a6f: inc  (hl)]
	lea	l_8BE8(a6),a3                      	| [$3a70: ld   iy,$8BE8]
	move.b	#0x03,d1                        	| [$3a74: ld   b,$03]
	move.w	#0x0018,d3                      	| [$3a76: ld   de,$0018] 24
l_3a79:
	move.b	(0x00,a3),d0                    	| [$3a79: ld   a,(iy+$00)]
	or.b	(0x01,a3),d0                      	| [$3a7c: or   (iy+$01)]
	ror.b	#1,d0                            	| [$3a7f: rrca]
	jcc	l_3a87                             	| [$3a80: jr   nc,$3A87]
	add.w	d3,a3                            	| [$3a82: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3a79                             	| [$3a84: djnz $3A79]
	rts                                    	| [$3a86: ret]
l_3a87:
	move.b	(0x06,a2),d0                    	| [$3a87: ld   a,(ix+$06)]
	subq.b	#0x06,d0                        	| [$3a8a: sub  $06]
	lsr.b	#1,d0                            	| [$3a8c: srl  a]
	and.b	#0x07,d0                         	| [$3a8e: and  $07]
	move.b	d0,d2                           	| [$3a90: ld   c,a]
	LOAD_ROM	0x3B57,a0                          	| [$3a91: ld   hl,$3B57]
	move.b	round_number_8907(a6),d0                   	| [$3a94: ld   a,($8907)]
	btst.b	#0,d0                           	| [$3a97: bit  0,a]
	jeq	l_3a9e                             	| [$3a99: jr   z,$3A9E]
	LOAD_ROM	0x3B47,a0                          	| [$3a9b: ld   hl,$3B47]
l_3a9e:
	move.b	d2,d0                           	| [$3a9e: ld   a,c]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$3a9f: call $0C45]
	move.b	(a1)+,d0                         	| [$3aa2: ld   a,(de)]
	move.b	d0,(0x12,a3)                    	| [$3aa3: ld   (iy+$12),a]
	                           	| [$3aa6: inc  de]
	move.b	(a1),d0                         	| [$3aa7: ld   a,(de)]
	move.b	d0,(0x13,a3)                    	| [$3aa8: ld   (iy+$13),a]
	bset.b	#0,(0x08,a3)                    	| [$3aab: set  0,(iy+$08)]
	LOAD_ROM	0x396A,a1                          	| [$3aaf: ld   de,$396A]
	btst.b	#1,(0x07,a2)                    	| [$3ab2: bit  1,(ix+$07)]
	jeq	l_3abb                             	| [$3ab6: jr   z,$3ABB]
	LOAD_ROM	0x3979,a1                          	| [$3ab8: ld   de,$3979]
l_3abb:
	move.b	(0x16,a2),d0                    	| [$3abb: ld   a,(ix+$16)]
	and.b	#0x30,d0                         	| [$3abe: and  $30]
	cmp.b	#0x30,d0                         	| [$3ac0: cp   $30]
	jne	l_3ac7                             	| [$3ac2: jr   nz,$3AC7]
	LOAD_ROM	0x39A0,a1                          	| [$3ac4: ld   de,$39A0]
l_3ac7:
	jbsr	store_de_in_struct_381e                            	| [$3ac7: call $381E]
	move.b	(0x08,a2),d0                    	| [$3aca: ld   a,(ix+$08)]
	sub.b	#0x10,d0                         	| [$3acd: sub  $10]
	move.b	d0,(0x08,a2)                    	| [$3acf: ld   (ix+$08),a]
	move.b	#0x01,(0x00,a3)                 	| [$3ad2: ld   (iy+$00),$01]
	move.b	#0x0B,(0x02,a3)                 	| [$3ad6: ld   (iy+$02),$0B]
	move.b	#0x01,(0x07,a3)                 	| [$3ada: ld   (iy+$07),$01]
	LOAD_ROM	0x3BDD,a1                          	| [$3ae2: ld   de,$3BDD]
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$3ade: ld   a,($8F50)]
	                               	| [$3ae1: and  a]
	jeq	l_3af4                             	| [$3ae5: jr   z,$3AF4]
	LOAD_ROM	0x433B,a1                          	| [$3ae7: ld   de,$433B]
	move.b	round_number_8907(a6),d0                   	| [$3aea: ld   a,($8907)]
	btst.b	#2,d0                           	| [$3aed: bit  2,a]
	jeq	l_3af4                             	| [$3aef: jr   z,$3AF4]
	LOAD_ROM	0x4341,a1                          	| [$3af1: ld   de,$4341]
l_3af4:
	LOAD_D3D4_FROM_A1_ROM
	move.b	d4,(0x0c,a3)                    	| [$3af4: ld   (iy+$0c),e]
	move.b	d3,(0x0d,a3)                    	| [$3af7: ld   (iy+$0d),d]
	clr.b	(0x0e,a3)                        	| [$3afa: ld   (iy+$0e),$00]
	clr.b	(0x16,a3)                        	| [$3afe: ld   (iy+$16),$00]
	move.b	#0x13,(0x11,a3)                 	| [$3b02: ld   (iy+$11),$13]

	move.l	a2,a0                        	| [$3b06: push ix]
	LOAD_D5D6_FROM_A0_RAM                        	| [$3b08: pop  hl]
	move.b	D6,(0x14,a3)                    	| [$3b09: ld   (iy+$14),l]
	move.b	D5,(0x15,a3)                    	| [$3b0c: ld   (iy+$15),h]
	lea	l_8D6C(a6),a0                      	| [$3b0f: ld   hl,$8D6C]
	addq.b	#1,(a0)                         	| [$3b12: inc  (hl)]
	move.b	(a0),d0                         	| [$3b13: ld   a,(hl)]
	and.b	#0x07,d0                         	| [$3b14: and  $07]
	move.b	d0,d3                           	| [$3b16: ld   d,a]
	LOAD_ROM	0x3B37,a0                          	| [$3b17: ld   hl,$3B37]
	move.b	round_number_8907(a6),d0                   	| [$3b1a: ld   a,($8907)]
	btst.b	#0,d0                           	| [$3b1d: bit  0,a]
	jeq	l_3b24                             	| [$3b1f: jr   z,$3B24]
	LOAD_ROM	0x3B3F,a0                          	| [$3b21: ld   hl,$3B3F]
l_3b24:
	move.b	d3,d0                           	| [$3b24: ld   a,d]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$3b25: rst  $20]
	move.b	d0,(0x15,a2)                    	| [$3b26: ld   (ix+$15),a]
	rts                                    	| [$3b29: ret]

	* unreached?
	ror.b	#1,d1                            	| [$3b88: rrc  b]
	move.b	(a0),d1                         	| [$3b8a: ld   b,(hl)]
	jne	l_39ba                             	| [$3b8b: jp   nz,$39BA]
	move.b	(0x03,a2),d0                    	| [$3b8e: ld   a,(ix+$03)]
	add.b	(0x0a,a2),d0                     	| [$3b91: add  a,(ix+$0a)]
	jcc	l_3b99                             	| [$3b94: jr   nc,$3B99]
	addq.b	#1,(0x04,a2)                    	| [$3b96: inc  (ix+$04)]
l_3b99:
	move.b	d0,(0x03,a2)                    	| [$3b99: ld   (ix+$03),a]
	move.b	(0x04,a2),d1                    	| [$3b9c: ld   b,(ix+$04)]
	move.b	(0x07,a2),d0                    	| [$3b9f: ld   a,(ix+$07)]
	                               	| [$3ba2: and  a]
	jeq	l_3bca                             	| [$3ba3: jp   z,$3BCA]
	move.b	d1,d0                           	| [$3ba6: ld   a,b]
	cmp.b	#0x1D,d0                         	| [$3ba7: cp   $1D]
	jcc	l_3bae                             	| [$3ba9: jr   nc,$3BAE]
	jra	l_39e0                             	| [$3bab: jp   $39E0]
l_3bae:
	addq.b	#1,(0x02,a2)                    	| [$3bae: inc  (ix+$02)]
	CLEAR_XC_FLAGS                         	| [$3bb1: xor  a]
	clr.b	d0                               	| [$3bb1: xor  a]
	move.b	d0,(0x00,a2)                    	| [$3bb2: ld   (ix+$00),a]
	move.b	#0x01,(0x01,a2)                 	| [$3bb5: ld   (ix+$01),$01]
	bclr.b	#0,(0x08,a2)                    	| [$3bb9: res  0,(ix+$08)]
	move.b	#0x20,(0x09,a2)                 	| [$3bbd: ld   (ix+$09),$20]
	move.b	d0,(0x14,a2)                    	| [$3bc1: ld   (ix+$14),a]
	LOAD_ROM	0x3829,a1                          	| [$3bc4: ld   de,$3829]
	jra	store_de_in_struct_381e                             	| [$3bc7: jp   $381E]
l_3bca:
	move.b	d1,d0                           	| [$3bca: ld   a,b]
	cmp.b	#0x1B,d0                         	| [$3bcb: cp   $1B]
	bcs.b	0f                               	| [...]
	jbsr	l_3553                            	| [$3bcd: call nc,$3553]
0:
	rts                                    	| [$3bd0: ret]

l_3be3:
	jbsr	l_4006                            	| [$3be3: call $4006]
	btst.b	#0,(0x08,a2)                    	| [$3be6: bit  0,(ix+$08)]
	jne	l_3c10                             	| [$3bea: jr   nz,$3C10]
	move.b	(0x05,a2),d0                    	| [$3bec: ld   a,(ix+$05)]
	add.b	(0x09,a2),d0                     	| [$3bef: add  a,(ix+$09)]
	jcc	l_3bf7                             	| [$3bf2: jr   nc,$3BF7]
	addq.b	#1,(0x06,a2)                    	| [$3bf4: inc  (ix+$06)]
l_3bf7:
	move.b	d0,(0x05,a2)                    	| [$3bf7: ld   (ix+$05),a]
	move.b	d0,d1                           	| [$3bfa: ld   b,a]
	move.b	(0x06,a2),d0                    	| [$3bfb: ld   a,(ix+$06)]
	cmp.b	#0x1F,d0                         	| [$3bfe: cp   $1F]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3c00: ret  c] [...]
0:
	jra	l_3c3b                             	| [$3c01: jr   $3C3B]
	addq.b	#1,(0x02,a2)                    	| [$3c03: inc  (ix+$02)]
	move.b	#0x20,(0x11,a2)                 	| [$3c06: ld   (ix+$11),$20]
	move.b	#0x28,d0                        	| [$3c0a: ld   a,$28]
	move.b	d0,l_8D5E(a6)                   	| [$3c0c: ld   ($8D5E),a]
	rts                                    	| [$3c0f: ret]
l_3c10:
	move.b	(0x0a,a2),d0                    	| [$3c10: ld   a,(ix+$0a)]
	neg.b	d0                               	| [$3c13: neg]
	move.b	d0,d1                           	| [$3c15: ld   b,a]
	move.b	(0x05,a2),d0                    	| [$3c16: ld   a,(ix+$05)]
	cmp.b	d1,d0                            	| [$3c19: cp   b]
	jcc	l_3c1f                             	| [$3c1a: jr   nc,$3C1F]
	subq.b	#1,(0x06,a2)                    	| [$3c1c: dec  (ix+$06)]
l_3c1f:
	add.b	(0x0a,a2),d0                     	| [$3c1f: add  a,(ix+$0a)]
	move.b	d0,(0x05,a2)                    	| [$3c22: ld   (ix+$05),a]
	move.b	d0,d1                           	| [$3c25: ld   b,a]
	move.b	(0x14,a2),d6                    	| [$3c26: ld   l,(ix+$14)]
	move.b	(0x15,a2),d5                    	| [$3c29: ld   h,(ix+$15)]
	LOAD_A0_FROM_D5D6
	move.l	a0,a3                        	| [$3c2c: push hl]
	                        	| [$3c2d: pop  iy]
	move.b	d0,(0x05,a3)                    	| [$3c2f: ld   (iy+$05),a]
	move.b	(0x06,a2),d0                    	| [$3c32: ld   a,(ix+$06)]
	move.b	d0,(0x06,a3)                    	| [$3c35: ld   (iy+$06),a]
	and.b	#0x1F,d0                         	| [$3c38: and  $1F]
	beq.b	0f                               	| [...]
	rts                                    	| [$3c3a: ret  nz] [...]
0:
l_3c3b:
	lea	l_8903(a6),a0                      	| [$3c3b: ld   hl,$8903]
	addq.b	#1,(a0)                         	| [$3c3e: inc  (hl)]
	lea	l_8D40(a6),a0                      	| [$3c3f: ld   hl,$8D40]
	subq.b	#1,(a0)                         	| [$3c42: dec  (hl)]
	lea	l_897d(a6),a0                        	| [$3c43: ld   l,$7D]
	addq.b	#1,(a0)                         	| [$3c45: inc  (hl)]
	move.b	(0x07,a2),d0                    	| [$3c46: ld   a,(ix+$07)]
	and.b	#0xF0,d0                         	| [$3c49: and  $F0]
	jeq	l_3553                             	| [$3c4b: jp   z,$3553]
	jbsr	l_3553                            	| [$3c4e: call $3553]
	move.b	l_8D7E(a6),d0                   	| [$3c51: ld   a,($8D7E)]
	                               	| [$3c54: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$3c55: ret  nz] [...]
0:
	lea	l_8D76(a6),a0                      	| [$3c56: ld   hl,$8D76]
	addq.b	#1,(a0)                         	| [$3c59: inc  (hl)]
	move.b	(a0),d0                         	| [$3c5a: ld   a,(hl)]
	cmp.b	#0x02,d0                         	| [$3c5b: cp   $02]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3c5d: ret  c] [...]
0:
	subq.w	#1,a0                           	| [$3c5e: dec  l]
	clr.b	d0                               	| [$3c5f: xor  a]
	move.b	d0,(a0)                         	| [$3c60: ld   (hl),a]
	move.b	d0,l_8F20(a6)                   	| [$3c61: ld   ($8F20),a]
	move.b	d0,l_8D6D(a6)                   	| [$3c64: ld   ($8D6D),a]
	move.b	d0,l_8D6E(a6)                   	| [$3c67: ld   ($8D6E),a]
	move.b	#0x02,d0                        	| [$3c6a: ld   a,$02]
	move.b	d0,l_8D07(a6)                   	| [$3c6c: ld   ($8D07),a]
	move.b	d0,l_8D7E(a6)                   	| [$3c6f: ld   ($8D7E),a]
									| [$3c72: ld   a,($881F)]
	                               	| [$3c75: and  a]
	                               	| [...]
	rts                                    	| [$3c76: ret  nz] [...]
0:
					
							| [$3c77: ld   a,(nb_wolves_8901)]
								| [$3c7a: cp   $10]
								| [...]
							| [$3c7c: ret  nc] [...]
					
							| [$3c7d: ld   de,$01D5]
							| [$3c80: ld   bc,$0012] 18
					
							| [$3c83: ld   a,(de)]
							| [$3c84: dec  de]
								| [$3c85: add  a,b]
							| [$3c86: ld   b,a]
							| [$3c87: dec  c]
							| [$3c88: jr   nz,$3C83]
								| [$3c8a: cp   $55]
								| [...]
							| [$3c8c: ret  z] [...]
					
							| [$3c8d: ld   hl,$89ED]
							| [$3c90: inc  (hl)]
							| [$3c91: ret]
l_3c92:
	jbsr	l_4006                            	| [$3c92: call $4006]
	subq.b	#1,(0x11,a2)                    	| [$3c95: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$3c98: ret  nz] [...]
0:
	lea	l_8C30(a6),a3                      	| [$3c99: ld   iy,$8C30]
	move.w	#0x0018,d3                      	| [$3c9d: ld   de,$0018] 24
	move.b	#0x04,d1                        	| [$3ca0: ld   b,$04]
l_3ca2:
	jbsr	l_3cae                            	| [$3ca2: call $3CAE]
	add.w	d3,a3                            	| [$3ca5: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3ca2                             	| [$3ca7: djnz $3CA2]
	move.b	#0x10,(0x11,a2)                 	| [$3ca9: ld   (ix+$11),$10]
	rts                                    	| [$3cad: ret]
l_3cae:
	move.b	(0x00,a3),d0                    	| [$3cae: ld   a,(iy+$00)]
	or.b	(0x01,a3),d0                      	| [$3cb1: or   (iy+$01)]
	ror.b	#1,d0                            	| [$3cb4: rrca]
	beq.b	0f                               	| [...]
	rts                                    	| [$3cb5: ret  nz] [...]
0:
	move.b	#0x01,(0x01,a3)                 	| [$3cb6: ld   (iy+$01),$01]
	CLEAR_XC_FLAGS                         	| [$3cba: xor  a]
	clr.b	d0                               	| [$3cba: xor  a]
	move.b	#0x10,(0x02,a3)                 	| [$3cbb: ld   (iy+$02),$10]
	LOAD_ROM	0x3D0F,a0                          	| [$3cbf: ld   hl,$3D0F]
	LOAD_D5D6_FROM_A0_ROM
	move.b	d6,(0x0c,a3)                    	| [$3cc2: ld   (iy+$0c),l]
	move.b	d5,(0x0d,a3)                    	| [$3cc5: ld   (iy+$0d),h]
	move.b	d0,(0x0e,a3)                    	| [$3cc8: ld   (iy+$0e),a]
	move.b	#0x06,(0x02,a2)                 	| [$3ccb: ld   (ix+$02),$06]
	move.b	#0x01,(0x08,a2)                 	| [$3ccf: ld   (ix+$08),$01]
	move.b	#0xE8,(0x0a,a2)                 	| [$3cd3: ld   (ix+$0a),$E8]
	LOAD_ROM	0x3838,a1                          	| [$3cd7: ld   de,$3838]
	jbsr	store_de_in_struct_381e                            	| [$3cda: call $381E]
	move.b	(0x04,a2),d0                    	| [$3cdd: ld   a,(ix+$04)]
	subq.b	#0x01,d0                        	| [$3ce0: sub  $01]
	move.b	d0,(0x04,a3)                    	| [$3ce2: ld   (iy+$04),a]
	move.b	(0x03,a2),d0                    	| [$3ce5: ld   a,(ix+$03)]
	move.b	d0,(0x03,a3)                    	| [$3ce8: ld   (iy+$03),a]
	move.b	(0x06,a2),d0                    	| [$3ceb: ld   a,(ix+$06)]
	addq.b	#0x01,d0                        	| [$3cee: add  a,$01]
	move.b	d0,(0x06,a3)                    	| [$3cf0: ld   (iy+$06),a]
	move.b	(0x05,a2),d0                    	| [$3cf3: ld   a,(ix+$05)]
	move.b	d0,(0x05,a3)                    	| [$3cf6: ld   (iy+$05),a]
	move.b	#0x01,(0x08,a3)                 	| [$3cf9: ld   (iy+$08),$01]
	move.b	#0xE8,(0x0a,a3)                 	| [$3cfd: ld   (iy+$0a),$E8]
	jbsr	l_403c                            	| [$3d01: call $403C]

	move.l	a3,a0                        	| [$3d04: push iy]
	LOAD_D5D6_FROM_A0_RAM                        	| [$3d06: pop  hl]
	move.b	d6,(0x14,a2)                    	| [$3d07: ld   (ix+$14),l]
	move.b	d5,(0x15,a2)                    	| [$3d0a: ld   (ix+$15),h]
	move.w	(sp)+,d0                        	| [$3d0d: pop  af]
	rts                                    	| [$3d0e: ret]

l_3d18:
	move.b	#0x20,d1                        	| [$3d18: ld   b,$20]
	move.b	(0x17,a2),d2                    	| [$3d1a: ld   c,(ix+$17)]
	move.b	l_8D45(a6),d0                   	| [$3d1d: ld   a,($8D45)]
	                               	| [$3d20: and  a]
	jeq	l_3d3b                             	| [$3d21: jr   z,$3D3B]
	move.b	(0x12,a2),d2                    	| [$3d23: ld   c,(ix+$12)]
	addq.w	#1,d2                           	| [$3d26: inc  c]
	jeq	l_3d3b                             	| [$3d27: jr   z,$3D3B]
	cmp.b	#0x04,d0                         	| [$3d29: cp   $04]
	jcs	l_3d2f                             	| [$3d2b: jr   c,$3D2F]
	move.b	#0x03,d0                        	| [$3d2d: ld   a,$03]
l_3d2f:
	move.b	d0,d1                           	| [$3d2f: ld   b,a]
	addq.b	#0x06,d0                        	| [$3d30: add  a,$06]
	move.b	d0,d2                           	| [$3d32: ld   c,a]
	move.w	#0x030F,d3                          	| [$3d33: ld   de,$030F]
	add.b	d0,d3                            	| [$3d36: add  a,e]
												| [$3d37: ld   e,a]
	jbsr	update_88A0_0038                            	| [$3d38: rst  $38]
	move.b	#0x38,d1                        	| [$3d39: ld   b,$38]
l_3d3b:
	move.b	d1,(0x11,a2)                    	| [$3d3b: ld   (ix+$11),b]
	move.b	d2,d0                           	| [$3d3e: ld   a,c]
	btst.b	#1,(0x07,a2)                    	| [$3d3f: bit  1,(ix+$07)]
	jeq	l_3d50                             	| [$3d43: jr   z,$3D50]
	addq.w	#1,d2                           	| [$3d45: inc  c]
	                               	| [$3d49: and  a]
	move.b	d2,d0                           	| [$3d4a: ld   a,c]
	tst.b	l_8D45(a6)                   	| [$3d46: ld   a,($8D45)]
	jeq	l_3d50                             	| [$3d4b: jr   z,$3D50]
	move.b	#0x03,d0                        	| [$3d4d: ld   a,$03]
	add.b	d2,d0                            	| [$3d4f: add  a,c]
l_3d50:
	LOAD_ROM	0x3DD3,a0                          	| [$3d50: ld   hl,$3DD3]
l_3d53:
	jbsr	load_16bit_rom_pointer_0c45                            	| [$3d53: call $0C45]
	jbsr	store_de_in_struct_381e                            	| [$3d56: call $381E]
	addq.b	#1,(0x02,a2)                    	| [$3d59: inc  (ix+$02)]
wolf_baloon_exploding_3d5c:
	jbsr	l_4006                            	| [$3d5c: call $4006]
	subq.b	#1,(0x11,a2)                    	| [$3d5f: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$3d62: ret  nz] [...]
0:
	move.b	(0x16,a2),d0                    	| [$3d63: ld   a,(ix+$16)]
	cmp.b	#0x07,d0                         	| [$3d66: cp   $07]
	jeq	l_3d99                             	| [$3d68: jp   z,$3D99]
	move.b	d0,d2                           	| [$3d6b: ld   c,a]
	tst.b	d0                               	| [$3d6c: and  a]
	jeq	l_3d70                             	| [$3d6d: jr   z,$3D70]
	subq.b	#1,d0                           	| [$3d6f: dec  a]
l_3d70:
	move.w	#0x0312,d3                          	| [$3d70: ld   de,$0312]
	add.b	d0,d3                            	| [$3d73: add  a,e]
	                           	| [$3d74: ld   e,a]
	jbsr	update_88A0_0038                            	| [$3d75: rst  $38]
	LOAD_ROM	0x3E49,a0                          	| [$3d76: ld   hl,$3E49]
	move.b	d2,d0                           	| [$3d79: ld   a,c]
	cmp.b	#0x04,d0                         	| [$3d7a: cp   $04]
	jne	l_3d88                             	| [$3d7c: jr   nz,$3D88]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$3d7e: call $0C45]
	jbsr	store_de_in_struct_381e                            	| [$3d81: call $381E]
	move.b	#0x30,(0x11,a2)                 	| [$3d84: ld   (ix+$11),$30]
l_3d88:
	addq.w	#1,d2                           	| [$3d88: inc  c]
	move.b	d2,(0x13,a2)                    	| [$3d89: ld   (ix+$13),c]
	addq.b	#1,(0x02,a2)                    	| [$3d8c: inc  (ix+$02)]
wolf_shot_by_arrow_falls_3d8f:
	jbsr	l_4006                            	| [$3d8f: call $4006]
	subq.b	#1,(0x11,a2)                    	| [$3d92: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$3d95: ret  nz] [...]
0:
	jra	l_3553                             	| [$3d96: jp   $3553]

l_3d99:
	LOAD_ROM	0x4076,a0                          	| [$3d99: ld   hl,$4076]
	move.b	(0x07,a2),d0                    	| [$3d9c: ld   a,(ix+$07)]
	and.b	#0x03,d0                         	| [$3d9f: and  $03]
	subq.b	#1,d0                           	| [$3da1: dec  a]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$3da2: call $0C45]
	jbsr	store_de_in_struct_381e                            	| [$3da5: call $381E]
	move.b	#0x40,(0x09,a2)                 	| [$3da8: ld   (ix+$09),$40]
	move.b	#0x0F,(0x02,a2)                 	| [$3dac: ld   (ix+$02),$0F]
	jra	l_0ed6                             	| [$3db0: jp   $0ED6]


l_3e69:
	subq.b	#1,(0x11,a2)                    	| [$3e69: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$3e6c: ret  nz] [...]
0:
	move.b	(0x14,a2),d6                    	| [$3e6d: ld   l,(ix+$14)]
	move.b	(0x15,a2),d5                    	| [$3e70: ld   h,(ix+$15)]
	LOAD_A0_FROM_D5D6
	addq.w	#2,a0                           	| [$3e73: inc  l]
	move.b	(a0),d0                         	| [$3e75: ld   a,(hl)]
	cmp.b	#0x05,d0                         	| [$3e76: cp   $05]
	jcs	l_3553                             	| [$3e78: jp   c,$3553]
	cmp.b	#0x07,d0                         	| [$3e7b: cp   $07]
	jcc	l_3553                             	| [$3e7d: jp   nc,$3553]
	addq.w	#1,a0                           	| [$3e80: inc  l]
	move.b	(a0),d0                         	| [$3e81: ld   a,(hl)]
	move.b	d0,(0x03,a2)                    	| [$3e82: ld   (ix+$03),a]
	addq.w	#1,a0                           	| [$3e85: inc  l]
	move.b	(a0)+,d0                         	| [$3e86: ld   a,(hl)]
	subq.b	#1,d0                           	| [$3e87: dec  a]
	move.b	d0,(0x04,a2)                    	| [$3e88: ld   (ix+$04),a]
	                           	| [$3e8b: inc  l]
	move.b	(a0)+,d0                         	| [$3e8c: ld   a,(hl)]
	move.b	d0,(0x05,a2)                    	| [$3e8d: ld   (ix+$05),a]
	                           	| [$3e90: inc  l]
	move.b	(A0),d0                         	| [$3e91: ld   a,(hl)]
	move.b	d0,(0x06,a2)                    	| [$3e92: ld   (ix+$06),a]
	clr.b	(0x15,a2)                        	| [$3e95: ld   (ix+$15),$00]
	addq.b	#1,(0x02,a2)                    	| [$3e99: inc  (ix+$02)]
l_3e9c:
	jbsr	l_4006                            	| [$3e9c: call $4006]
	btst.b	#0,(0x01,a2)                    	| [$3e9f: bit  0,(ix+$01)]
	jne	l_3f1d                             	| [$3ea3: jp   nz,$3F1D]
	move.b	(0x12,a2),d6                    	| [$3ea6: ld   l,(ix+$12)]
	move.b	(0x13,a2),d5                    	| [$3ea9: ld   h,(ix+$13)]
	move.b	(0x05,a2),d0                    	| [$3eac: ld   a,(ix+$05)]
	add.b	d6,d0                            	| [$3eaf: add  a,l]
	move.b	d0,(0x05,a2)                    	| [$3eb0: ld   (ix+$05),a]
	SET_C_FROM_X
	jcc	l_3eb8                             	| [$3eb3: jr   nc,$3EB8]
	addq.b	#1,(0x06,a2)                    	| [$3eb5: inc  (ix+$06)]
l_3eb8:
	btst.b	#0,(0x08,a2)                    	| [$3eb8: bit  0,(ix+$08)]
	jeq	l_3f01                             	| [$3ebc: jr   z,$3F01]
	move.b	d5,d0                           	| [$3ebe: ld   a,h]
	subq.b	#0x02,d0                        	| [$3ebf: sub  $02]
	jcs	l_3ef8                             	| [$3ec1: jr   c,$3EF8]
	move.b	d0,d5                           	| [$3ec3: ld   h,a]
	move.b	(0x03,a2),d0                    	| [$3ec4: ld   a,(ix+$03)]
	sub.b	d5,d0                            	| [$3ec7: sub  h]
	move.b	d0,(0x03,a2)                    	| [$3ec8: ld   (ix+$03),a]
	SET_C_FROM_X
	jcc	l_3ed0                             	| [$3ecb: jr   nc,$3ED0]
	subq.b	#1,(0x04,a2)                    	| [$3ecd: dec  (ix+$04)]
l_3ed0:
	move.b	d5,(0x13,a2)                    	| [$3ed0: ld   (ix+$13),h]
l_3ed3:
	move.b	(0x06,a2),d0                    	| [$3ed3: ld   a,(ix+$06)]
	and.b	#0x1F,d0                         	| [$3ed6: and  $1F]
	cmp.b	#0x1A,d0                         	| [$3ed8: cp   $1A]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3eda: ret  c] [...]
0:
	move.b	(0x05,a2),d0                    	| [$3edb: ld   a,(ix+$05)]
	cmp.b	#0xA0,d0                         	| [$3ede: cp   $A0]
	bcs.b	0f                               	| [...]
	rts                                    	| [$3ee0: ret  nc] [...]
0:
l_3ee1:
	LOAD_ROM	0x40B4,a1                          	| [$3ee1: ld   de,$40B4]
	jbsr	store_de_in_struct_381e                            	| [$3ee4: call $381E]
	move.b	#0x0A,(0x11,a2)                 	| [$3ee7: ld   (ix+$11),$0A]
	move.b	#0x02,(0x02,a2)                 	| [$3eeb: ld   (ix+$02),$02]
	clr.b	(0x00,a2)                        	| [$3eef: ld   (ix+$00),$00]
	move.b	#0x01,(0x01,a2)                 	| [$3ef3: ld   (ix+$01),$01]
	rts                                    	| [$3ef7: ret]
l_3ef8:
	bclr.b	#0,(0x08,a2)                    	| [$3ef8: res  0,(ix+$08)]
	CLEAR_XC_FLAGS                         	| [$3efc: xor  a]
	clr.b	d0                               	| [$3efc: xor  a]
	move.b	d0,(0x13,a2)                    	| [$3efd: ld   (ix+$13),a]
	rts                                    	| [$3f00: ret]
l_3f01:
	addq.b	#1,(0x16,a2)                    	| [$3f01: inc  (ix+$16)]
	move.b	(0x16,a2),d0                    	| [$3f04: ld   a,(ix+$16)]
	and.b	#0x03,d0                         	| [$3f07: and  $03]
	bne.b	0f                               	| [...]
	rts                                    	| [$3f09: ret  z] [...]
0:
	move.b	d5,d0                           	| [$3f0a: ld   a,h]
	addq.b	#0x01,d0                        	| [$3f0b: add  a,$01]
	move.b	d0,(0x13,a2)                    	| [$3f0d: ld   (ix+$13),a]
	add.b	(0x03,a2),d0                     	| [$3f10: add  a,(ix+$03)]
	move.b	d0,(0x03,a2)                    	| [$3f13: ld   (ix+$03),a]
	SET_C_FROM_X
	jcc	l_3f1b                             	| [$3f16: jr   nc,$3F1B]
	addq.b	#1,(0x04,a2)                    	| [$3f18: inc  (ix+$04)]
l_3f1b:
	jra	l_3ed3                             	| [$3f1b: jr   $3ED3]
l_3f1d:
	move.b	(0x12,a2),d6                    	| [$3f1d: ld   l,(ix+$12)]
	move.b	(0x13,a2),d5                    	| [$3f20: ld   h,(ix+$13)]
	LOAD_A0_FROM_D5D6
	move.b	(a0),d0                         	| [$3f23: ld   a,(hl)]
	move.b	d0,d2                           	| [$3f24: ld   c,a]
	cmp.b	#0xEE,d0                         	| [$3f25: cp   $EE]
	jne	l_3f2a                             	| [$3f27: jr   nz,$3F2A]
	addq.w	#1,a0                           	| [$3f29: inc  hl]
l_3f2a:
	move.b	(a0),d1                         	| [$3f2a: ld   b,(hl)]
	move.b	(0x05,a2),d0                    	| [$3f2b: ld   a,(ix+$05)]
	sub.b	d1,d0                            	| [$3f2e: sub  b]
	move.b	d0,(0x05,a2)                    	| [$3f2f: ld   (ix+$05),a]
	SET_C_FROM_X
	jcc	l_3f37                             	| [$3f32: jr   nc,$3F37]
	subq.b	#1,(0x06,a2)                    	| [$3f34: dec  (ix+$06)]
l_3f37:
	addq.w	#1,a0                           	| [$3f37: inc  hl]
	move.b	(a0),d0                         	| [$3f38: ld   a,(hl)]
	add.b	(0x03,a2),d0                     	| [$3f39: add  a,(ix+$03)]
	move.b	d0,(0x03,a2)                    	| [$3f3c: ld   (ix+$03),a]
	SET_C_FROM_X
	jcc	l_3f44                             	| [$3f3f: jr   nc,$3F44]
	addq.b	#1,(0x04,a2)                    	| [$3f41: inc  (ix+$04)]
l_3f44:
	addq.w	#1,a0                           	| [$3f44: inc  hl]
	move.b	d2,d0                           	| [$3f45: ld   a,c]
	cmp.b	#0xEE,d0                         	| [$3f46: cp   $EE]
	jne	l_3f4d                             	| [$3f48: jr   nz,$3F4D]
	subq.w	#3,a0                           	| [$3f4a: dec  hl] * 3
l_3f4d:
	LOAD_A0_FROM_D5D6
	move.b	d6,(0x12,a2)                    	| [$3f4d: ld   (ix+$12),l]
	move.b	d5,(0x13,a2)                    	| [$3f50: ld   (ix+$13),h]
	move.b	(0x04,a2),d0                    	| [$3f53: ld   a,(ix+$04)]
	cmp.b	#0x1E,d0                         	| [$3f56: cp   $1E]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3f58: ret  c] [...]
0:
	jra	l_3ee1                             	| [$3f59: jp   $3EE1]
l_3f5c:
	LOAD_ROM	0x4072,a0                          	| [$3f5c: ld   hl,$4072]
	move.b	(0x07,a2),d0                    	| [$3f5f: ld   a,(ix+$07)]
	and.b	#0x03,d0                         	| [$3f62: and  $03]
	subq.b	#1,d0                           	| [$3f64: dec  a]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$3f65: call $0C45]
	jbsr	store_de_in_struct_381e                            	| [$3f68: call $381E]
	move.b	#0x40,(0x09,a2)                 	| [$3f6b: ld   (ix+$09),$40]
	addq.b	#1,(0x02,a2)                    	| [$3f6f: inc  (ix+$02)]
l_3f72:
	jbsr	l_4006                            	| [$3f72: call $4006]
	subq.b	#1,(0x11,a2)                    	| [$3f75: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$3f78: ret  nz] [...]
0:
	addq.b	#1,(0x02,a2)                    	| [$3f79: inc  (ix+$02)]
l_3f7c:
	jbsr	l_4006                            	| [$3f7c: call $4006]
	jbsr	l_3fd5                            	| [$3f7f: call $3FD5]
	bcc.b	0f                               	| [...]
	rts                                    	| [$3f82: ret  c] [...]
0:
	LOAD_ROM	0x40A4,a0                          	| [$3f83: ld   hl,$40A4]
	move.b	(0x07,a2),d0                    	| [$3f86: ld   a,(ix+$07)]
	and.b	#0x03,d0                         	| [$3f89: and  $03]
	subq.b	#1,d0                           	| [$3f8b: dec  a]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$3f8c: call $0C45]
	jbsr	store_de_in_struct_381e                            	| [$3f8f: call $381E]
	move.b	#0x02,(0x02,a2)                 	| [$3f92: ld   (ix+$02),$02]
	move.b	#0x20,(0x11,a2)                 	| [$3f96: ld   (ix+$11),$20]
	jbsr	l_0eda                            	| [$3f9a: call $0EDA]
	lea	l_8D40(a6),a0                      	| [$3f9d: ld   hl,$8D40]
	subq.b	#1,(a0)                         	| [$3fa0: dec  (hl)]
	lea	nb_wolves_8901(a6),a0              	| [$3fa1: ld   hl,nb_wolves_8901]
	btst.b	#0,(0x0b,a2)                    	| [$3fa4: bit  0,(ix+$0b)]
	jne	l_3fb1                             	| [$3fa8: jr   nz,$3FB1]
	move.b	(a0),d0                         	| [$3faa: ld   a,(hl)]
	                               	| [$3fab: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$3fac: ret  z] [...]
0:
	subq.b	#1,(a0)                         	| [$3fad: dec  (hl)]
	jra	l_34c9                             	| [$3fae: jp   $34C9]
l_3fb1:
	clr.b	(A0)                             	| [$3fb1: ld   (hl),$00]
	move.b	#0x01,d0                        	| [$3fb3: ld   a,$01]
	jbsr	l_34c9                            	| [$3fb5: call $34C9]
												| [$3fb8: ld   bc,$428B]
										| [$3fbb: ld   l,$00]
										| [$3fbd: ld   h,l]
						
										| [$3fbe: ld   a,(bc)]
										| [$3fbf: cp   $C8]
										| [$3fc1: jr   z,$3FCB]
										| [$3fc3: add  a,h]
										| [$3fc4: jr   nc,$3FC7]
										| [$3fc6: inc  l]
						
										| [$3fc7: ld   h,a]
										| [$3fc8: dec  bc]
										| [$3fc9: jr   $3FBE]
						
										| [$3fcb: sub  l]
										| [$3fcc: cp   $C0]
										| [...]
										| [$3fce: ret  z] [...]
						
										| [$3fcf: ld   a,$01]
										| [$3fd1: ld   ($89EB),a]
	rts                                    	| [$3fd4: ret]
l_3fd5:
	move.b	(0x03,a2),d0                    	| [$3fd5: ld   a,(ix+$03)]
	add.b	(0x09,a2),d0                     	| [$3fd8: add  a,(ix+$09)]
	jcc	l_3fe0                             	| [$3fdb: jr   nc,$3FE0]
	addq.b	#1,(0x04,a2)                    	| [$3fdd: inc  (ix+$04)]
l_3fe0:
	move.b	d0,(0x03,a2)                    	| [$3fe0: ld   (ix+$03),a]
	move.b	(0x04,a2),d0                    	| [$3fe3: ld   a,(ix+$04)]
	cmp.b	#0x1E,d0                         	| [$3fe6: cp   $1E]
	rts                                    	| [$3fe8: ret]

rom_check_3fe9:
										| [$3fe9: ld   de,$7780]
										| [$3fec: ld   bc,$0010] 16
								
								
										| [$3fef: ld   a,(de)]
										| [$3ff0: dec  de]
										| [$3ff1: add  a,b]
										| [$3ff2: ld   b,a]
										| [$3ff3: dec  c]
										| [$3ff4: jr   nz,$3FEF]
										| [$3ff6: bit  0,b]
										| [$3ff8: jr   nz,$4001]
										| [$3ffa: bit  5,b]
										| [$3ffc: jr   z,$4001]
										| [$3ffe: bit  7,b]
										| [...]
										| [$4000: ret  nz] [...]
								
								
										| [$4001: ld   hl,$8A39]
										| [$4004: inc  (hl)]
	rts                                    	| [$4005: ret]
l_4006:
	move.b	(0x0e,a2),d0                    	| [$4006: ld   a,(ix+$0e)]
	                               	| [$4009: and  a]
	jeq	l_4010                             	| [$400a: jr   z,$4010]
	subq.b	#1,(0x0e,a2)                    	| [$400c: dec  (ix+$0e)]
	rts                                    	| [$400f: ret]
l_4010:
	move.b	(0x0c,a2),d6                    	| [$4010: ld   l,(ix+$0c)]
	move.b	(0x0d,a2),d5                    	| [$4013: ld   h,(ix+$0d)]
	LOAD_A0_FROM_D5D6
	move.b	(a0),d0                         	| [$4016: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$4017: cp   $FF]
	jeq	l_4030                             	| [$4019: jr   z,$4030]
	move.b	d0,(0x10,a2)                    	| [$401b: ld   (ix+$10),a]
	addq.w	#1,a0                           	| [$401e: inc  hl]
	move.b	(a0)+,d0                         	| [$401f: ld   a,(hl)]
	move.b	d0,(0x0f,a2)                    	| [$4020: ld   (ix+$0f),a]
	                           	| [$4023: inc  hl]
	move.b	(a0)+,d0                         	| [$4024: ld   a,(hl)]
	move.b	d0,(0x0e,a2)                    	| [$4025: ld   (ix+$0e),a]
	LOAD_D5D6_FROM_A0_ROM                           	| [$4028: inc  hl]
	move.b	d6,(0x0c,a2)                    	| [$4029: ld   (ix+$0c),l]
	move.b	d5,(0x0d,a2)                    	| [$402c: ld   (ix+$0d),h]
	rts                                    	| [$402f: ret]
l_4030:
	addq.w	#1,a0                           	| [$4030: inc  hl]
	move.b	(a0)+,d0                         	| [$4031: ld   a,(hl)]
	move.b	d0,(0x0c,a2)                    	| [$4032: ld   (ix+$0c),a]
	                           	| [$4035: inc  hl]
	move.b	(a0),d0                         	| [$4036: ld   a,(hl)]
	move.b	d0,(0x0d,a2)                    	| [$4037: ld   (ix+$0d),a]
	jra	l_4010                             	| [$403a: jr   $4010]
l_403c:
	move.b	(0x0e,a3),d0                    	| [$403c: ld   a,(iy+$0e)]
	                               	| [$403f: and  a]
	jeq	l_4046                             	| [$4040: jr   z,$4046]
	subq.b	#1,(0x0e,a3)                    	| [$4042: dec  (iy+$0e)]
	rts                                    	| [$4045: ret]
l_4046:
	move.b	(0x0c,a3),d6                    	| [$4046: ld   l,(iy+$0c)]
	move.b	(0x0d,a3),d5                    	| [$4049: ld   h,(iy+$0d)]
	LOAD_A0_FROM_D5D6
	move.b	(a0),d0                         	| [$404c: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$404d: cp   $FF]
	jeq	l_4066                             	| [$404f: jr   z,$4066]
	move.b	d0,(0x10,a3)                    	| [$4051: ld   (iy+$10),a]
	addq.w	#1,a0                           	| [$4054: inc  hl]
	move.b	(a0)+,d0                         	| [$4055: ld   a,(hl)]
	move.b	d0,(0x0f,a3)                    	| [$4056: ld   (iy+$0f),a]
	                           	| [$4059: inc  hl]
	move.b	(a0)+,d0                         	| [$405a: ld   a,(hl)]
	move.b	d0,(0x0e,a3)                    	| [$405b: ld   (iy+$0e),a]
	                           	| [$405e: inc  hl]
	LOAD_D5D6_FROM_A0_ROM
	move.b	d6,(0x0c,a3)                    	| [$405f: ld   (iy+$0c),l]
	move.b	d5,(0x0d,a3)                    	| [$4062: ld   (iy+$0d),h]
	rts                                    	| [$4065: ret]
l_4066:
	addq.w	#1,a0                           	| [$4066: inc  hl]
	move.b	(a0)+,d0                         	| [$4067: ld   a,(hl)]
	move.b	d0,(0x0c,a3)                    	| [$4068: ld   (iy+$0c),a]
	                           	| [$406b: inc  hl]
	move.b	(a0),d0                         	| [$406c: ld   a,(hl)]
	move.b	d0,(0x0d,a3)                    	| [$406d: ld   (iy+$0d),a]
	jra	l_4046                             	| [$4070: jr   $4046]
	
l_40bd:
	lea	l_8C30(a6),a2                      	| [$40bd: ld   ix,$8C30]
	move.w	#0x0018,d3                      	| [$40c1: ld   de,$0018] 24
	move.b	#0x04,d1                        	| [$40c4: ld   b,$04]
l_40c6:
	jbsr	exx                               	| [$40c6: exx]
	jbsr	l_40d0                            	| [$40c7: call $40D0]
	jbsr	exx                               	| [$40ca: exx]
	add.w	d3,a2                            	| [$40cb: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_40c6                             	| [$40cd: djnz $40C6]
	rts                                    	| [$40cf: ret]
l_40d0:
	move.b	(0x00,a2),d0                    	| [$40d0: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$40d3: or   (ix+$01)]
	ror.b	#1,d0                            	| [$40d6: rrca]
	bcs.b	0f                               	| [...]
	rts                                    	| [$40d7: ret  nc] [...]
0:
	move.b	(0x02,a2),d0                    	| [$40d8: ld   a,(ix+$02)]
	and.b	#0x1F,d0                         	| [$40db: and  $1F]
	cmp.b	#0x11,d0                         	| [$40dd: cp   $11]
	bcs.b	0f                               	| [...]
	rts                                    	| [$40df: ret  nc] [...]
0:
	jbsr	jump_from_table_below_0028                            	| [$40e0: rst  $28]
jump_table_40E1:
	.long	l_4103
	.long	l_4137
	.long	l_416f
	.long	l_4179
	.long	l_4179
	.long	l_4179
	.long	l_4179
	.long	l_4179
	.long	l_417a
	.long	l_418d
	.long	l_4179
	.long	l_4221
	.long	l_4350
	.long	l_4364
	.long	do_nothing_4378
	.long	do_nothing_4378
	.long	do_nothing_4378

l_4103:
	jbsr	l_4006                            	| [$4103: call $4006]
	subq.b	#1,(0x11,a2)                    	| [$4106: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$4109: ret  nz] [...]
0:
	addq.b	#1,(0x02,a2)                    	| [$410a: inc  (ix+$02)]
	clr.b	(0x13,a2)                        	| [$410d: ld   (ix+$13),$00]
									| [$4111: ld   a,($8A5F)]
	                               	| [$4114: and  a]
	                               	| [...]
	rts                                    	| [$4115: ret  nz] [...]

     	| [$4116: ld   hl,$557F]
      	| [$4119: ld   b,$38]
     	| [$411b: xor  a]
       	| [$411b: xor  a]
      	| [$411c: ld   d,a]
      	| [$411d: ld   e,d]

      	| [$411e: ld   a,(hl)]
       	| [$411f: and  $0F]
       	| [$4121: add  a,e]
      	| [$4122: ld   e,a]

     	| [$4123: jr   nc,$4126]
      	| [$4125: inc  d]

      	| [$4126: inc  hl]
      	| [...]
     	| [$4127: djnz $411E]
      	| [$4129: ld   a,$67]
       	| [$412b: cp   e]
     	| [$412c: jr   nz,$4132]
      	| [$412e: ld   a,$01]
       	| [$4130: sub  d]
       	| [...]
     	| [$4131: ret  z] [...]
				
				
									| [$4132: ld   hl,$8A38]
										| [$4135: inc  (hl)]
	                                    	| [$4136: ret]

l_4137:
	jbsr	l_4006                            	| [$4137: call $4006]
	move.b	(0x0a,a2),d0                    	| [$413a: ld   a,(ix+$0a)]
	neg.b	d0                               	| [$413d: neg]
	move.b	d0,d1                           	| [$413f: ld   b,a]
	move.b	(0x03,a2),d0                    	| [$4140: ld   a,(ix+$03)]
	cmp.b	d1,d0                            	| [$4143: cp   b]
	jcc	l_4149                             	| [$4144: jr   nc,$4149]
	subq.b	#1,(0x04,a2)                    	| [$4146: dec  (ix+$04)]
l_4149:
	add.b	(0x0a,a2),d0                     	| [$4149: add  a,(ix+$0a)]
	move.b	d0,(0x03,a2)                    	| [$414c: ld   (ix+$03),a]
	move.b	d0,d1                           	| [$414f: ld   b,a]
	move.b	(0x04,a2),d0                    	| [$4150: ld   a,(ix+$04)]
	cmp.b	#0x03,d0                         	| [$4153: cp   $03]
	bcs.b	0f                               	| [...]
	rts                                    	| [$4155: ret  nc] [...]
0:
	move.b	(0x17,a2),d0                    	| [$4156: ld   a,(ix+$17)]
	addq.b	#1,d0                           	| [$4159: inc  a]
	move.b	d0,l_8D1D(a6)                   	| [$415a: ld   ($8D1D),a]
	subq.b	#1,d0                           	| [$415d: dec  a]
	move.b	#0x02,(0x02,a2)                 	| [$415e: ld   (ix+$02),$02]
	move.b	#0x18,(0x11,a2)                 	| [$4162: ld   (ix+$11),$18]
	LOAD_ROM	0x41B1,a0                          	| [$4166: ld   hl,$41B1]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$4169: call $0C45]
	jra	store_de_in_struct_381e                             	| [$416c: jp   $381E]
l_416f:
	jbsr	l_4006                            	| [$416f: call $4006]
	subq.b	#1,(0x11,a2)                    	| [$4172: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$4175: ret  nz] [...]
0:
	jra	l_3553                             	| [$4176: jp   $3553]
l_4179:
	rts                                    	| [$4179: ret]
l_417a:
	move.b	(0x17,a2),d0                    	| [$417a: ld   a,(ix+$17)]
	LOAD_ROM	0x41B1,a0                          	| [$417d: ld   hl,$41B1]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$4180: call $0C45]
	jbsr	store_de_in_struct_381e                            	| [$4183: call $381E]
	move.b	#0x30,(0x11,a2)                 	| [$4186: ld   (ix+$11),$30]
	addq.b	#1,(0x02,a2)                    	| [$418a: inc  (ix+$02)]
l_418d:
	jbsr	l_4006                            	| [$418d: call $4006]
	subq.b	#1,(0x11,a2)                    	| [$4190: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$4193: ret  nz] [...]
0:
	move.b	(0x16,a2),d0                    	| [$4194: ld   a,(ix+$16)]
	move.b	d0,d2                           	| [$4197: ld   c,a]
	tst.b	d0                               	| [$4198: and  a]
	jeq	l_419c                             	| [$4199: jr   z,$419C]
	subq.b	#1,d0                           	| [$419b: dec  a]
l_419c:
	move.w	#0x0312,d3                          	| [$419c: ld   de,$0312]
	add.b	d0,d3                            	| [$419f: add  a,e]
	                           	| [$41a0: ld   e,a]
	jbsr	update_88A0_0038                            	| [$41a1: rst  $38]
	move.b	#0x01,(0x11,a2)                 	| [$41a2: ld   (ix+$11),$01]
	addq.w	#1,d2                           	| [$41a6: inc  c]
	move.b	d2,(0x13,a2)                    	| [$41a7: ld   (ix+$13),c]
	move.b	#0x02,(0x02,a2)                 	| [$41aa: ld   (ix+$02),$02]
	jra	l_416f                             	| [$41ae: jp   $416F]


l_4221:
	jbsr	l_4006                            	| [$4221: call $4006]
	btst.b	#0,(0x08,a2)                    	| [$4224: bit  0,(ix+$08)]
	jne	l_4244                             	| [$4228: jr   nz,$4244]
	jbsr	l_343e                            	| [$422a: call $343E]
	move.b	(0x06,a2),d0                    	| [$422d: ld   a,(ix+$06)]
	and.b	#0x1F,d0                         	| [$4230: and  $1F]
	cmp.b	#0x14,d0                         	| [$4232: cp   $14]
	jcs	l_4290                             	| [$4234: jr   c,$4290]
	move.b	#0x01,(0x08,a2)                 	| [$4236: ld   (ix+$08),$01]
l_423a:
	LOAD_ROM	0x4212,a1                          	| [$423a: ld   de,$4212]
	clr.b	d0                               	| [$423d: xor  a]
	move.b	d0,l_8D4B(a6)                   	| [$423e: ld   ($8D4B),a]
l_4241:
	jra	store_de_in_struct_381e                             	| [$4241: jp   $381E]
l_4244:
	jbsr	l_34f2                            	| [$4244: call $34F2]
	move.b	(0x06,a2),d0                    	| [$4247: ld   a,(ix+$06)]
	and.b	#0x1F,d0                         	| [$424a: and  $1F]
	cmp.b	#0x0A,d0                         	| [$424c: cp   $0A]
	jcc	l_4290                             	| [$424e: jr   nc,$4290]
	move.b	d0,d1                           	| [$4250: ld   b,a]
	move.b	nb_wolves_8901(a6),d0           	| [$4251: ld   a,(nb_wolves_8901)]
	cmp.b	#0x02,d0                         	| [$4254: cp   $02]
	jcs	l_4266                             	| [$4256: jr   c,$4266]
	clr.b	(0x08,a2)                        	| [$4258: ld   (ix+$08),$00]
l_425c:
	LOAD_ROM	0x4203,a1                          	| [$425c: ld   de,$4203]
	st.b	d0                                	| [$425f: ld   a,$FF]
	move.b	d0,l_8D4B(a6)                   	| [$4261: ld   ($8D4B),a]
	jra	l_4241                             	| [$4264: jr   $4241]
l_4266:
	move.b	d1,d0                           	| [$4266: ld   a,b]
	cmp.b	#0x02,d0                         	| [$4267: cp   $02]
	bcs.b	0f                               	| [...]
	rts                                    	| [$4269: ret  nc] [...]
0:
	jbsr	l_3553                            	| [$426a: call $3553]
											| [$426d: ld   de,$0BB9]
											| [$4270: ld   hl,$4283]
									
												| [$4273: ld   a,(de)]
												| [$4274: add  a,(hl)]
											| [$4275: jr   nz,$427E]
												| [$4277: dec  de]
												| [$4278: inc  hl]
												| [$4279: ld   a,(hl)]
												| [$427a: inc  a]
												| [...]
											| [$427b: ret  z] [...]
									
											| [$427c: jr   $4273]
									
											| [$427e: ld   hl,$8A3A]
												| [$4281: inc  (hl)]
	rts                                    	| [$4282: ret]


l_4290:
	cmp.b	#0x05,d0                         	| [$4290: cp   $05]
	bcc.b	0f                               	| [...]
	rts                                    	| [$4292: ret  c] [...]
0:
	lea	l_8D5B(a6),a0                      	| [$4293: ld   hl,$8D5B]
	move.b	(a0),d0                         	| [$4296: ld   a,(hl)]
	                               	| [$4297: and  a]
	jne	l_42c9                             	| [$4298: jr   nz,$42C9]
	subq.w	#1,a0                           	| [$429a: dec  hl]
	move.b	(a0),d0                         	| [$429b: ld   a,(hl)]
	                               	| [$429c: and  a]
	jeq	l_42a1                             	| [$429d: jr   z,$42A1]
	subq.b	#1,(a0)                         	| [$429f: dec  (hl)]
	rts                                    	| [$42a0: ret]
l_42a1:
	move.b	nb_wolves_8901(a6),d0           	| [$42a1: ld   a,(nb_wolves_8901)]
	move.w	#0x0018,d3                      	| [$42a6: ld   de,$0018] 24
	cmp.b	#0x08,d0                         	| [$42a4: cp   $08]
	jcs	l_42c0                             	| [$42a9: jr   c,$42C0]
	lea	l_8AE0(a6),a3                      	| [$42ab: ld   iy,$8AE0]
	move.b	l_8D5C(a6),d0                   	| [$42af: ld   a,($8D5C)]
	move.b	d0,d1                           	| [$42b2: ld   b,a]
	move.b	d0,d2                           	| [$42b3: ld   c,a]
l_42b4:
	move.b	(0x04,a3),d0                    	| [$42b4: ld   a,(iy+$04)]
	cmp.b	#0x07,d0                         	| [$42b7: cp   $07]
	jeq	l_42c0                             	| [$42b9: jr   z,$42C0]
	add.w	d3,a3                            	| [$42bb: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_42b4                             	| [$42bd: djnz $42B4]
	rts                                    	| [$42bf: ret]
l_42c0:
	move.b	l_8D5D(a6),d0                   	| [$42c0: ld   a,($8D5D)]
	move.b	d0,l_8D5A(a6)                   	| [$42c3: ld   ($8D5A),a]
	move.b	d0,l_8D5B(a6)                   	| [$42c6: ld   ($8D5B),a]
l_42c9:
	lea	l_8C48(a6),a3                      	| [$42c9: ld   iy,$8C48]
	move.b	#0x03,d1                        	| [$42cd: ld   b,$03]
l_42cf:
	jbsr	l_42da                            	| [$42cf: call $42DA]
	move.w	#0x0018,d3                      	| [$42d2: ld   de,$0018] 24
	add.w	d3,a3                            	| [$42d5: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_42cf                             	| [$42d7: djnz $42CF]
	rts                                    	| [$42d9: ret]
l_42da:
	move.b	(0x00,a3),d0                    	| [$42da: ld   a,(iy+$00)]
	or.b	(0x01,a3),d0                      	| [$42dd: or   (iy+$01)]
	ror.b	#1,d0                            	| [$42e0: rrca]
	bcc.b	0f                               	| [...]
	rts                                    	| [$42e1: ret  c] [...]
0:
	move.b	#0x01,(0x00,a3)                 	| [$42e2: ld   (iy+$00),$01]
	move.b	#0x0D,(0x02,a3)                 	| [$42e6: ld   (iy+$02),$0D]

	move.l	a2,a0                        	| [$42ea: push ix]
	                        	| [$42ec: pop  hl]

	move.l	a3,a1                        	| [$42ed: push iy]
	                        	| [$42ef: pop  de]
	addq.w	#3,a0                           	| [$42f0: inc  l]
	addq.w	#3,a1                           	| [$42f3: inc  e]
	move.w	#0x0004,d1                      	| [$42f6: ld   bc,$0004] 4
	jbsr	ldir                              	| [$42f9: ldir]
	move.b	#0x2A,d0                        	| [$42fb: ld   a,$2A]
	move.b	d0,(0x09,a3)                    	| [$42fd: ld   (iy+$09),a]
	neg.b	d0                               	| [$4300: neg]
	move.b	d0,(0x0a,a3)                    	| [$4302: ld   (iy+$0a),a]
	LOAD_ROM	0x432D,a0                          	| [$4305: ld   hl,$432D]
	move.b	round_number_8907(a6),d0                   	| [$4308: ld   a,($8907)]
	lsr.b	#1,d0                            	| [$430b: srl  a]
	subq.b	#1,d0                           	| [$430d: dec  a]
	and.b	#0x03,d0                         	| [$430e: and  $03]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$4310: call $0C45]
	jbsr	store_de_in_struct_5c75                            	| [$4313: call $5C75]
	clr.b	d0                               	| [$4316: xor  a]
	move.b	d0,l_8D5B(a6)                   	| [$4317: ld   ($8D5B),a]
	LOAD_ROM	0x4347,a1                          	| [$431a: ld   de,$4347]
	jbsr	store_de_in_struct_381e                            	| [$431d: call $381E]
	move.b	#0x30,(0x11,a2)                 	| [$4320: ld   (ix+$11),$30]
	move.b	#0x04,(0x11,a3)                 	| [$4324: ld   (iy+$11),$04]
	addq.b	#1,(0x02,a2)                    	| [$4328: inc  (ix+$02)]
	move.w	(sp)+,d0                        	| [$432b: pop  af]
	rts                                    	| [$432c: ret]

l_4350:
	jbsr	l_4006                            	| [$4350: call $4006]
	subq.b	#1,(0x11,a2)                    	| [$4353: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$4356: ret  nz] [...]
0:
	subq.b	#1,(0x02,a2)                    	| [$4357: dec  (ix+$02)]
	btst.b	#0,(0x08,a2)                    	| [$435a: bit  0,(ix+$08)]
	jeq	l_425c                             	| [$435e: jp   z,$425C]
	jra	l_423a                             	| [$4361: jp   $423A]
l_4364:
	move.b	(0x11,a2),d0                    	| [$4364: ld   a,(ix+$11)]
	                               	| [$4367: and  a]
	jeq	l_436e                             	| [$4368: jr   z,$436E]
	subq.b	#1,(0x11,a2)                    	| [$436a: dec  (ix+$11)]
	rts                                    	| [$436d: ret]
l_436e:
	jbsr	l_4006                            	| [$436e: call $4006]
	jbsr	l_3fd5                            	| [$4371: call $3FD5]
	bcc.b	0f                               	| [...]
	rts                                    	| [$4374: ret  c] [...]
0:
	jra	l_3553                             	| [$4375: jp   $3553]
do_nothing_4378:
	rts                                    	| [$4378: ret]

write_column_to_screen_4381:
	move.b	#0x1D,d1                        	| [$4381: ld   b,$1D]
											| [$4383: ld   a,($8920)]
	lea		osd_w_colorram,a4
	LOAD_RAM_POINTER	color_ram_pointerl_8F43(a6),a0             	| [$4386: ld   hl,($8F43)]
	LOAD_ROM_POINTER	rom_pointer_8f45(a6),a1             	| [$4389: ld   de,($8F45)]
	tst.b	tile_or_color_mode_8920(a6)                               	| [$438d: and  a]
	jeq	l_4397                             	| [$438e: jr   z,$4397]
	lea		osd_w_videoram,a4
	LOAD_RAM_POINTER	video_ram_pointer_88b8(a6),a0             	| [$4390: ld   hl,($88B8)]
	LOAD_ROM_POINTER	rom_pointer_88BA(a6),a1             	| [$4393: ld   de,($88BA)]
l_4397:
	move.b	(a1),d0                         	| [$4397: ld   a,(de)]
	cmp.b	#0x10,d0                         	| [$4398: cp   $10]
	jeq	l_43be                             	| [$439a: jr   z,$43BE]
	cmp.b	#0xFF,d0                         	| [$439c: cp   $FF]
	jeq	l_43ce                             	| [$439e: jr   z,$43CE]
	jsr		(a4)                         	| [$43a0: ld   (hl),a]
	addq.w	#1,a1                           	| [$43a1: inc  de]
	addq.w	#1,a0                           	| [$43a2: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_4397                             	| [$43a3: djnz $4397]
l_43a5:
	addq.w	#3,a0                           	| [$43a5: inc  hl]
	                           	| [$43a6: inc  hl] * 2
l_43a8:
	tst.b	tile_or_color_mode_8920(a6)                   	| [$43a8: ld   a,($8920)]
	                               	| [$43ab: and  a]
	jne	l_43b6                             	| [$43ac: jr   nz,$43B6]
	STORE_RAM_POINTER	a0,color_ram_pointerl_8F43(a6)            	| [$43ae: ld   ($8F43),hl]
	STORE_ROM_POINTER	a1,rom_pointer_8f45(a6)            	| [$43b1: ld   ($8F45),de]
	
	rts                                    	| [$43b5: ret]
l_43b6:
	STORE_RAM_POINTER	a0,video_ram_pointer_88b8(a6)            	| [$43b6: ld   ($88B8),hl]
	STORE_ROM_POINTER	a1,rom_pointer_88BA(a6)            	| [$43b9: ld   ($88BA),de]
	
	rts                                    	| [$43bd: ret]
l_43be:
	moveq	#0,d0
	addq.w	#1,a1                           	| [$43be: inc  de]
	move.b	(a1),d0                         	| [$43bf: ld   a,(de)]
	move.b	d0,d2                           	| [$43c0: ld   c,a]
	add.w	d0,a0                            	| [$43c1: add  a,l]
	                          	| [$43c2: jr   nc,$43C5]
	                           	| [$43c4: inc  h]
l_43c5:
	                           	| [$43c5: ld   l,a]
	addq.w	#1,a1                           	| [$43c6: inc  de]
	move.b	d1,d0                           	| [$43c7: ld   a,b]
	sub.b	d2,d0                            	| [$43c8: sub  c]
	move.b	d0,d1                           	| [$43c9: ld   b,a]
	SET_C_FROM_X
	tst.b	d0
	jne	l_4397                             	| [$43ca: jr   nz,$4397]
	jra	l_43a5                             	| [$43cc: jr   $43A5]
l_43ce:
	addq.w	#1,a1                           	| [$43ce: inc  de]
	move.b	(a1)+,d0                         	| [$43cf: ld   a,(de)]
	move.b	d0,d6                           	| [$43d0: ld   l,a]
	                           	| [$43d1: inc  de]
	move.b	(a1)+,d0                         	| [$43d2: ld   a,(de)]
	move.b	d0,d5                           	| [$43d3: ld   h,a]
	                           	| [$43d4: inc  de]
	move.b	(a1)+,d0                         	| [$43d5: ld   a,(de)]
	move.b	d0,d2                           	| [$43d6: ld   c,a]
	move.b	written_column_index_88B7(a6),d0                   	| [$43d7: ld   a,($88B7)]
	add.b	d2,d0                            	| [$43da: add  a,c]
	move.b	d0,written_column_index_88B7(a6)                   	| [$43db: ld   ($88B7),a]
	LOAD_A0_FROM_D5D6
                           	| [$43de: inc  de]
	jra	l_43a8                             	| [$43df: jr   $43A8]


l_4a0b:
	move.b	round_number_8907(a6),d0                   	| [$4a0b: ld   a,($8907)]
	btst.b	#0,d0                           	| [$4a0e: bit  0,a]
	bne.b	0f                               	| [...]
	rts                                    	| [$4a10: ret  z] [...]
0:
	move.b	l_8902(a6),d0                   	| [$4a11: ld   a,($8902)]
	move.b	d0,l_8D43(a6)                   	| [$4a14: ld   ($8D43),a]
	move.b	d0,l_8934(a6)                   	| [$4a17: ld   ($8934),a]
	tst.b	d0                               	| [$4a1a: and  a]
	jne	l_4a2c                             	| [$4a1b: jr   nz,$4A2C]
	lea	l_86E3(a6),a0                      	| [$4a1d: ld   hl,$86E3]
	STORE_RAM_POINTER	a0,ram_pointer_8932(a6)            	| [$4a20: ld   ($8932),hl]
	
	lea	l_8682(a6),a0                        	| [$4a23: ld   l,$82]
	LOAD_ROM	0x2754,a1                          	| [$4a25: ld   de,$2754]
	jbsr	l_3307                            	| [$4a28: call $3307]
	rts                                    	| [$4a2b: ret]
l_4a2c:
	move.b	d0,d1                           	| [$4a2c: ld   b,a]
	lea	l_86A3(a6),a0                      	| [$4a2d: ld   hl,$86A3]
	STORE_RAM_POINTER	a0,ram_pointer_8932(a6)            	| [$4a30: ld   ($8932),hl]
	
	add.w	#0x20,a0                        	| [$4a33: ld   l,$C3]
	move.w	#0xFFDF,d3                          	| [$4a35: ld   de,$FFDF]
l_4a38:
	move.b	#0xDA,(a0)+                      	| [$4a38: ld   (hl),$DA]
	                           	| [$4a3a: inc  hl]
	move.b	#0xDB,(a0)                      	| [$4a3b: ld   (hl),$DB]
	add.w	d3,a0                            	| [$4a3d: add  hl,de]
	move.b	#0xD8,(a0)+                      	| [$4a3e: ld   (hl),$D8]
	                           	| [$4a40: inc  hl]
	move.b	#0xD9,(a0)                      	| [$4a41: ld   (hl),$D9]
	add.w	d3,a0                            	| [$4a43: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_4a38                             	| [$4a44: djnz $4A38]
	move.b	#0xBF,D3                        	| [$4a46: ld   e,$BF]
	add.w	D3,a0                            	| [$4a48: add  hl,de]
	LOAD_ROM	0x2754,a1                          	| [$4a49: ld   de,$2754]
	jbsr	l_3307                            	| [$4a4c: call $3307]
	rts                                    	| [$4a4f: ret]


rom_protection_check_50f1:
                  	| [$50f1: ld   a,($89FB)]
  	| [$50f4: and  a]
          	| [$50f5: jr   nz,$5119]
         	| [$50f7: ld   hl,$6AC5]
          	| [$50fa: ld   de,$0000] 0

          	| [$50fd: ld   a,(hl)]
           	| [$50fe: cp   $C9]
         	| [$5100: jr   z,$510A]
           	| [$5102: add  a,e]
          	| [$5103: ld   e,a]

         	| [$5104: jr   nc,$5107]
          	| [$5106: inc  d]

          	| [$5107: inc  hl]
         	| [$5108: jr   $50FD]

         	| [$510a: ld   hl,$5119]
          	| [$510d: ld   a,e]
           	| [$510e: cp   (hl)]
	jra	l_6ac5                             	| [$510f: jp   $6AC5]
											| [$5112: ld   a,d]
											| [$5113: inc  hl]
												| [$5114: cp   (hl)]
											| [$5115: jp   nz,$462C]
											| [$5118: ret]

	
	subq.w	#1,a1                           	| [$511a: dec  de]
l_511b:
	move.b	round_number_8907(a6),d0                   	| [$511b: ld   a,($8907)]
	btst.b	#0,d0                           	| [$511e: bit  0,a]
	jeq	l_5141                             	| [$5120: jr   z,$5141]
	jbsr	l_54c5                            	| [$5122: call $54C5]
	jbsr	l_5519                            	| [$5125: call $5519]
	jbsr	l_5564                            	| [$5128: call $5564]
	move.b	l_8F61(a6),d0                   	| [$512b: ld   a,($8F61)]
	                               	| [$512e: and  a]
	jeq	l_5135                             	| [$512f: jr   z,$5135]
	jbsr	l_1171                            	| [$5131: call $1171]
	rts                                    	| [$5134: ret]
l_5135:
	jbsr	l_5146                            	| [$5135: call $5146]
	move.b	l_8D6D(a6),d0                   	| [$5138: ld   a,($8D6D)]
	                               	| [$513b: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$513c: ret  nz] [...]
0:
	jbsr	l_56e8                            	| [$513d: call $56E8]
	rts                                    	| [$5140: ret]
l_5141:
	jbsr	l_53b0                            	| [$5141: call $53B0]
	jra	l_5135                             	| [$5144: jr   $5135]
l_5146:
	jbsr	l_5150                            	| [$5146: call $5150]
	jbsr	l_52f6                            	| [$5149: call $52F6]
	jbsr	l_5334                            	| [$514c: call $5334]
	rts                                    	| [$514f: ret]
l_5150:
	move.b	l_8D6D(a6),d0                   	| [$5150: ld   a,($8D6D)]
	                               	| [$5153: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$5154: ret  nz] [...]
0:
	LOAD_ROM	0x519A,a0                          	| [$5155: ld   hl,$519A]
	move.b	round_number_8907(a6),d0                   	| [$5158: ld   a,($8907)]
	and.b	#0x0F,d0                         	| [$515b: and  $0F]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$515d: call $0C45]
	exg	a1,a0                              	| [$5160: ex   de,hl]
	move.b	nb_wolves_8901(a6),d0           	| [$5161: ld   a,(nb_wolves_8901)]
	cmp.b	#0x07,d0                         	| [$5164: cp   $07]
	bcc.b	0f                               	| [...]
	rts                                    	| [$5166: ret  c] [...]
0:
l_5167:
	cmp.b	(a0),d0                          	| [$5167: cp   (hl)]
	jeq	l_516f                             	| [$5168: jr   z,$516F]
	bcs.b	0f                               	| [...]
	rts                                    	| [$516a: ret  nc] [...]
0:
	addq.w	#2,a0                           	| [$516b: inc  hl] * 2
	jra	l_5167                             	| [$516d: jr   $5167]
l_516f:
	move.b	d0,l_8D6D(a6)                   	| [$516f: ld   ($8D6D),a]
	addq.w	#1,a0                           	| [$5172: inc  hl]
	move.b	(a0),d0                         	| [$5173: ld   a,(hl)]
	move.b	d0,d1                           	| [$5174: ld   b,a]
	move.b	d0,l_8D74(a6)                   	| [$5175: ld   ($8D74),a]
	LOAD_ROM	0x5264,a0                          	| [$5178: ld   hl,$5264]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$517b: call $0C45]
	move.b	(a1),d0                         	| [$517e: ld   a,(de)]
	move.b	d0,l_8D73(a6)                   	| [$517f: ld   ($8D73),a]
	addq.w	#1,a1                           	| [$5182: inc  de]
	STORE_ROM_POINTER	a1,rom_pointer_8d71(a6)            	| [$5183: ld   ($8D71),de]
	
	move.b	d1,d0                           	| [$5187: ld   a,b]
	LOAD_ROM	0x52B0,a0                          	| [$5188: ld   hl,$52B0]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$518b: call $0C45]
	STORE_ROM_POINTER	a1,rom_pointer_8D6F(a6)            	| [$518e: ld   ($8D6F),de]
	
	clr.b	d0                               	| [$5192: xor  a]
	move.b	d0,l_8D7B(a6)                   	| [$5193: ld   ($8D7B),a]
	move.b	d0,l_8D7E(a6)                   	| [$5196: ld   ($8D7E),a]
	rts                                    	| [$5199: ret]

l_52f6:
	move.b	l_8D6D(a6),d0                   	| [$52f6: ld   a,($8D6D)]
	                               	| [$52f9: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$52fa: ret  z] [...]
0:
	move.b	l_8D6E(a6),d0                   	| [$52fb: ld   a,($8D6E)]
	                               	| [$52fe: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$52ff: ret  nz] [...]
0:
	move.w	#0x0600,d1                          	| [$5300: ld   bc,$0600]
	LOAD_D1D2_FROM_D1_16
	lea	l_8AE0(a6),a0                      	| [$5303: ld   hl,$8AE0]
	move.w	#0x0017,d3                      	| [$5306: ld   de,$0017] 23
l_5309:
	move.b	(a0)+,d0                         	| [$5309: ld   a,(hl)]
	                           	| [$530a: inc  l]
	or.b	(a0),d0                           	| [$530b: or   (hl)]
	jne	l_530f                             	| [$530c: jr   nz,$530F]
	addq.b	#1,d2                           	| [$530e: inc  c]
l_530f:
	add.w	d3,a0                            	| [$530f: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5309                             	| [$5310: djnz $5309]
	move.b	d2,d0                           	| [$5312: ld   a,c]
	cmp.b	#0x04,d0                         	| [$5313: cp   $04]
	bcc.b	0f                               	| [...]
	rts                                    	| [$5315: ret  c] [...]
0:
	move.b	d0,l_8D6E(a6)                   	| [$5316: ld   ($8D6E),a]
											| [$5319: ld   de,$0BF3]
												| [$531c: ld   b,$17]
												| [$531e: xor  a]
												| [$531f: ld   l,a]
												| [$5320: ld   h,a]
										
												| [$5321: ld   a,(de)]
																	| [$5322: rst  $20]
												| [$5323: dec  de]
												| [...]
											| [$5324: djnz $5321]
												| [$5326: ld   a,$EB]
												| [$5328: add  a,l]
											| [$5329: jr   nz,$532F]
												| [$532b: ld   a,h]
												| [$532c: add  a,$F7]
												| [...]
	rts                                    	| [$532e: ret  z] [...]
							
							
											| [$532f: ld   hl,$89E8]
											| [$5332: inc  (hl)]
											| [$5333: ret]
l_5334:
	move.b	l_8D6E(a6),d0                   	| [$5334: ld   a,($8D6E)]
	                               	| [$5337: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$5338: ret  z] [...]
0:
	LOAD_ROM_POINTER	rom_pointer_8d71(a6),a1             	| [$5339: ld   de,($8D71)]
	move.b	(a1),d0                         	| [$533d: ld   a,(de)]
	addq.b	#1,d0                           	| [$533e: inc  a]
	jne	l_5355                             	| [$533f: jr   nz,$5355]
	move.b	l_8D6D(a6),d0                   	| [$5341: ld   a,($8D6D)]
	move.b	d0,d1                           	| [$5344: ld   b,a]
	move.b	nb_wolves_8901(a6),d0           	| [$5345: ld   a,(nb_wolves_8901)]
	cmp.b	d1,d0                            	| [$5348: cp   b]
	bcs.b	0f                               	| [...]
	rts                                    	| [$5349: ret  nc] [...]
0:
	CLEAR_XC_FLAGS                         	| [$534a: xor  a]
	clr.b	d0                               	| [$534a: xor  a]
	move.b	d0,l_8D6D(a6)                   	| [$534b: ld   ($8D6D),a]
	move.b	d0,l_8D6E(a6)                   	| [$534e: ld   ($8D6E),a]
	move.b	d0,l_8D07(a6)                   	| [$5351: ld   ($8D07),a]
	rts                                    	| [$5354: ret]
l_5355:
	lea	l_8D73(a6),a0                      	| [$5355: ld   hl,$8D73]
	subq.b	#1,(a0)                         	| [$5358: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$5359: ret  nz] [...]
0:
	subq.b	#1,d0                           	| [$535a: dec  a]
	move.b	d0,(a0)                         	| [$535b: ld   (hl),a]
	addq.w	#1,a1                           	| [$535c: inc  de]
	STORE_ROM_POINTER	a1,rom_pointer_8d71(a6)            	| [$535d: ld   ($8D71),de]
	
	lea	l_8AE0(a6),a2                      	| [$5361: ld   ix,$8AE0]
	move.w	#0x0018,d3                      	| [$5365: ld   de,$0018] 24
	move.b	#0x06,d1                        	| [$5368: ld   b,$06]
l_536a:
	jbsr	exx                               	| [$536a: exx]
	jbsr	l_5374                            	| [$536b: call $5374]
	jbsr	exx                               	| [$536e: exx]
	add.w	d3,a2                            	| [$536f: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_536a                             	| [$5371: djnz $536A]
	rts                                    	| [$5373: ret]
l_5374:
	move.b	(0x00,a2),d0                    	| [$5374: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$5377: or   (ix+$01)]
	beq.b	0f                               	| [...]
	rts                                    	| [$537a: ret  nz] [...]
0:
	lea	l_8D79(a6),a0                      	| [$537b: ld   hl,$8D79]
	addq.b	#1,(a0)                         	| [$537e: inc  (hl)]
	move.b	#0x01,(0x00,a2)                 	| [$537f: ld   (ix+$00),$01]
	move.b	round_number_8907(a6),d0                   	| [$5383: ld   a,($8907)]
	move.b	#0x1D,d4                        	| [$5386: ld   e,$1D]
	btst.b	#0,d0                           	| [$5388: bit  0,a]
	jne	l_538e                             	| [$538a: jr   nz,$538E]
	move.b	#0x04,d4                        	| [$538c: ld   e,$04]
l_538e:
	jbsr	l_53a0                            	| [$538e: call $53A0]
	lea	table_53A6,a0                      	| [$5391: ld   hl,table_53A6]
	move.b	l_8D74(a6),d0                   	| [$5394: ld   a,($8D74)]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$5397: rst  $20]
	or.b	(0x07,a2),d0                      	| [$5398: or   (ix+$07)]
	move.b	d0,(0x07,a2)                    	| [$539b: ld   (ix+$07),a]
	move.w	(sp)+,d0                        	| [$539e: pop  af]
	rts                                    	| [$539f: ret]

l_53a0:
	st.b	d2                                	| [$53a0: ld   c,$FF]
	jbsr	l_5733                            	| [$53a2: call $5733]
	rts                                    	| [$53a5: ret]


table_53A6:
	.byte	0x14,0x24,0x34,0x44,0x54,0x64,0x74,0x84,0x94,0xA4,0xA7,0xC8
	.align	2

l_53b0:
	tst.b	d0				| [$53B0: and  a]
	jne		0f				| [$53B1: ret  z]
	rts
0:
	move.b	l_8D59(a6),d0                   	| [$53b2: ld   a,($8D59)]
	                               	| [$53b5: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$53b6: ret  nz] [...]
0:
	move.b	l_8A5F(a6),d0                   	| [$53b7: ld   a,($8A5F)]
	                               	| [$53ba: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$53bb: ret  nz] [...]
0:
	addq.b	#1,d0                           	| [$53bc: inc  a]
	move.b	d0,l_8D59(a6)                   	| [$53bd: ld   ($8D59),a]
	lea	l_8C30(a6),a2                      	| [$53c0: ld   ix,$8C30]
	LOAD_ROM	0x5902,a0                          	| [$53c4: ld   hl,$5902]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$53c7: rst  $20]
	move.b	d0,(0x09,a2)                    	| [$53c8: ld   (ix+$09),a]
	neg.b	d0                               	| [$53cb: neg]
	move.b	d0,(0x0a,a2)                    	| [$53cd: ld   (ix+$0a),a]
	move.b	#0x01,(0x00,a2)                 	| [$53d0: ld   (ix+$00),$01]
	move.b	#0x0B,(0x02,a2)                 	| [$53d4: ld   (ix+$02),$0B]
	CLEAR_XC_FLAGS                         	| [$53d8: xor  a]
	clr.b	d0                               	| [$53d8: xor  a]
	move.b	d0,(0x03,a2)                    	| [$53d9: ld   (ix+$03),a]
	move.b	#0x04,(0x04,a2)                 	| [$53dc: ld   (ix+$04),$04]
	move.b	d0,(0x05,a2)                    	| [$53e0: ld   (ix+$05),a]
	move.b	d0,(0x06,a2)                    	| [$53e3: ld   (ix+$06),a]
	not.b	d0                               	| [$53e6: cpl]
	move.b	d0,l_8D4B(a6)                   	| [$53e7: ld   ($8D4B),a]
	LOAD_ROM	0x4203,a1                          	| [$53ea: ld   de,$4203]
	jbsr	store_de_in_struct_381e                            	| [$53ed: call $381E]
	move.b	round_number_8907(a6),d0                   	| [$53f0: ld   a,($8907)]
	lsr.b	#1,d0                            	| [$53f3: srl  a]
	addq.b	#1,d0                           	| [$53f5: inc  a]
	cmp.b	#0x07,d0                         	| [$53f6: cp   $07]
	jcs	l_53fc                             	| [$53f8: jr   c,$53FC]
	move.b	#0x06,d0                        	| [$53fa: ld   a,$06]
l_53fc:
	move.b	d0,l_8D5C(a6)                   	| [$53fc: ld   ($8D5C),a]
	lea	table_5407,a0                      	| [$53ff: ld   hl,table_5407]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$5402: rst  $20]
	move.b	d0,l_8D5D(a6)                   	| [$5403: ld   ($8D5D),a]
	rts                                    	| [$5406: ret]

table_5407:
	.byte	0xFF,0x20,0x18,0x0C,0x0C,0x0B

l_540d:
	move.b	round_number_8907(a6),d0                   	| [$540d: ld   a,($8907)]
	and.b	#0x01,d0                         	| [$5410: and  $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$5412: ret  z] [...]
0:
	CLEAR_XC_FLAGS                         	| [$5413: xor  a]
	clr.b	d0                               	| [$5413: xor  a]
	lea	l_8D01(a6),a0                      	| [$5414: ld   hl,$8D01]
	move.b	#0x06,d1                        	| [$5417: ld   b,$06]
	jbsr	fill_area_0010                            	| [$5419: rst  $10]
	lea	l_8D11(a6),a0                      	| [$541a: ld   hl,$8D11]
	move.b	#0x06,d1                        	| [$541d: ld   b,$06]
	jbsr	fill_area_0010                            	| [$541f: rst  $10]
	lea	l_8C30(a6),a2                      	| [$5420: ld   ix,$8C30]
	move.w	#0x0018,d3                      	| [$5424: ld   de,$0018] 24
	move.b	#0x03,d1                        	| [$5427: ld   b,$03]
l_5429:
	jbsr	exx                               	| [$5429: exx]
	jbsr	l_5433                            	| [$542a: call $5433]
	jbsr	exx                               	| [$542d: exx]
	add.w	d3,a2                            	| [$542e: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5429                             	| [$5430: djnz $5429]
	rts                                    	| [$5432: ret]

l_5433:
	move.b	(0x00,a2),d0                    	| [$5433: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$5436: or   (ix+$01)]
	beq.b	0f                               	| [...]
	rts                                    	| [$5439: ret  nz] [...]
0:
	move.b	#0x01,(0x00,a2)                 	| [$543a: ld   (ix+$00),$01]
	CLEAR_XC_FLAGS                         	| [$543e: xor  a]
	clr.b	d0                               	| [$543e: xor  a]
	move.b	d0,(0x02,a2)                    	| [$543f: ld   (ix+$02),a]
	move.b	d0,(0x05,a2)                    	| [$5442: ld   (ix+$05),a]
	move.b	#0x60,(0x03,a2)                 	| [$5445: ld   (ix+$03),$60]
	move.b	#0x1B,(0x04,a2)                 	| [$5449: ld   (ix+$04),$1B]
	move.b	d0,(0x0e,a2)                    	| [$544d: ld   (ix+$0e),a]
	lea	table_55d4,a0                          	| [$5450: ld   hl,$55D4]
	move.b	l_8D01(a6),d0                   	| [$5453: ld   a,($8D01)]
	move.b	d0,d2                           	| [$5456: ld   c,a]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$5457: rst  $20]
	move.b	d0,(0x06,a2)                    	| [$5458: ld   (ix+$06),a]
	LOAD_ROM	0x55D7,a0                          	| [$545b: ld   hl,$55D7]
	move.b	d2,d0                           	| [$545e: ld   a,c]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$545f: rst  $20]
	neg.b	d0                               	| [$5460: neg]
	move.b	d0,(0x0a,a2)                    	| [$5462: ld   (ix+$0a),a]
	LOAD_ROM	0x561F,a0                          	| [$5465: ld   hl,$561F]
	move.b	d2,d0                           	| [$5468: ld   a,c]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$5469: call $0C45]
	move.b	(a1),d0                         	| [$546c: ld   a,(de)]
	move.b	d0,(0x17,a2)                    	| [$546d: ld   (ix+$17),a]
	LOAD_ROM	0x5657,a0                          	| [$5470: ld   hl,$5657]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$5473: call $0C45]
	LOAD_D3D4_FROM_D3_16
	move.b	d4,(0x0c,a2)                    	| [$5476: ld   (ix+$0c),e]
	move.b	d3,(0x0d,a2)                    	| [$5479: ld   (ix+$0d),d]
	move.b	#0x40,(0x11,a2)                 	| [$547c: ld   (ix+$11),$40]
	jbsr	l_4006                            	| [$5480: call $4006]
	move.b	d2,d0                           	| [$5483: ld   a,c]
	addq.b	#1,d0                           	| [$5484: inc  a]
	move.b	d0,l_8D01(a6)                   	| [$5485: ld   ($8D01),a]
	rts                                    	| [$5488: ret]
l_5489:
	move.b	#0x01,(0x00,a2)                 	| [$5489: ld   (ix+$00),$01]
	CLEAR_XC_FLAGS                         	| [$548d: xor  a]
	clr.b	d0                               	| [$548d: xor  a]
	move.b	d0,(0x02,a2)                    	| [$548e: ld   (ix+$02),a]
	move.b	d0,(0x05,a2)                    	| [$5491: ld   (ix+$05),a]
	move.b	#0x60,(0x03,a2)                 	| [$5494: ld   (ix+$03),$60]
	move.b	#0x1B,(0x04,a2)                 	| [$5498: ld   (ix+$04),$1B]
	move.b	d1,(0x06,a2)                    	| [$549c: ld   (ix+$06),b]
	move.b	(0x17,a2),d0                    	| [$549f: ld   a,(ix+$17)]
	move.b	d0,d2                           	| [$54a2: ld   c,a]
	LOAD_ROM	0x5657,a0                          	| [$54a3: ld   hl,$5657]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$54a6: call $0C45]
	jbsr	store_de_in_struct_381e                            	| [$54a9: call $381E]
	move.b	#0x40,(0x11,a2)                 	| [$54ac: ld   (ix+$11),$40]
	move.b	d2,d0                           	| [$54b0: ld   a,c]
	LOAD_ROM	0x55D7,a0                          	| [$54b1: ld   hl,$55D7]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$54b4: rst  $20]
	move.b	round_number_8907(a6),d0                   	| [$54b5: ld   a,($8907)]
	and.b	#0x07,d0                         	| [$54b8: and  $07]
	move.b	d0,d2                           	| [$54ba: ld   c,a]
	add.b	d0,d0                            	| [$54bb: add  a,a]
	add.b	d2,d0                            	| [$54bc: add  a,c]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$54bd: rst  $20]
	neg.b	d0                               	| [$54be: neg]
	move.b	d0,(0x0a,a2)                    	| [$54c0: ld   (ix+$0a),a]
	move.w	(sp)+,d0                        	| [$54c3: pop  af]
	rts                                    	| [$54c4: ret]
l_54c5:
	move.b	round_number_8907(a6),d0                   	| [$54c5: ld   a,($8907)]
	cmp.b	#0x04,d0                         	| [$54c8: cp   $04]
	jcc	l_54db                             	| [$54ca: jr   nc,$54DB]
	move.b	d0,d7
	move.b	l_8820(a6),d0                   	| [$54ce: ld   a,($8820)]
	cmp.b	#0x02,d7                         	| [$54cc: cp   $02]
	jcs	l_54d8                             	| [$54d1: jr   c,$54D8]
	cmp.b	#0x02,d0                         	| [$54d3: cp   $02]
	bcc.b	0f                               	| [...]
	rts                                    	| [$54d5: ret  c] [...]
0:
	jra	l_54db                             	| [$54d6: jr   $54DB]
l_54d8:
	cmp.b	#0x03,d0                         	| [$54d8: cp   $03]
	bcc.b	0f                               	| [...]
	rts                                    	| [$54da: ret  c] [...]
0:
l_54db:
	lea	l_8D04(a6),a0                      	| [$54db: ld   hl,$8D04]
	subq.b	#1,(a0)                         	| [$54de: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$54df: ret  nz] [...]
0:
	LOAD_ROM	0x55EF,a0                      	| [$54e0: ld   hl,table_55EF]
	move.b	l_8D12(a6),d0                   	| [$54e3: ld   a,($8D12)]
	and.b	#0x0F,d0                         	| [$54e6: and  $0F]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$54e8: rst  $20]
	move.b	d0,l_8D04(a6)                   	| [$54e9: ld   ($8D04),a]
	lea	l_8D12(a6),a0                      	| [$54ec: ld   hl,$8D12]
	addq.b	#1,(a0)                         	| [$54ef: inc  (hl)]
	lea	l_8C30(a6),a2                      	| [$54f0: ld   ix,$8C30]
	move.w	#0x0018,d3                      	| [$54f4: ld   de,$0018] 24
	move.b	#0x01,d1                        	| [$54f7: ld   b,$01]
l_54f9:
	jbsr	exx                               	| [$54f9: exx]
	move.b	(0x00,a2),d0                    	| [$54fa: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$54fd: or   (ix+$01)]
	jne	l_5513                             	| [$5500: jr   nz,$5513]
	move.b	#0x0B,d1                        	| [$5502: ld   b,$0B]
	LOAD_ROM	0x5637,a0                          	| [$5504: ld   hl,$5637]
	move.b	l_8D12(a6),d0                   	| [$5507: ld   a,($8D12)]
	and.b	#0x0F,d0                         	| [$550a: and  $0F]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$550c: rst  $20]
	move.b	d0,(0x17,a2)                    	| [$550d: ld   (ix+$17),a]
	jbsr	l_5489                            	| [$5510: call $5489]
l_5513:
	jbsr	exx                               	| [$5513: exx]
	add.w	d3,a2                            	| [$5514: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_54f9                             	| [$5516: djnz $54F9]
	rts                                    	| [$5518: ret]
l_5519:
	move.b	round_number_8907(a6),d0                   	| [$5519: ld   a,($8907)]
	cmp.b	#0x02,d0                         	| [$551c: cp   $02]
	jcc	l_5526                             	| [$551e: jr   nc,$5526]
	move.b	l_8820(a6),d0                   	| [$5520: ld   a,($8820)]
	cmp.b	#0x02,d0                         	| [$5523: cp   $02]
	bcc.b	0f                               	| [...]
	rts                                    	| [$5525: ret  c] [...]
0:
l_5526:
	lea	l_8D05(a6),a0                      	| [$5526: ld   hl,$8D05]
	subq.b	#1,(a0)                         	| [$5529: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$552a: ret  nz] [...]
0:
	LOAD_ROM	0x55FF,a0                          	| [$552b: ld   hl,$55FF]
	move.b	l_8D13(a6),d0                   	| [$552e: ld   a,($8D13)]
	and.b	#0x0F,d0                         	| [$5531: and  $0F]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$5533: rst  $20]
	move.b	d0,l_8D05(a6)                   	| [$5534: ld   ($8D05),a]
	lea	l_8D13(a6),a0                      	| [$5537: ld   hl,$8D13]
	addq.b	#1,(a0)                         	| [$553a: inc  (hl)]
	lea	l_8C48(a6),a2                      	| [$553b: ld   ix,$8C48]
	move.w	#0x0018,d3                      	| [$553f: ld   de,$0018] 24
	move.b	#0x01,d1                        	| [$5542: ld   b,$01]
l_5544:
	jbsr	exx                               	| [$5544: exx]
	move.b	(0x00,a2),d0                    	| [$5545: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$5548: or   (ix+$01)]
	jne	l_555e                             	| [$554b: jr   nz,$555E]
	move.b	#0x0F,d1                        	| [$554d: ld   b,$0F]
	LOAD_ROM	0x5647,a0                          	| [$554f: ld   hl,$5647]
	move.b	l_8D13(a6),d0                   	| [$5552: ld   a,($8D13)]
	and.b	#0x0F,d0                         	| [$5555: and  $0F]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$5557: rst  $20]
	move.b	d0,(0x17,a2)                    	| [$5558: ld   (ix+$17),a]
	jbsr	l_5489                            	| [$555b: call $5489]
l_555e:
	jbsr	exx                               	| [$555e: exx]
	add.w	d3,a2                            	| [$555f: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5544                             	| [$5561: djnz $5544]
	rts                                    	| [$5563: ret]
l_5564:
	lea	l_8D06(a6),a0                      	| [$5564: ld   hl,$8D06]
	subq.b	#1,(a0)                         	| [$5567: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$5568: ret  nz] [...]
0:
	LOAD_ROM	0x560F,a0                          	| [$5569: ld   hl,$560F]
	move.b	l_8D14(a6),d0                   	| [$556c: ld   a,($8D14)]
	and.b	#0x0F,d0                         	| [$556f: and  $0F]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$5571: rst  $20]
	move.b	d0,l_8D06(a6)                   	| [$5572: ld   ($8D06),a]
	lea	l_8D14(a6),a0                      	| [$5575: ld   hl,$8D14]
	addq.b	#1,(a0)                         	| [$5578: inc  (hl)]
	lea	l_8C60(a6),a2                      	| [$5579: ld   ix,$8C60]
	move.w	#0x0018,d3                      	| [$557d: ld   de,$0018] 24
	move.b	round_number_8907(a6),d0                   	| [$5580: ld   a,($8907)]
	cmp.b	#0x04,d0                         	| [$5583: cp   $04]
	jcc	l_5592                             	| [$5585: jr   nc,$5592]
	move.b	l_8820(a6),d0                   	| [$5587: ld   a,($8820)]
	                               	| [$558a: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$558b: ret  z] [...]
0:
	move.b	#0x01,d1                        	| [$558e: ld   b,$01]
	cmp.b	#0x04,d0                         	| [$558c: cp   $04]
	jcs	l_5594                             	| [$5590: jr   c,$5594]
l_5592:
	move.b	#0x02,d1                        	| [$5592: ld   b,$02]
l_5594:
	jbsr	exx                               	| [$5594: exx]
	move.b	(0x00,a2),d0                    	| [$5595: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$5598: or   (ix+$01)]
	jne	l_55ce                             	| [$559b: jr   nz,$55CE]
								| [$559d: ld   de,$0BAD]
								| [$55a0: ld   hl,table_55B5]
								| [$55a3: ld   b,$08]
				
								| [$55a5: ld   a,(de)]
								| [$55a6: add  a,(hl)]
								| [$55a7: jr   nz,$55AF]
								| [$55a9: inc  de]
								| [$55aa: inc  hl]
								| [...]
								| [$55ab: djnz $55A5]
	jra	l_55bd                             	| [$55ad: jr   $55BD]

                     	| [$55af: ld   hl,$881E]
        	| [$55b2: inc  (hl)]
       	| [$55b3: jr   $55BD]


table_55B5:
	.byte 0xAA
	.byte 0x7A
	.byte 0xAD
	.byte 0x7A
	.byte 0xB2
	.byte 0x7A
	.byte 0xB5
	.byte 0x7A
	.align	2
l_55bd:
	move.b	#0x13,d1                        	| [$55bd: ld   b,$13]
	LOAD_ROM	0x5627,a0                          	| [$55bf: ld   hl,$5627]
	move.b	l_8D14(a6),d0                   	| [$55c2: ld   a,($8D14)]
	and.b	#0x0F,d0                         	| [$55c5: and  $0F]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$55c7: rst  $20]
	move.b	d0,(0x17,a2)                    	| [$55c8: ld   (ix+$17),a]
	jbsr	l_5489                            	| [$55cb: call $5489]
l_55ce:
	jbsr	exx                               	| [$55ce: exx]
	add.w	d3,a2                            	| [$55cf: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5594                             	| [$55d1: djnz $5594]
	rts                                    	| [$55d3: ret]
table_55d4:
	.byte	0x0B   
	.byte	0x0F   
	.byte	0x13   
	.byte	0x10 
	.byte	0x18
	.byte	0x20 
	.byte	0x20
	.byte	0x18 
	.byte	0x10

	.byte	0x28,0x18
	.byte	0x20,0x10
	.byte	0x18,0x20
	.byte	0x18,0x20
	.byte	0x10,0x28
	.byte	0x18,0x20
	.byte	0x10,0x18
	.byte	0x28,0x18
	.align	2
	

        	| [$55ed: jr   $560F]


l_56e8:
	move.b	l_8D07(a6),d0                   	| [$56e8: ld   a,($8D07)]
	                               	| [$56eb: and  a]
	jeq	l_56f3                             	| [$56ec: jr   z,$56F3]
	subq.b	#1,d0                           	| [$56ee: dec  a]
	move.b	d0,l_8D07(a6)                   	| [$56ef: ld   ($8D07),a]
	rts                                    	| [$56f2: ret]
l_56f3:
	move.b	round_number_8907(a6),d0                   	| [$56f3: ld   a,($8907)]
	btst.b	#0,d0                           	| [$56f6: bit  0,a]
	jeq	l_5871                             	| [$56f8: jp   z,$5871]
	move.b	nb_wolves_8901(a6),d0           	| [$56fb: ld   a,(nb_wolves_8901)]
	lea	l_8D40(a6),a0                      	| [$56fe: ld   hl,$8D40]
	sub.b	(a0),d0                          	| [$5701: sub  (hl)]
	bne.b	0f                               	| [...]
	rts                                    	| [$5702: ret  z] [...]
0:
	bcc.b	0f                               	| [...]
	rts                                    	| [$5703: ret  c] [...]
0:
	move.b	d0,d2                           	| [$5704: ld   c,a]
	move.b	play_variables_player_1_8900(a6),d0	| [$5705: ld   a,(play_variables_player_1_8900)]
	cmp.b	#0x03,d0                         	| [$5708: cp   $03]
	jcs	l_5710                             	| [$570a: jr   c,$5710]
	move.b	#0x06,d1                        	| [$570c: ld   b,$06]
	jra	l_5713                             	| [$570e: jr   $5713]
l_5710:
	addq.b	#0x04,d0                        	| [$5710: add  a,$04]
	move.b	d0,d1                           	| [$5712: ld   b,a]
l_5713:
	move.b	l_8D40(a6),d0                   	| [$5713: ld   a,($8D40)]
	cmp.b	d1,d0                            	| [$5716: cp   b]
	bcs.b	0f                               	| [...]
	rts                                    	| [$5717: ret  nc] [...]
0:
	lea	l_8AE0(a6),a2                      	| [$5718: ld   ix,$8AE0]
	move.b	#0x06,d1                        	| [$571c: ld   b,$06]
l_571e:
	move.b	#0x1D,d4                        	| [$571e: ld   e,$1D]
	jbsr	l_572b                            	| [$5720: call $572B]
	move.w	#0x0018,d3                      	| [$5723: ld   de,$0018] 24
	add.w	d3,a2                            	| [$5726: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_571e                             	| [$5728: djnz $571E]
	rts                                    	| [$572a: ret]
l_572b:
	move.b	(0x00,a2),d0                    	| [$572b: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$572e: or   (ix+$01)]
	ror.b	#1,d0                            	| [$5731: rrca]
	bcc.b	0f                               	| [...]
	rts                                    	| [$5732: ret  c] [...]
0:
l_5733:
	move.b	d2,d1                           	| [$5733: ld   b,c]
	move.b	#0x01,(0x00,a2)                 	| [$5734: ld   (ix+$00),$01]
	move.b	#0x03,(0x02,a2)                 	| [$5738: ld   (ix+$02),$03]
	move.b	d4,(0x04,a2)                    	| [$573c: ld   (ix+$04),e]
	CLEAR_XC_FLAGS                         	| [$573f: xor  a]
	clr.b	d0                               	| [$573f: xor  a]
	move.b	d0,(0x03,a2)                    	| [$5740: ld   (ix+$03),a]
	move.b	d0,(0x05,a2)                    	| [$5743: ld   (ix+$05),a]
	move.b	d0,(0x06,a2)                    	| [$5746: ld   (ix+$06),a]
	move.b	d0,(0x08,a2)                    	| [$5749: ld   (ix+$08),a]
	move.b	#0x01,(0x07,a2)                 	| [$574c: ld   (ix+$07),$01]
	move.b	d0,(0x0b,a2)                    	| [$5750: ld   (ix+$0b),a]
	LOAD_ROM	0x58E0,a0                          	| [$5753: ld   hl,$58E0]
	move.b	round_number_8907(a6),d0                   	| [$5756: ld   a,($8907)]
	and.b	#0x01,d0                         	| [$5759: and  $01]
	jne	l_5760                             	| [$575b: jr   nz,$5760]
	LOAD_ROM	0x5902,a0                          	| [$575d: ld   hl,$5902]
l_5760:
	move.b	l_8820(a6),d0                   	| [$5760: ld   a,($8820)]
	cmp.b	#0x03,d0                         	| [$5763: cp   $03]
	jcs	l_5769                             	| [$5765: jr   c,$5769]
	move.b	#0x03,d0                        	| [$5767: ld   a,$03]
l_5769:
	move.b	d0,d2                           	| [$5769: ld   c,a]
	move.b	nb_lives_8908(a6),d0            	| [$576a: ld   a,(nb_lives_8908)]
	cmp.b	#0x04,d0                         	| [$576d: cp   $04]
	jcs	l_5776                             	| [$576f: jr   c,$5776]
	move.b	l_8D4C(a6),d0                   	| [$5771: ld   a,($8D4C)]
	add.b	d2,d0                            	| [$5774: add  a,c]
	move.b	d0,d2                           	| [$5775: ld   c,a]
l_5776:
	move.b	round_number_8907(a6),d0                   	| [$5776: ld   a,($8907)]
	btst.b	#0,d0                           	| [$5779: bit  0,a]
	bne.b	0f                               	| [...]
	jbsr	l_57b4                            	| [$577b: call z,$57B4]
0:
	move.b	round_number_8907(a6),d0                   	| [$577e: ld   a,($8907)]
	add.b	d2,d0                            	| [$5781: add  a,c]
	move.b	d0,d2                           	| [$5782: ld   c,a]
	cmp.b	#0x20,d0                         	| [$5783: cp   $20]
	jcs	l_5789                             	| [$5785: jr   c,$5789]
	move.b	#0x1F,d0                        	| [$5787: ld   a,$1F]
l_5789:
	move.b	d0,d2                           	| [$5789: ld   c,a]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$578a: rst  $20]
	move.b	d0,(0x09,a2)                    	| [$578b: ld   (ix+$09),a]
	neg.b	d0                               	| [$578e: neg]
	move.b	d0,(0x0a,a2)                    	| [$5790: ld   (ix+$0a),a]
	LOAD_ROM	0x3829,a1                          	| [$5793: ld   de,$3829]
	jbsr	store_de_in_struct_381e                            	| [$5796: call $381E]
	LOAD_ROM	0x589B,a0                          	| [$5799: ld   hl,$589B]
	move.b	round_number_8907(a6),d0                   	| [$579c: ld   a,($8907)]
	and.b	#0x01,d0                         	| [$579f: and  $01]
	jne	l_57a6                             	| [$57a1: jr   nz,$57A6]
	LOAD_ROM	0x58C0,a0                          	| [$57a3: ld   hl,$58C0]
l_57a6:
	move.b	d2,d0                           	| [$57a6: ld   a,c]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$57a7: rst  $20]
	move.b	d0,l_8D07(a6)                   	| [$57a8: ld   ($8D07),a]
	lea	l_8D40(a6),a0                      	| [$57ab: ld   hl,$8D40]
	addq.b	#1,(a0)                         	| [$57ae: inc  (hl)]
	jbsr	l_57c3                            	| [$57af: call $57C3]
	move.w	(sp)+,d0                        	| [$57b2: pop  af]
	rts                                    	| [$57b3: ret]
l_57b4:
	move.b	nb_wolves_8901(a6),d0           	| [$57b4: ld   a,(nb_wolves_8901)]
	cmp.b	#0x03,d0                         	| [$57b7: cp   $03]
	bcs.b	0f                               	| [...]
	rts                                    	| [$57b9: ret  nc] [...]
0:
	move.b	l_8D7D(a6),d0                   	| [$57ba: ld   a,($8D7D)]
	sub.b	#0x0C,d0                         	| [$57bd: sub  $0C]
	bcc.b	0f                               	| [...]
	rts                                    	| [$57bf: ret  c] [...]
0:
	add.b	d2,d0                            	| [$57c0: add  a,c]
	move.b	d0,d2                           	| [$57c1: ld   c,a]
	rts                                    	| [$57c2: ret]
l_57c3:
	subq.b	#1,d1                           	| [$57c3: dec  b]
	jeq	l_5835                             	| [$57c4: jr   z,$5835]
l_57c6:
	lea	l_8D46(a6),a0                      	| [$57c6: ld   hl,$8D46]
	move.b	(a0),d0                         	| [$57c9: ld   a,(hl)]
	                               	| [$57ca: and  a]
	jeq	l_57fa                             	| [$57cb: jr   z,$57FA]
	cmp.b	#0x07,d0                         	| [$57cd: cp   $07]
	jcc	l_57fa                             	| [$57cf: jr   nc,$57FA]
	addq.b	#1,(a0)+                         	| [$57d1: inc  (hl)]
	                           	| [$57d2: inc  l]
	move.b	(a0),d0                         	| [$57d3: ld   a,(hl)]
	                               	| [$57d4: and  a]
	jeq	l_57e1                             	| [$57d5: jr   z,$57E1]
	subq.b	#1,(a0)                         	| [$57d7: dec  (hl)]
	move.b	#0x02,(0x13,a2)                 	| [$57d8: ld   (ix+$13),$02]
	move.b	#0x01,(0x16,a2)                 	| [$57dc: ld   (ix+$16),$01]
	rts                                    	| [$57e0: ret]
l_57e1:
	addq.w	#1,a0                           	| [$57e1: inc  l]
	move.b	(a0),d0                         	| [$57e2: ld   a,(hl)]
	                               	| [$57e3: and  a]
	jeq	l_57f0                             	| [$57e4: jr   z,$57F0]
	subq.b	#1,(a0)                         	| [$57e6: dec  (hl)]
	move.b	#0x01,(0x13,a2)                 	| [$57e7: ld   (ix+$13),$01]
	move.b	#0xC1,(0x16,a2)                 	| [$57eb: ld   (ix+$16),$C1]
	rts                                    	| [$57ef: ret]
l_57f0:
	addq.w	#1,a0                           	| [$57f0: inc  l]
	move.b	(a0),d0                         	| [$57f1: ld   a,(hl)]
	                               	| [$57f2: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$57f3: ret  z] [...]
0:
	subq.b	#1,(a0)                         	| [$57f4: dec  (hl)]
	move.b	#0x41,(0x16,a2)                 	| [$57f5: ld   (ix+$16),$41]
	rts                                    	| [$57f9: ret]
l_57fa:
	move.b	#0x01,(a0)                      	| [$57fa: ld   (hl),$01]
	move.b	round_number_8907(a6),d0                   	| [$57fc: ld   a,($8907)]
	btst.b	#0,d0                           	| [$57ff: bit  0,a]
	jeq	l_5828                             	| [$5801: jr   z,$5828]
	move.b	play_variables_player_1_8900(a6),d0	| [$5803: ld   a,(play_variables_player_1_8900)]
	move.b	d0,d2                           	| [$5806: ld   c,a]
	move.b	l_8D4C(a6),d0                   	| [$5807: ld   a,($8D4C)]
	add.b	d2,d0                            	| [$580a: add  a,c]
	cmp.b	#0x20,d0                         	| [$580b: cp   $20]
	jcs	l_5811                             	| [$580d: jr   c,$5811]
	move.b	#0x1F,d0                        	| [$580f: ld   a,$1F]
l_5811:
	move.b	d0,d2                           	| [$5811: ld   c,a]
	exg	a1,a0                              	| [$5812: ex   de,hl]
	LOAD_ROM	0x5922,a0                          	| [$5813: ld   hl,$5922]
l_5816:
	add.b	d0,d0                            	| [$5816: add  a,a]
	add.b	d2,d0                            	| [$5817: add  a,c]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$5818: rst  $20]
	addq.w	#1,a1                           	| [$5819: inc  de]
	move.b	d0,(a1)+                         	| [$581a: ld   (de),a]
	addq.w	#1,a0                           	| [$581b: inc  hl]
	                           	| [$581c: inc  de]
	move.b	(a0)+,d0                         	| [$581d: ld   a,(hl)]
	move.b	d0,(a1)+                         	| [$581e: ld   (de),a]
												| [$581f: inc  hl]
												| [$5820: inc  de]
	move.b	(a0),d0                         	| [$5821: ld   a,(hl)]
	move.b	d0,(a1)                         	| [$5822: ld   (de),a]
	st.b	d1                                	| [$5823: ld   b,$FF]
	jra	l_57c3                             	| [$5825: jp   $57C3]
l_5828:
	cmp.b	#0x20,d0                         	| [$5828: cp   $20]
	jcs	l_582e                             	| [$582a: jr   c,$582E]
	move.b	#0x1F,d0                        	| [$582c: ld   a,$1F]
l_582e:
	move.b	d0,d2                           	| [$582e: ld   c,a]
	exg	a1,a0                              	| [$582f: ex   de,hl]
	LOAD_ROM	0x5985,a0                          	| [$5830: ld   hl,$5985]
	jra	l_5816                             	| [$5833: jr   $5816]
l_5835:
	move.b	l_8D4A(a6),d0                   	| [$5835: ld   a,($8D4A)]
	                               	| [$5838: and  a]
	jne	l_57c6                             	| [$5839: jr   nz,$57C6]
	move.b	#0x01,d0                        	| [$583b: ld   a,$01]
	move.b	d0,l_8D4A(a6)                   	| [$583d: ld   ($8D4A),a]
	move.b	d0,(0x0b,a2)                    	| [$5840: ld   (ix+$0b),a]
	move.b	#0x03,(0x13,a2)                 	| [$5843: ld   (ix+$13),$03]
	move.b	d0,(0x16,a2)                    	| [$5847: ld   (ix+$16),a]
	move.b	#0x02,(0x07,a2)                 	| [$584a: ld   (ix+$07),$02]
	LOAD_ROM	0x3847,a1                          	| [$584e: ld   de,$3847]
	jbsr	store_de_in_struct_381e                            	| [$5851: call $381E]
	* removed another checksum..									| [$5854: ld   hl,$0BB5]
										| [$5857: ld   b,$52]
										| [$5859: xor  a]
										| [$585a: ld   d,a]
								
										| [$585b: ld   e,(hl)]
										| [$585c: add  a,e]
										| [$585d: jr   nc,$5860]
										| [$585f: inc  d]
								
										| [$5860: inc  hl]
										| [...]
										| [$5861: djnz $585B]
										| [$5863: sub  $C1]
										| [$5865: jr   nz,$586B]
										| [$5867: ld   a,$1D]
										| [$5869: cp   d]
										| [...]
	rts                                    	| [$586a: ret  z] [...]



      	| [$586b: ld   a,$01]
                  	| [$586d: ld   ($882B),a]
     	| [$5870: ret]
l_5871:
	move.b	d0,play_variables_player_1_8900(a6)	| [$5871: ld   (play_variables_player_1_8900),a]
	move.b	nb_wolves_8901(a6),d0           	| [$5874: ld   a,(nb_wolves_8901)]
	lea	l_8D40(a6),a0                      	| [$5877: ld   hl,$8D40]
	sub.b	(a0),d0                          	| [$587a: sub  (hl)]
	bne.b	0f                               	| [...]
	rts                                    	| [$587b: ret  z] [...]
0:
	bcc.b	0f                               	| [...]
	rts                                    	| [$587c: ret  c] [...]
0:
	move.b	l_8D40(a6),d0                   	| [$587d: ld   a,($8D40)]
	cmp.b	#0x06,d0                         	| [$5880: cp   $06]
	bcs.b	0f                               	| [...]
	rts                                    	| [$5882: ret  nc] [...]
0:
	move.b	#0x01,d0                        	| [$5883: ld   a,$01]
	move.b	d0,l_8D4A(a6)                   	| [$5885: ld   ($8D4A),a]
	lea	l_8AE0(a6),a2                      	| [$5888: ld   ix,$8AE0]
	move.b	#0x06,d1                        	| [$588c: ld   b,$06]
l_588e:
	move.b	#0x04,d4                        	| [$588e: ld   e,$04]
	jbsr	l_572b                            	| [$5890: call $572B]
	move.w	#0x0018,d3                      	| [$5893: ld   de,$0018] 24
	add.w	d3,a2                            	| [$5896: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_588e                             	| [$5898: djnz $588E]
	rts                                    	| [$589a: ret]

l_59e8:
	move.b	l_882C(a6),d0                   	| [$59e8: ld   a,($882C)]
	cmp.b	#0x0F,d0                         	| [$59eb: cp   $0F]
	bne.b	0f                               	| [...]
	rts                                    	| [$59ed: ret  z] [...]
0:
	move.b	l_882F(a6),d0                   	| [$59ee: ld   a,($882F)]
	cmp.b	#0x0F,d0                         	| [$59f1: cp   $0F]
	bne.b	0f                               	| [...]
	rts                                    	| [$59f3: ret  z] [...]
0:
	jbsr	l_5a06                            	| [$59f4: call $5A06]
	jbsr	l_5a56                            	| [$59f7: call $5A56]
	jbsr	l_5a1f                            	| [$59fa: call $5A1F]
	jbsr	l_5a9c                            	| [$59fd: call $5A9C]
	*jbsr	perform_rom_checksum_7e6d                            	| [$5a00: call $7E6D]
	jra	l_5ac0                             	| [$5a03: jp   $5AC0]
l_5a06:
	move.b	copy_of_inputs_8810(a6),d0                   	| [$5a06: ld   a,($8810)]
	ror.b	#3,d0                            	| [$5a09: rrca] * 3
	SET_X_FROM_C
	lea	l_8829(a6),a0                      	| [$5a0c: ld   hl,$8829]
	move.b	(a0),d7
	roxl.b	#1,d7                         	| [$5a0f: rl   (hl)]
	move.b	d7,d0                         	| [$5a11: ld   a,(hl)]
	move.b	d7,(a0)                         	| [$5a11: ld   a,(hl)]
	and.b	#0x07,d0                         	| [$5a12: and  $07]
	cmp.b	#0x01,d0                         	| [$5a14: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$5a16: ret  nz] [...]
0:
	jbsr	l_0f09                            	| [$5a17: call $0F09]
	move.b	#0x01,d0                        	| [$5a1a: ld   a,$01]
	jra	l_5a8c                             	| [$5a1c: jp   $5A8C]
l_5a1f:
	move.b	copy_of_inputs_8810(a6),d0                   	| [$5a1f: ld   a,($8810)]
	lea	l_882D(a6),a0                      	| [$5a22: ld   hl,$882D]
	ror.b	#2,d0                            	| [$5a25: rrca] * 2
	SET_X_FROM_C
	move.b	(a0),d7
	roxl.b	#1,d7                         	| [$5a27: rl   (hl)]
	move.b	d7,d0                         	| [$5a29: ld   a,(hl)]
	move.b	d7,(a0)                         	| [$5a29: ld   a,(hl)]
	and.b	#0x07,d0                         	| [$5a2a: and  $07]
	cmp.b	#0x01,d0                         	| [$5a2c: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$5a2e: ret  nz] [...]
0:
	exg	a1,a0                              	| [$5a2f: ex   de,hl]
	jbsr	l_0f09                            	| [$5a30: call $0F09]
	lea	l_8826(a6),a0                      	| [$5a33: ld   hl,$8826]
	addq.b	#1,(a0)                         	| [$5a36: inc  (hl)]
	exg	a1,a0                              	| [$5a37: ex   de,hl]
	addq.w	#1,a0                           	| [$5a38: inc  hl]
	move.b	(a0),d0                         	| [$5a39: ld   a,(hl)]
	add.b	#0x10,d0                         	| [$5a3a: add  a,$10]
	move.b	d0,(a0)                         	| [$5a3c: ld   (hl),a]
	move.b	d0,d1                           	| [$5a3d: ld   b,a]
	addq.w	#1,a0                           	| [$5a3e: inc  hl]
	move.b	(a0),d0                         	| [$5a3f: ld   a,(hl)]
	sub.b	d1,d0                            	| [$5a40: sub  b]
	bcs.b	0f                               	| [...]
	rts                                    	| [$5a41: ret  nc] [...]
0:
	move.b	(a0),d0                         	| [$5a42: ld   a,(hl)]
	move.b	d0,d2                           	| [$5a43: ld   c,a]
	and.b	#0xF0,d0                         	| [$5a44: and  $F0]
	add.b	#0x10,d0                         	| [$5a46: add  a,$10]
	subq.w	#1,a0                           	| [$5a48: dec  hl]
	neg.b	d0                               	| [$5a49: neg]
	add.b	(a0),d0                          	| [$5a4b: add  a,(hl)]
	move.b	d0,(a0)                         	| [$5a4c: ld   (hl),a]
	move.b	d2,d0                           	| [$5a4d: ld   a,c]
	and.b	#0x0F,d0                         	| [$5a4e: and  $0F]
	cmp.b	#0x0F,d0                         	| [$5a50: cp   $0F]
	jne	l_5a8c                             	| [$5a52: jr   nz,$5A8C]
	jra	l_5a8a                             	| [$5a54: jr   $5A8A]
l_5a56:
	move.b	copy_of_inputs_8810(a6),d0                   	| [$5a56: ld   a,($8810)]
	lea	l_882A(a6),a0                      	| [$5a59: ld   hl,$882A]
	ror.b	#1,d0                            	| [$5a5c: rrca]
	SET_X_FROM_C
	move.b	(a0),d7
	roxl.b	#1,d7                         	| [$5a5d: rl   (hl)]
	move.b	d7,d0                         	| [$5a5f: ld   a,(hl)]
	move.b	d7,(a0)
	and.b	#0x07,d0                         	| [$5a60: and  $07]
	cmp.b	#0x01,d0                         	| [$5a62: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$5a64: ret  nz] [...]
0:
	exg	a1,a0                              	| [$5a65: ex   de,hl]
	jbsr	l_0f09                            	| [$5a66: call $0F09]
	lea	l_8824(a6),a0                      	| [$5a69: ld   hl,$8824]
	addq.b	#1,(a0)                         	| [$5a6c: inc  (hl)]
	exg	a1,a0                              	| [$5a6d: ex   de,hl]
	addq.w	#1,a0                           	| [$5a6e: inc  hl]
	move.b	(a0),d0                         	| [$5a6f: ld   a,(hl)]
	add.b	#0x10,d0                         	| [$5a70: add  a,$10]
	move.b	d0,(a0)                         	| [$5a72: ld   (hl),a]
	move.b	d0,d1                           	| [$5a73: ld   b,a]
	addq.w	#1,a0                           	| [$5a74: inc  hl]
	move.b	(a0),d0                         	| [$5a75: ld   a,(hl)]
	sub.b	d1,d0                            	| [$5a76: sub  b]
	bcs.b	0f                               	| [...]
	rts                                    	| [$5a77: ret  nc] [...]
0:
	move.b	(a0),d0                         	| [$5a78: ld   a,(hl)]
	move.b	d0,d2                           	| [$5a79: ld   c,a]
	and.b	#0xF0,d0                         	| [$5a7a: and  $F0]
	add.b	#0x10,d0                         	| [$5a7c: add  a,$10]
	subq.w	#1,a0                           	| [$5a7e: dec  hl]
	neg.b	d0                               	| [$5a7f: neg]
	add.b	(a0),d0                          	| [$5a81: add  a,(hl)]
	move.b	d0,(a0)                         	| [$5a82: ld   (hl),a]
	move.b	d2,d0                           	| [$5a83: ld   a,c]
	and.b	#0x0F,d0                         	| [$5a84: and  $0F]
	cmp.b	#0x0F,d0                         	| [$5a86: cp   $0F]
	jne	l_5a8c                             	| [$5a88: jr   nz,$5A8C]
l_5a8a:
	move.b	#0x63,d0                        	| [$5a8a: ld   a,$63]
l_5a8c:
	lea	nb_credits_8802(a6),a0             	| [$5a8c: ld   hl,nb_credits_8802]
	add.b	(a0),d0                          	| [$5a8f: add  a,(hl)]
	move.b	d0,(a0)                         	| [$5a90: ld   (hl),a]
	cmp.b	#0x63,d0                         	| [$5a91: cp   $63]
	jcs	l_5a97                             	| [$5a93: jr   c,$5A97]
	move.b	#0x63,(a0)                      	| [$5a95: ld   (hl),$63]
l_5a97:
	move.w	#0x0701,d3                          	| [$5a97: ld   de,$0701]
	jbsr	update_88A0_0038                            	| [$5a9a: rst  $38]
	rts                                    	| [$5a9b: ret]
l_5a9c:
	move.b	l_8824(a6),d0                   	| [$5a9c: ld   a,($8824)]
	                               	| [$5a9f: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$5aa0: ret  z] [...]
0:
	lea	l_8825(a6),a0                      	| [$5aa1: ld   hl,$8825]
	move.b	(a0),d0                         	| [$5aa4: ld   a,(hl)]
	                               	| [$5aa5: and  a]
	jne	l_5aaf                             	| [$5aa6: jr   nz,$5AAF]
	move.b	#0x30,(a0)                      	| [$5aa8: ld   (hl),$30]
	addq.b	#1,d0                           	| [$5aaa: inc  a]
	*move.b	d0,l_A183                       	| [$5aab: ld   ($A183),a]
	rts                                    	| [$5aae: ret]
l_5aaf:
	subq.b	#1,(a0)                         	| [$5aaf: dec  (hl)]
	jeq	l_5abb                             	| [$5ab0: jr   z,$5ABB]
	move.b	(a0),d0                         	| [$5ab2: ld   a,(hl)]
	cmp.b	#0x18,d0                         	| [$5ab3: cp   $18]
	beq.b	0f                               	| [...]
	rts                                    	| [$5ab5: ret  nz] [...]
0:
	CLEAR_XC_FLAGS                         	| [$5ab6: xor  a]
	clr.b	d0                               	| [$5ab6: xor  a]
	*move.b	d0,l_A183                       	| [$5ab7: ld   ($A183),a]
	rts                                    	| [$5aba: ret]
l_5abb:
	lea	l_8824(a6),a0                      	| [$5abb: ld   hl,$8824]
	subq.b	#1,(a0)                         	| [$5abe: dec  (hl)]
	rts                                    	| [$5abf: ret]
l_5ac0:
	move.b	l_8826(a6),d0                   	| [$5ac0: ld   a,($8826)]
	                               	| [$5ac3: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$5ac4: ret  z] [...]
0:
	lea	l_8827(a6),a0                      	| [$5ac5: ld   hl,$8827]
	move.b	(a0),d0                         	| [$5ac8: ld   a,(hl)]
	                               	| [$5ac9: and  a]
	jne	l_5ad3                             	| [$5aca: jr   nz,$5AD3]
	move.b	#0x30,(a0)                      	| [$5acc: ld   (hl),$30]
	addq.b	#1,d0                           	| [$5ace: inc  a]
	*move.b	d0,l_A184                       	| [$5acf: ld   ($A184),a]
	rts                                    	| [$5ad2: ret]
l_5ad3:
	subq.b	#1,(a0)                         	| [$5ad3: dec  (hl)]
	jeq	l_5adf                             	| [$5ad4: jr   z,$5ADF]
	move.b	(a0),d0                         	| [$5ad6: ld   a,(hl)]
	cmp.b	#0x18,d0                         	| [$5ad7: cp   $18]
	beq.b	0f                               	| [...]
	rts                                    	| [$5ad9: ret  nz] [...]
0:
	CLEAR_XC_FLAGS                         	| [$5ada: xor  a]
	clr.b	d0                               	| [$5ada: xor  a]
	*move.b	d0,l_A184                       	| [$5adb: ld   ($A184),a]
	rts                                    	| [$5ade: ret]
l_5adf:
	lea	l_8826(a6),a0                      	| [$5adf: ld   hl,$8826]
	subq.b	#1,(a0)                         	| [$5ae2: dec  (hl)]
	rts                                    	| [$5ae3: ret]
l_5ae4:
	jbsr	l_5e78                            	| [$5ae4: call $5E78]
	jbsr	l_5f6a                            	| [$5ae7: call $5F6A]
	jbsr	l_602f                            	| [$5aea: call $602F]
	jbsr	l_6368                            	| [$5aed: call $6368]
	jbsr	l_5df7                            	| [$5af0: call $5DF7]
	*jbsr	rom_checksum_5b06                            	| [$5af3: call $5B06]
	jbsr	l_5d4d                            	| [$5af6: call $5D4D]
	jbsr	l_5b86                            	| [$5af9: call $5B86]
	jbsr	l_6404                            	| [$5afc: call $6404]
	*jbsr	rom_checksum_5d0b                            	| [$5aff: call $5D0B]
	jbsr	l_5b2c                            	| [$5b02: call $5B2C]
	rts                                    	| [$5b05: ret]
	
rom_checksum_5b06:
	move.b	round_number_8907(a6),d0                   	| [$5b06: ld   a,($8907)]
	cmp.b	#0x05,d0                         	| [$5b09: cp   $05]
	beq.b	0f                               	| [...]
	rts                                    	| [$5b0b: ret  nz] [...]
0:
   	| [$5b0c: ld   iy,$5315]
    	| [$5b10: ld   d,iyl]
    	| [$5b12: ld   e,iyh]
   	| [$5b14: xor  a]
     	| [$5b14: xor  a]
    	| [$5b15: ld   l,a]
    	| [$5b16: ld   h,a]
    	| [$5b17: ld   b,$06]

    	| [$5b19: ld   a,(de)]
     	| [$5b1a: add  a,l]
   	| [$5b1b: jr   nc,$5B1E]
    	| [$5b1d: inc  h]

    	| [$5b1e: ld   l,a]
    	| [$5b1f: inc  de]
    	| [...]
   	| [$5b20: djnz $5B19]
     	| [$5b22: add  a,h]
     	| [$5b23: add  a,$7F]
     	| [...]
	rts                                    	| [$5b25: ret  z] [...]
			
			
				| [$5b26: ld   h,$88]
					| [$5b28: ld   l,$1E]
					| [$5b2a: inc  (hl)]
					| [$5b2b: ret]
l_5b2c:
	move.b	l_8D75(a6),d0                   	| [$5b2c: ld   a,($8D75)]
	                               	| [$5b2f: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$5b30: ret  z] [...]
0:
	move.b	l_8D79(a6),d0                   	| [$5b31: ld   a,($8D79)]
	                               	| [$5b34: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$5b35: ret  nz] [...]
0:
	move.b	l_8D77(a6),d0                   	| [$5b36: ld   a,($8D77)]
	                               	| [$5b39: and  a]
	jne	l_5b57                             	| [$5b3a: jr   nz,$5B57]
	lea	l_8AE4(a6),a0                      	| [$5b3c: ld   hl,$8AE4]
	move.w	#0x0018,d3                      	| [$5b3f: ld   de,$0018] 24
	move.b	#0x06,d1                        	| [$5b42: ld   b,$06]
	move.b	#0x13,d2                        	| [$5b44: ld   c,$13]
	move.b	round_number_8907(a6),d0                   	| [$5b46: ld   a,($8907)]
	btst.b	#0,d0                           	| [$5b49: bit  0,a]
	jeq	l_5b4f                             	| [$5b4b: jr   z,$5B4F]
	move.b	#0x0B,d2                        	| [$5b4d: ld   c,$0B]
l_5b4f:
	move.b	(a0),d0                         	| [$5b4f: ld   a,(hl)]
	cmp.b	d2,d0                            	| [$5b50: cp   c]
	jeq	l_5b57                             	| [$5b51: jr   z,$5B57]
	add.w	d3,a0                            	| [$5b53: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5b4f                             	| [$5b54: djnz $5B4F]
	rts                                    	| [$5b56: ret]
l_5b57:
	lea	l_8AE0(a6),a2                      	| [$5b57: ld   ix,$8AE0]
	move.w	#0x0018,d3                      	| [$5b5b: ld   de,$0018] 24
	move.b	#0x06,d1                        	| [$5b5e: ld   b,$06]
l_5b60:
	jbsr	exx                               	| [$5b60: exx]
	jbsr	l_5b71                            	| [$5b61: call $5B71]
	jbsr	exx                               	| [$5b64: exx]
	add.w	d3,a2                            	| [$5b65: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5b60                             	| [$5b67: djnz $5B60]
	CLEAR_XC_FLAGS                         	| [$5b69: xor  a]
	clr.b	d0                               	| [$5b69: xor  a]
	move.b	d0,l_8D75(a6)                   	| [$5b6a: ld   ($8D75),a]
	move.b	d0,l_8F20(a6)                   	| [$5b6d: ld   ($8F20),a]
	rts                                    	| [$5b70: ret]
l_5b71:
	move.b	(0x02,a2),d0                    	| [$5b71: ld   a,(ix+$02)]
	cmp.b	#0x05,d0                         	| [$5b74: cp   $05]
	beq.b	0f                               	| [...]
	rts                                    	| [$5b76: ret  nz] [...]
0:
	btst.b	#2,(0x07,a2)                    	| [$5b77: bit  2,(ix+$07)]
	bne.b	0f                               	| [...]
	rts                                    	| [$5b7b: ret  z] [...]
0:
	move.b	(0x06,a2),d0                    	| [$5b7c: ld   a,(ix+$06)]
	cmp.b	#0x11,d0                         	| [$5b7f: cp   $11]
	bcs.b	0f                               	| [...]
	rts                                    	| [$5b81: ret  nc] [...]
0:
	jbsr	l_3a6c                            	| [$5b82: call $3A6C]
	rts                                    	| [$5b85: ret]
l_5b86:
	lea	l_8AE0(a6),a2                      	| [$5b86: ld   ix,$8AE0]
	move.w	#0x0018,d3                      	| [$5b8a: ld   de,$0018] 24
	move.b	#0x06,d1                        	| [$5b8d: ld   b,$06]
l_5b8f:
	jbsr	exx                               	| [$5b8f: exx]
	jbsr	l_5b99                            	| [$5b90: call $5B99]
	jbsr	exx                               	| [$5b93: exx]
	add.w	d3,a2                            	| [$5b94: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5b8f                             	| [$5b96: djnz $5B8F]
	rts                                    	| [$5b98: ret]

l_5b99:
	btst.b	#0,(0x0b,a2)                    	| [$5b99: bit  0,(ix+$0b)]
	jne	l_5ba5                             	| [$5b9d: jr   nz,$5BA5]
	move.b	round_number_8907(a6),d0                   	| [$5b9f: ld   a,($8907)]
	btst.b	#0,d0                           	| [$5ba2: bit  0,a]
	beq.b	0f                               	| [...]
	rts                                    	| [$5ba4: ret  nz] [...]
0:
l_5ba5:
	btst.b	#0,(0x00,a2)                    	| [$5ba5: bit  0,(ix+$00)]
	bne.b	0f                               	| [...]
	rts                                    	| [$5ba9: ret  z] [...]
0:
	btst.b	#0,(0x16,a2)                    	| [$5baa: bit  0,(ix+$16)]
	bne.b	0f                               	| [...]
	rts                                    	| [$5bae: ret  z] [...]
0:
	move.b	(0x02,a2),d0                    	| [$5baf: ld   a,(ix+$02)]
	cmp.b	#0x05,d0                         	| [$5bb2: cp   $05]
	beq.b	0f                               	| [...]
	rts                                    	| [$5bb4: ret  nz] [...]
0:
	lea	l_8848(a6),a0                      	| [$5bb5: ld   hl,$8848]
	lea	l_8C90(a6),a3                      	| [$5bb8: ld   iy,$8C90]
	move.b	#0x02,d1                        	| [$5bbc: ld   b,$02]
l_5bbe:
	btst.b	#0,(0x00,a3)                    	| [$5bbe: bit  0,(iy+$00)]
	jeq	l_5c46                             	| [$5bc2: jp   z,$5C46]
	btst.b	#1,(0x00,a3)                    	| [$5bc5: bit  1,(iy+$00)]
	jne	l_5c46                             	| [$5bc9: jr   nz,$5C46]
	move.b	#0x10,d4                        	| [$5bcb: ld   e,$10]
	move.b	cabinet_upright_881F(a6),d0                   	| [$5bcd: ld   a,($881F)]
	                               	| [$5bd0: and  a]
	jne	l_5bd5                             	| [$5bd1: jr   nz,$5BD5]
	move.b	#0x08,d4                        	| [$5bd3: ld   e,$08]
l_5bd5:
	move.b	(0x06,a2),d0                    	| [$5bd5: ld   a,(ix+$06)]
	move.b	(0x05,a2),d2                    	| [$5bd8: ld   c,(ix+$05)]
	rol.b	#1,d2                            	| [$5bdb: rlc  c]
	SET_X_FROM_C
	roxl.b	#1,d0                           	| [$5bdd: rla]
	rol.b	#1,d2                            	| [$5bde: rlc  c]
	SET_X_FROM_C
	roxl.b	#1,d0                           	| [$5be0: rla]
	rol.b	#1,d2                            	| [$5be1: rlc  c]
	SET_X_FROM_C
	roxl.b	#1,d0                           	| [$5be3: rla]
	add.b	d4,d0                            	| [$5be4: add  a,e]
	sub.b	(0x06,a3),d0                     	| [$5be5: sub  (iy+$06)]
	jcc	l_5bec                             	| [$5be8: jr   nc,$5BEC]
	neg.b	d0                               	| [$5bea: neg]
l_5bec:
	cmp.b	#0x10,d0                         	| [$5bec: cp   $10]
	jcc	l_5c46                             	| [$5bee: jr   nc,$5C46]
	addq.w	#2,a0                           	| [$5bf0: inc  l]
	move.b	#0x16,d4                        	| [$5bf2: ld   e,$16]
	move.b	round_number_8907(a6),d0                   	| [$5bf4: ld   a,($8907)]
	btst.b	#0,d0                           	| [$5bf7: bit  0,a]
	jne	l_5bfd                             	| [$5bf9: jr   nz,$5BFD]
	move.b	#0x12,d4                        	| [$5bfb: ld   e,$12]
l_5bfd:
	move.b	(0x04,a2),d0                    	| [$5bfd: ld   a,(ix+$04)]
	move.b	(0x03,a2),d2                    	| [$5c00: ld   c,(ix+$03)]
	rol.b	#1,d2                            	| [$5c03: rlc  c]
	SET_X_FROM_C
	roxl.b	#1,d0                           	| [$5c05: rla]
	rol.b	#1,d2                            	| [$5c06: rlc  c]
	SET_X_FROM_C
	roxl.b	#1,d0                           	| [$5c08: rla]
	rol.b	#1,d2                            	| [$5c09: rlc  c]
	SET_X_FROM_C
	roxl.b	#1,d0                           	| [$5c0b: rla]
	sub.b	D4,d0                            	| [$5c0c: sub  e]
	sub.b	(0x04,a3),d0                     	| [$5c0d: sub  (iy+$04)]
	jcc	l_5c14                             	| [$5c10: jr   nc,$5C14]
	neg.b	d0                               	| [$5c12: neg]
l_5c14:
	cmp.b	#0x09,d0                         	| [$5c14: cp   $09]
	jcc	l_5c48                             	| [$5c16: jr   nc,$5C48]
	LOAD_ROM	0x5C80,a1                          	| [$5c18: ld   de,$5C80]
	btst.b	#1,(0x07,a2)                    	| [$5c1b: bit  1,(ix+$07)]
	jeq	l_5c24                             	| [$5c1f: jr   z,$5C24]
	LOAD_ROM	0x5C89,a1                          	| [$5c21: ld   de,$5C89]
l_5c24:
	jbsr	store_de_in_struct_381e                            	| [$5c24: call $381E]
	move.b	#0x10,(0x12,a2)                 	| [$5c27: ld   (ix+$12),$10]
	move.b	#0x02,(0x16,a2)                 	| [$5c2b: ld   (ix+$16),$02]
	lea	l_8B70(a6),a3                      	| [$5c2f: ld   iy,$8B70]
	move.w	#0x0018,d3                      	| [$5c33: ld   de,$0018] 24
	move.b	#0x05,d1                        	| [$5c36: ld   b,$05]
l_5c38:
	move.b	(0x14,a2),d0                    	| [$5c38: ld   a,(ix+$14)]
	cmp.b	(0x14,a3),d0                     	| [$5c3b: cp   (iy+$14)]
	jeq	l_5c54                             	| [$5c3e: jr   z,$5C54]
	add.w	d3,a3                            	| [$5c40: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5c38                             	| [$5c42: djnz $5C38]
	move.w	(sp)+,d0                        	| [$5c44: pop  af]
	rts                                    	| [$5c45: ret]
l_5c46:
	addq.w	#2,a0                           	| [$5c46: inc  l]
	                           	| [$5c47: inc  l]
l_5c48:
	addq.w	#2,a0                           	| [$5c48: inc  l]
	                           	| [$5c49: inc  l]
	move.w	#0x0018,d3                      	| [$5c4a: ld   de,$0018] 24
	add.w	d3,a3                            	| [$5c4d: add  iy,de]
	subq.b	#1,d1                           	| [$5c4f: dec  b]
	jne	l_5bbe                             	| [$5c50: jp   nz,$5BBE]
	rts                                    	| [$5c53: ret]
l_5c54:
	LOAD_ROM	0x5C92,a0                          	| [$5c54: ld   hl,$5C92]
	move.b	(0x07,a2),d0                    	| [$5c57: ld   a,(ix+$07)]
	and.b	#0xF0,d0                         	| [$5c5a: and  $F0]
	ror.b	#4,d0                            	| [$5c5c: rrca] * 4
	jbsr	load_16bit_rom_pointer_0c45                            	| [$5c60: call $0C45]
	btst.b	#0,(0x0b,a3)                    	| [$5c63: bit  0,(iy+$0b)]
	jeq	l_5c6c                             	| [$5c67: jr   z,$5C6C]
	LOAD_ROM	0x5CF9,a1                          	| [$5c69: ld   de,$5CF9]
l_5c6c:
	move.b	#0x02,(0x16,a3)                 	| [$5c6c: ld   (iy+$16),$02]
	jbsr	store_de_in_struct_5c75                            	| [$5c70: call $5C75]
	move.w	(sp)+,d0                        	| [$5c73: pop  af]
	rts                                    	| [$5c74: ret]
store_de_in_struct_5c75:
	LOAD_D3D4_FROM_A1_ROM
	move.b	d4,(0x0c,a3)                    	| [$5c75: ld   (iy+$0c),e]
	move.b	d3,(0x0d,a3)                    	| [$5c78: ld   (iy+$0d),d]
	clr.b	(0x0e,a3)                        	| [$5c7b: ld   (iy+$0e),$00]
	rts                                    	| [$5c7f: ret]

l_5d0c:
	lea	l_8AE0(a6),a0                      	| [$5d0c: ld   hl,$8AE0]
	move.w	#0x0018,d3                      	| [$5d0f: ld   de,$0018] 24
	move.b	#0x06,d1                        	| [$5d12: ld   b,$06]
l_5d14:
	jbsr	exx                               	| [$5d14: exx]
	jbsr	l_5d1e                            	| [$5d15: call $5D1E]
	jbsr	exx                               	| [$5d18: exx]
	add.w	d3,a2                            	| [$5d19: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5d14                             	| [$5d1b: djnz $5D14]
	rts                                    	| [$5d1d: ret]
l_5d1e:
	btst.b	#0,(0x0b,a2)                    	| [$5d1e: bit  0,(ix+$0b)]
	jne	l_5d2a                             	| [$5d22: jr   nz,$5D2A]
	move.b	round_number_8907(a6),d0                   	| [$5d24: ld   a,($8907)]
	btst.b	#0,d0                           	| [$5d27: bit  0,a]
	beq.b	0f                               	| [...]
	rts                                    	| [$5d29: ret  nz] [...]
0:
l_5d2a:
	btst.b	#0,(0x00,a2)                    	| [$5d2a: bit  0,(ix+$00)]
	bne.b	0f                               	| [...]
	rts                                    	| [$5d2e: ret  z] [...]
0:
	btst.b	#1,(0x16,a2)                    	| [$5d2f: bit  1,(ix+$16)]
	bne.b	0f                               	| [...]
	rts                                    	| [$5d33: ret  z] [...]
0:
	subq.b	#1,(0x12,a2)                    	| [$5d34: dec  (ix+$12)]
	beq.b	0f                               	| [...]
	rts                                    	| [$5d37: ret  nz] [...]
0:
	move.b	(0x13,a2),d0                    	| [$5d38: ld   a,(ix+$13)]
	and.b	#0x03,d0                         	| [$5d3b: and  $03]
	jeq	l_5d48                             	| [$5d3d: jr   z,$5D48]
	subq.b	#1,d0                           	| [$5d3f: dec  a]
	move.b	d0,(0x13,a2)                    	| [$5d40: ld   (ix+$13),a]
	move.b	#0x01,(0x16,a2)                 	| [$5d43: ld   (ix+$16),$01]
	rts                                    	| [$5d47: ret]
l_5d48:
	clr.b	(0x16,a2)                        	| [$5d48: ld   (ix+$16),$00]
	rts                                    	| [$5d4c: ret]
l_5d4d:
	lea	l_889C(a6),a2                      	| [$5d4d: ld   ix,$889C]
	lea	sprite_shadow_ram_8840+0x3C(a6),a3     	| [$5d51: ld   iy,sprite_shadow_ram_8840+$3C]
	lea	l_8BE8(a6),a0                      	| [$5d55: ld   hl,$8BE8]
	move.b	#0x03,d1                        	| [$5d58: ld   b,$03]
l_5d5a:
	jbsr	l_5d68                            	| [$5d5a: call $5D68]
	move.w	#0x0004,d3                      	| [$5d5d: ld   de,$0004] 4
	add.w	d3,a3                            	| [$5d60: add  iy,de]
	move.b	#0x18,d3                        	| [$5d62: ld   e,$18]
	add.w	d3,a0                            	| [$5d64: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5d5a                             	| [$5d65: djnz $5D5A]
	rts                                    	| [$5d67: ret]
l_5d68:
	move.b	(a0),d0                         	| [$5d68: ld   a,(hl)]
	                               	| [$5d69: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$5d6a: ret  z] [...]
0:
	cmp.b	#0x05,d0                         	| [$5d6b: cp   $05]
	bne.b	0f                               	| [...]
	rts                                    	| [$5d6d: ret  z] [...]
0:
	move.b	#0xFC,d4                        	| [$5d6e: ld   e,$FC]
	clr.b	d3                               	| [$5d70: ld   d,$00]
	move.b	cabinet_upright_881F(a6),d0                   	| [$5d72: ld   a,($881F)]
	                               	| [$5d75: and  a]
	jne	l_5d7c                             	| [$5d76: jr   nz,$5D7C]
	move.b	#0x05,d4                        	| [$5d78: ld   e,$05]
	move.b	#0x10,d3                        	| [$5d7a: ld   d,$10]
l_5d7c:
	move.b	(0x00,a2),d0                    	| [$5d7c: ld   a,(ix+$00)]
	add.b	d4,d0                            	| [$5d7f: add  a,e]
	move.b	d0,d4                           	| [$5d80: ld   e,a]
	move.b	(0x02,a2),d0                    	| [$5d81: ld   a,(ix+$02)]
	add.b	d3,d0                            	| [$5d84: add  a,d]
	move.b	d0,d3                           	| [$5d85: ld   d,a]
	move.b	(0x00,a3),d0                    	| [$5d86: ld   a,(iy+$00)]
	sub.b	d4,d0                            	| [$5d89: sub  e]
	jcc	l_5d8e                             	| [$5d8a: jr   nc,$5D8E]
	neg.b	d0                               	| [$5d8c: neg]
l_5d8e:
	cmp.b	#0x04,d0                         	| [$5d8e: cp   $04]
	bcs.b	0f                               	| [...]
	rts                                    	| [$5d90: ret  nc] [...]
0:
	move.b	(0x02,a3),d0                    	| [$5d91: ld   a,(iy+$02)]
	add.b	#0x08,d0                         	| [$5d94: add  a,$08]
	sub.b	d3,d0                            	| [$5d96: sub  d]
	jcc	l_5d9b                             	| [$5d97: jr   nc,$5D9B]
	neg.b	d0                               	| [$5d99: neg]
l_5d9b:
	cmp.b	#0x09,d0                         	| [$5d9b: cp   $09]
	bcc.b	0f                               	| [...]
	rts                                    	| [$5d9d: ret  c] [...]
0:
	cmp.b	#0x0F,d0                         	| [$5d9e: cp   $0F]
	bcs.b	0f                               	| [...]
	rts                                    	| [$5da0: ret  nc] [...]
0:

	move.l	a0,a2                        	| [$5da1: push hl]
	                        	| [$5da2: pop  ix]
	clr.b	(0x00,a2)                        	| [$5da4: ld   (ix+$00),$00]
	move.b	#0x01,(0x01,a2)                 	| [$5da8: ld   (ix+$01),$01]
	move.b	#0x0C,(0x02,a2)                 	| [$5dac: ld   (ix+$02),$0C]
	move.b	#0x01,(0x07,a2)                 	| [$5db0: ld   (ix+$07),$01]
	LOAD_ROM	0x5DC2,a0                          	| [$5db4: ld   hl,$5DC2]
	LOAD_D5D6_FROM_A0_ROM
	move.b	d5,(0x13,a2)                    	| [$5db7: ld   (ix+$13),h]
	move.b	d6,(0x12,a2)                    	| [$5dba: ld   (ix+$12),l]
	jbsr	l_0f2b                            	| [$5dbd: call $0F2B]
	move.w	(sp)+,d0                        	| [$5dc0: pop  af]
	rts                                    	| [$5dc1: ret]

l_5df7:
	move.b	l_8D32(a6),d0                   	| [$5df7: ld   a,($8D32)]
	                               	| [$5dfa: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$5dfb: ret  nz] [...]
0:
	move.b	l_8F08(a6),d0                   	| [$5dfc: ld   a,($8F08)]
	lea	l_8F24(a6),a0                      	| [$5dff: ld   hl,$8F24]
	or.b	(a0),d0                           	| [$5e02: or   (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$5e03: ret  nz] [...]
0:
	lea	sprite_shadow_ram_8840(a6),a2      	| [$5e04: ld   ix,sprite_shadow_ram_8840]
	lea	sprite_shadow_ram_8840+0x3C(a6),a3     	| [$5e08: ld   iy,sprite_shadow_ram_8840+$3C]
	lea	l_8BE8(a6),a0                      	| [$5e0c: ld   hl,$8BE8]
	move.b	#0x03,d1                        	| [$5e0f: ld   b,$03]
l_5e11:
	jbsr	l_5e1f                            	| [$5e11: call $5E1F]
l_5e14:
	move.w	#0x0004,d3                      	| [$5e14: ld   de,$0004] 4
	add.w	d3,a3                            	| [$5e17: add  iy,de]
	move.b	#0x18,d3                        	| [$5e19: ld   e,$18]
	add.w	d3,a0                            	| [$5e1b: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5e11                             	| [$5e1c: djnz $5E11]
	rts                                    	| [$5e1e: ret]
l_5e1f:
	move.b	(a0),d0                         	| [$5e1f: ld   a,(hl)]
	                               	| [$5e20: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$5e21: ret  z] [...]
0:
	cmp.b	#0x05,d0                         	| [$5e22: cp   $05]
	bne.b	0f                               	| [...]
	rts                                    	| [$5e24: ret  z] [...]
0:
l_5e25:
	move.b	#0x09,d4                        	| [$5e25: ld   e,$09]
	clr.b	d3                               	| [$5e27: ld   d,$00]
	move.b	cabinet_upright_881F(a6),d0                   	| [$5e29: ld   a,($881F)]
	                               	| [$5e2c: and  a]
	jne	l_5e33                             	| [$5e2d: jr   nz,$5E33]
	move.b	#0xF7,d4                        	| [$5e2f: ld   e,$F7]
	move.b	#0x10,d3                        	| [$5e31: ld   d,$10]
l_5e33:
	move.b	(0x00,a2),d0                    	| [$5e33: ld   a,(ix+$00)]
l_5e36:
	add.b	d4,d0                            	| [$5e36: add  a,e]
	move.b	d0,d4                           	| [$5e37: ld   e,a]
l_5e38:
	move.b	(0x02,a2),d0                    	| [$5e38: ld   a,(ix+$02)]
	add.b	d3,d0                            	| [$5e3b: add  a,d]
l_5e3c:
	move.b	d0,d3                           	| [$5e3c: ld   d,a]
	move.b	(0x00,a3),d0                    	| [$5e3d: ld   a,(iy+$00)]
l_5e40:
	sub.b	d4,d0                            	| [$5e40: sub  e]
	jcc	l_5e45                             	| [$5e41: jr   nc,$5E45]
	neg.b	d0                               	| [$5e43: neg]
l_5e45:
	cmp.b	#0x02,d0                         	| [$5e45: cp   $02]
	bcs.b	0f                               	| [...]
	rts                                    	| [$5e47: ret  nc] [...]
0:
l_5e48:
	move.b	(0x02,a3),d0                    	| [$5e48: ld   a,(iy+$02)]
	add.b	#0x08,d0                         	| [$5e4b: add  a,$08]
	sub.b	d3,d0                            	| [$5e4d: sub  d]
l_5e4e:
	jcc	l_5e52                             	| [$5e4e: jr   nc,$5E52]
l_5e50:
	neg.b	d0                               	| [$5e50: neg]
l_5e52:
	cmp.b	#0x09,d0                         	| [$5e52: cp   $09]
* collision detection (rocks)
l_5e54:
	bcs.b	0f                               	| [...]
	rts                                    	| [$5e54: ret  nc] [...]
0:
	move.b	#0x01,d0                        	| [$5e55: ld   a,$01]
	move.b	d0,l_8D32(a6)                   	| [$5e57: ld   ($8D32),a]

	move.l	a0,-(sp)                        	| [$5e5a: push hl]
	move.l	(sp)+,a2                        	| [$5e5b: pop  ix]
	LOAD_ROM	0x40B4,a1                          	| [$5e5d: ld   de,$40B4]
	jbsr	store_de_in_struct_381e                            	| [$5e60: call $381E]
	move.b	#0x0A,(0x11,a2)                 	| [$5e63: ld   (ix+$11),$0A]
	clr.b	(0x00,a2)                        	| [$5e67: ld   (ix+$00),$00]
	move.b	#0x01,(0x01,a2)                 	| [$5e6b: ld   (ix+$01),$01]
	move.b	#0x02,(0x02,a2)                 	| [$5e6f: ld   (ix+$02),$02]
	jbsr	l_0f15                            	| [$5e73: call $0F15]
	move.w	(sp)+,d0                        	| [$5e76: pop  af]
	rts                                    	| [$5e77: ret]
l_5e78:
	move.b	round_number_8907(a6),d0                   	| [$5e78: ld   a,($8907)]
	and.b	#0x01,d0                         	| [$5e7b: and  $01]
	bne.b	0f                               	| [...]
	rts                                    	| [$5e7d: ret  z] [...]
0:
	lea	l_8848(a6),a3                      	| [$5e7e: ld   iy,$8848]
	move.b	#0x02,d1                        	| [$5e82: ld   b,$02]
	move.w	#0x0004,d3                      	| [$5e84: ld   de,$0004] 4
	clr.b	d0                               	| [$5e87: xor  a]
	move.b	d0,i_reg                              	| [$5e88: ld   i,a]
l_5e8a:
	jbsr	exx                               	| [$5e8a: exx]
	jbsr	l_5e98                            	| [$5e8b: call $5E98]
	jbsr	exx                               	| [$5e8e: exx]
	add.w	d3,a3                            	| [$5e8f: add  iy,de]
	move.b	#0x01,d0                        	| [$5e91: ld   a,$01]
	move.b	d0,i_reg                              	| [$5e93: ld   i,a]
	subq.b	#1,d1                           	| [...]
	jne	l_5e8a                             	| [$5e95: djnz $5E8A]
	rts                                    	| [$5e97: ret]
l_5e98:
	move.b	i_reg,d0                           	| [$5e98: ld   a,i]
	lea	l_8C90(a6),a2                      	| [$5e9a: ld   ix,$8C90]
	tst.b	d0                               	| [$5e9e: and  a]
	jeq	l_5ea5                             	| [$5e9f: jr   z,$5EA5]
	lea	l_8CA8(a6),a2                      	| [$5ea1: ld   ix,$8CA8]
l_5ea5:
	btst.b	#0,(0x00,a2)                    	| [$5ea5: bit  0,(ix+$00)]
	bne.b	0f                               	| [...]
	rts                                    	| [$5ea9: ret  z] [...]
0:
	STORE_RAM_POINTER	a2,ram_pointer_8D65(a6)            	| [$5eaa: ld   ($8D65),ix]
	
	btst.b	#1,(0x00,a2)                    	| [$5eae: bit  1,(ix+$00)]
	lea	sprite_shadow_ram_8840+0x48(a6),a2     	| [$5eb2: ld   ix,sprite_shadow_ram_8840+$48]
	move.b	#0x04,d1                        	| [$5eb6: ld   b,$04]
	lea	l_8C30(a6),a0                      	| [$5eb8: ld   hl,$8C30]
	jne	l_5f11                             	| [$5ebb: jr   nz,$5F11]
l_5ebd:
	move.b	(a0),d0                         	| [$5ebd: ld   a,(hl)]
	                               	| [$5ebe: and  a]
	jeq	l_5f06                             	| [$5ebf: jr   z,$5F06]
	                           	| [$5ec1: inc  l]
	move.b	(2,a0),d0                         	| [$5ec3: ld   a,(hl)]
	                           	| [$5ec4: dec  l]
	cmp.b	#0x04,d0                         	| [$5ec6: cp   $04]
	jcc	l_5f06                             	| [$5ec8: jr   nc,$5F06]
	jbsr	l_5f53                            	| [$5eca: call $5F53]
	jcc	l_5f06                             	| [$5ecd: jr   nc,$5F06]
	move.b	d0,d3                           	| [$5ecf: ld   d,a]
	move.b	(0x00,a3),d0                    	| [$5ed0: ld   a,(iy+$00)]
	sub.b	d4,d0                            	| [$5ed3: sub  e]
	jcc	l_5ed8                             	| [$5ed4: jr   nc,$5ED8]
	neg.b	d0                               	| [$5ed6: neg]
l_5ed8:
	cmp.b	#0x0A,d0                         	| [$5ed8: cp   $0A]
	jcc	l_5f06                             	| [$5eda: jr   nc,$5F06]
	move.b	(0x02,a3),d0                    	| [$5edc: ld   a,(iy+$02)]
	add.b	#0x08,d0                         	| [$5edf: add  a,$08]
	sub.b	d3,d0                            	| [$5ee1: sub  d]
	jcc	l_5ee6                             	| [$5ee2: jr   nc,$5EE6]
	neg.b	d0                               	| [$5ee4: neg]
l_5ee6:
	cmp.b	#0x09,d0                         	| [$5ee6: cp   $09]
	jcc	l_5f06                             	| [$5ee8: jr   nc,$5F06]
	CLEAR_XC_FLAGS                         	| [$5eea: xor  a]
	clr.b	d0                               	| [$5eea: xor  a]
	move.b	d0,(a0)+                         	| [$5eeb: ld   (hl),a]
	                           	| [$5eec: inc  hl]
	move.b	#0x01,(a0)+                      	| [$5eed: ld   (hl),$01]
	                           	| [$5eef: inc  hl]
	move.b	#0x08,(a0)                      	| [$5ef0: ld   (hl),$08]
	LOAD_RAM_POINTER	ram_pointer_8D65(a6),a2             	| [$5ef2: ld   ix,($8D65)]
	btst.b	#0,(0x07,a2)                    	| [$5ef6: bit  0,(ix+$07)]
	jne	l_5f02                             	| [$5efa: jr   nz,$5F02]
	LOAD_RAM_POINTER	ram_pointer_8D65(a6),a0             	| [$5efc: ld   hl,($8D65)]
	move.b	#0x17,d1                        	| [$5eff: ld   b,$17]
	jbsr	fill_area_0010                            	| [$5f01: rst  $10]
l_5f02:
	jbsr	l_0ef1                            	| [$5f02: call $0EF1]
	rts                                    	| [$5f05: ret]
l_5f06:
	move.w	#0x0004,d3                      	| [$5f06: ld   de,$0004] 4
	add.w	d3,a2                            	| [$5f09: add  ix,de]
	move.b	#0x18,d3                        	| [$5f0b: ld   e,$18]
	add.w	d3,a0                            	| [$5f0d: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5ebd                             	| [$5f0e: djnz $5EBD]
	rts                                    	| [$5f10: ret]
l_5f11:
	move.b	(a0),d0                         	| [$5f11: ld   a,(hl)]
	                               	| [$5f12: and  a]
	jeq	l_5f47                             	| [$5f13: jr   z,$5F47]
	cmp.b	#0x03,d0                         	| [$5f15: cp   $03]
	jeq	l_5f47                             	| [$5f17: jr   z,$5F47]
	jbsr	l_5f53                            	| [$5f19: call $5F53]
	jcc	l_5f47                             	| [$5f1c: jr   nc,$5F47]
	move.b	d0,d3                           	| [$5f1e: ld   d,a]
	move.b	(0x00,a3),d0                    	| [$5f1f: ld   a,(iy+$00)]
	sub.b	d4,d0                            	| [$5f22: sub  e]
	jcc	l_5f27                             	| [$5f23: jr   nc,$5F27]
	neg.b	d0                               	| [$5f25: neg]
l_5f27:
	cmp.b	#0x07,d0                         	| [$5f27: cp   $07]
	jcc	l_5f47                             	| [$5f29: jr   nc,$5F47]
	move.b	(0x02,a3),d0                    	| [$5f2b: ld   a,(iy+$02)]
	add.b	#0x08,d0                         	| [$5f2e: add  a,$08]
	sub.b	d3,d0                            	| [$5f30: sub  d]
	jcc	l_5f35                             	| [$5f31: jr   nc,$5F35]
	neg.b	d0                               	| [$5f33: neg]
l_5f35:
	cmp.b	#0x06,d0                         	| [$5f35: cp   $06]
	jcc	l_5f47                             	| [$5f37: jr   nc,$5F47]
	sne		d7
	move.b	#0x03,(a0)                      	| [$5f39: ld   (hl),$03]
	lea	l_8D19(a6),a0                      	| [$5f3b: ld   hl,$8D19]
	move.b	i_reg,d0                           	| [$5f3e: ld   a,i]
	tst.b	d7
	jeq	l_5f43                             	| [$5f40: jr   z,$5F43]
	addq.w	#1,a0                           	| [$5f42: inc  l]
l_5f43:
	move.b	#0x01,(a0)                      	| [$5f43: ld   (hl),$01]
	jra	l_5f02                             	| [$5f45: jr   $5F02]
l_5f47:
	move.w	#0x0004,d3                      	| [$5f47: ld   de,$0004] 4
	add.w	d3,a2                            	| [$5f4a: add  ix,de]
	move.w	#0x0018,d3                      	| [$5f4c: ld   de,$0018] 24
	add.w	d3,a0                            	| [$5f4f: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_5f11                             	| [$5f50: djnz $5F11]
	rts                                    	| [$5f52: ret]
l_5f53:
	move.b	#0x06,d4                        	| [$5f53: ld   e,$06]
	move.b	cabinet_upright_881F(a6),d0                   	| [$5f55: ld   a,($881F)]
	                               	| [$5f58: and  a]
	jne	l_5f5d                             	| [$5f59: jr   nz,$5F5D]
	move.b	#0xFE,d4                        	| [$5f5b: ld   e,$FE]
l_5f5d:
	move.b	(0x00,a2),d0                    	| [$5f5d: ld   a,(ix+$00)]
	add.b	d4,d0                            	| [$5f60: add  a,e]
	move.b	d0,d4                           	| [$5f61: ld   e,a]
	move.b	(0x02,a2),d0                    	| [$5f62: ld   a,(ix+$02)]
	add.b	#0x08,d0                         	| [$5f65: add  a,$08]
	cmp.b	#0xE0,d0                         	| [$5f67: cp   $E0]
	rts                                    	| [$5f69: ret]
l_5f6a:
	lea	l_8848(a6),a3                      	| [$5f6a: ld   iy,$8848]
	move.b	#0x02,d1                        	| [$5f6e: ld   b,$02]
	move.w	#0x0004,d3                      	| [$5f70: ld   de,$0004] 4
	CLEAR_XC_FLAGS                         	| [$5f73: xor  a]
	clr.b	d0                               	| [$5f73: xor  a]
	move	d0,i_reg                              	| [$5f74: ld   i,a]
l_5f76:
	jbsr	exx                               	| [$5f76: exx]
	jbsr	l_5f83                            	| [$5f77: call $5F83]
	jbsr	exx                               	| [$5f7a: exx]
	add.w	d3,a3                            	| [$5f7b: add  iy,de]
	move.b	d1,d0                           	| [$5f7d: ld   a,b]
	move	d0,i_reg                              	| [$5f7e: ld   i,a]
	subq.b	#1,d1                           	| [...]
	jne	l_5f76                             	| [$5f80: djnz $5F76]
	rts                                    	| [$5f82: ret]
l_5f83:
	lea	l_8C90(a6),a2                      	| [$5f83: ld   ix,$8C90]
	move.b	i_reg,d0                           	| [$5f87: ld   a,i]
	                               	| [$5f89: and  a]
	jeq	l_5f90                             	| [$5f8a: jr   z,$5F90]
	lea	l_8CA8(a6),a2                      	| [$5f8c: ld   ix,$8CA8]
l_5f90:
	move.b	(0x00,a2),d0                    	| [$5f90: ld   a,(ix+$00)]
	                               	| [$5f93: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$5f94: ret  z] [...]
0:
	move.b	d0,l_8D44(a6)                   	| [$5f95: ld   ($8D44),a]
	move.b	d0,d2                           	| [$5f98: ld   c,a]
	lea	sprite_shadow_ram_8840+0x10(a6),a2     	| [$5f99: ld   ix,sprite_shadow_ram_8840+$10]
	move.b	#0x06,d1                        	| [$5f9d: ld   b,$06]
	lea	l_8AE0(a6),a0                      	| [$5f9f: ld   hl,$8AE0]
l_5fa2:
	move.b	(a0),d0                         	| [$5fa2: ld   a,(hl)]
	                               	| [$5fa3: and  a]
	jeq	l_6018                             	| [$5fa4: jr   z,$6018]
	                           	| [$5fa6: inc  l]
	move.b	(2,a0),d0                         	| [$5fa8: ld   a,(hl)]
	                           	| [$5fa9: dec  l]
	cmp.b	#0x05,d0                         	| [$5fab: cp   $05]
	jne	l_6018                             	| [$5fad: jr   nz,$6018]
	move.b	#0x06,d4                        	| [$5faf: ld   e,$06]
	move.b	cabinet_upright_881F(a6),d0                   	| [$5fb1: ld   a,($881F)]
	                               	| [$5fb4: and  a]
	jne	l_5fb9                             	| [$5fb5: jr   nz,$5FB9]
	move.b	#0xFB,d4                        	| [$5fb7: ld   e,$FB]
l_5fb9:
	move.b	(0x00,a2),d0                    	| [$5fb9: ld   a,(ix+$00)]
	add.b	d4,d0                            	| [$5fbc: add  a,e]
	move.b	d0,d4                           	| [$5fbd: ld   e,a]
	move.b	(0x02,a2),d0                    	| [$5fbe: ld   a,(ix+$02)]
	add.b	#0x08,d0                         	| [$5fc1: add  a,$08]
	move.b	d0,d3                           	| [$5fc3: ld   d,a]
	move.b	(0x00,a3),d0                    	| [$5fc4: ld   a,(iy+$00)]
	sub.b	d4,d0                            	| [$5fc7: sub  e]
	jcc	l_5fcc                             	| [$5fc8: jr   nc,$5FCC]
	neg.b	d0                               	| [$5fca: neg]
l_5fcc:
	move.b	d0,d4                           	| [$5fcc: ld   e,a]
	move.b	d2,d0                           	| [$5fcd: ld   a,c]
	cmp.b	#0x03,d0                         	| [$5fce: cp   $03]
	jne	l_5fd9                             	| [$5fd1: jr   nz,$5FD9]
	move.b	d4,d0                           	| [$5fd0: ld   a,e]
	cmp.b	#0x10,d0                         	| [$5fd3: cp   $10]
	jcc	l_6018                             	| [$5fd5: jr   nc,$6018]
	jra	l_5fdd                             	| [$5fd7: jr   $5FDD]
l_5fd9:
	move.b	d4,d0                           	| [$5fd0: ld   a,e]
	cmp.b	#0x08,d0                         	| [$5fd9: cp   $08]
	jcc	l_6018                             	| [$5fdb: jr   nc,$6018]
l_5fdd:
	move.b	(0x02,a3),d0                    	| [$5fdd: ld   a,(iy+$02)]
	add.b	#0x08,d0                         	| [$5fe0: add  a,$08]
	sub.b	d3,d0                            	| [$5fe2: sub  d]
	jcc	l_5fe7                             	| [$5fe3: jr   nc,$5FE7]
	neg.b	d0                               	| [$5fe5: neg]
l_5fe7:
	move.b	d0,d4                           	| [$5fe7: ld   e,a]
	move.b	d2,d0                           	| [$5fe8: ld   a,c]
	move.b	d4,d0                           	| [$5feb: ld   a,e]
	cmp.b	#0x03,d0                         	| [$5fe9: cp   $03]
	jne	l_5ff4                             	| [$5fec: jr   nz,$5FF4]
	cmp.b	#0x12,d0                         	| [$5fee: cp   $12]
	jcc	l_6018                             	| [$5ff0: jr   nc,$6018]
	jra	l_5ff8                             	| [$5ff2: jr   $5FF8]
l_5ff4:
	move.b	d4,d0                           	| [$5feb: ld   a,e]
	cmp.b	#0x08,d0                         	| [$5ff4: cp   $08]
	jcc	l_6018                             	| [$5ff6: jr   nc,$6018]
l_5ff8:
	move.b	d2,d0                           	| [$5ff8: ld   a,c]
	cmp.b	#0x03,d0                         	| [$5ff9: cp   $03]
	jeq	l_6025                             	| [$5ffb: jr   z,$6025]

	move.l	a3,a0                        	| [$5ffd: push iy]
	LOAD_D5D6_FROM_A0_RAM                        	| [$5fff: pop  hl]
	move.b	D6,d0                           	| [$6000: ld   a,l]
	lea	l_8C91(a6),a0                      	| [$6001: ld   hl,$8C91]
	cmp.b	#0x48,d0                         	| [$6004: cp   $48]
	jeq	l_600b                             	| [$6006: jr   z,$600B]
	lea	l_8CA9(a6),a0                      	| [$6008: ld   hl,$8CA9]
l_600b:
	move.b	#0x01,(a0)                      	| [$600b: ld   (hl),$01]
	move.w	#0x0006,d3                      	| [$600d: ld   de,$0006] 6
	add.w	d3,a0                            	| [$6010: add  hl,de]
	move.b	#0x01,(a0)                      	| [$6011: ld   (hl),$01]
	jbsr	l_0f01                            	| [$6013: call $0F01]
	move.w	(sp)+,d0                        	| [$6016: pop  af]
	rts                                    	| [$6017: ret]
l_6018:
	move.w	#0x0004,d3                      	| [$6018: ld   de,$0004] 4
	add.w	d3,a2                            	| [$601b: add  ix,de]
	move.b	#0x18,d3                        	| [$601d: ld   e,$18]
	add.w	d3,a0                            	| [$601f: add  hl,de]
	subq.b	#1,d1                           	| [$6020: dec  b]
	jne	l_5fa2                             	| [$6021: jp   nz,$5FA2]
	rts                                    	| [$6024: ret]
l_6025:

	move.l	a0,-(sp)                        	| [$6025: push hl]
	move.l	(sp)+,a3                        	| [$6026: pop  iy]
	lea	l_8D45(a6),a0                      	| [$6028: ld   hl,$8D45]
	addq.b	#1,(a0)                         	| [$602b: inc  (hl)]
	jra	l_613d                             	| [$602c: jp   $613D]
l_602f:
	lea	l_8848(a6),a3                      	| [$602f: ld   iy,$8848]
	move.b	#0x02,d1                        	| [$6033: ld   b,$02]
	CLEAR_XC_FLAGS                         	| [$6035: xor  a]
	clr.b	d0                               	| [$6035: xor  a]
	move	d0,i_reg                             	| [$6036: ld   i,a]
	move.w	#0x0004,d3                      	| [$6038: ld   de,$0004] 4
l_603b:
	jbsr	exx                               	| [$603b: exx]
	jbsr	l_6048                            	| [$603c: call $6048]
	jbsr	exx                               	| [$603f: exx]
	add.w	d3,a3                            	| [$6040: add  iy,de]
	move.b	d1,d0                           	| [$6042: ld   a,b]
	move	d0,i_reg                              	| [$6043: ld   i,a]
	subq.b	#1,d1                           	| [...]
	jne	l_603b                             	| [$6045: djnz $603B]
	rts                                    	| [$6047: ret]
l_6048:
	lea	l_8C90(a6),a2                      	| [$6048: ld   ix,$8C90]
	move.b	i_reg,d0                           	| [$604c: ld   a,i]
	                               	| [$604e: and  a]
	jeq	l_6055                             	| [$604f: jr   z,$6055]
	lea	l_8CA8(a6),a2                      	| [$6051: ld   ix,$8CA8]
l_6055:
	move.b	(0x00,a2),d0                    	| [$6055: ld   a,(ix+$00)]
	                               	| [$6058: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$6059: ret  z] [...]
0:
	cmp.b	#0x03,d0                         	| [$605a: cp   $03]
	bne.b	0f                               	| [...]
	rts                                    	| [$605c: ret  z] [...]
0:
	move.b	d0,l_8D44(a6)                   	| [$605d: ld   ($8D44),a]
	lea	l_8868(a6),a2                      	| [$6060: ld   ix,$8868]
	move.b	#0x05,d1                        	| [$6064: ld   b,$05]
	lea	l_8B70(a6),a0                      	| [$6066: ld   hl,$8B70]
l_6069:
	move.b	(a0),d0                         	| [$6069: ld   a,(hl)]
	                               	| [$606a: and  a]
	jeq	l_60f2                             	| [$606b: jp   z,$60F2]
	                           	| [$606e: inc  l]
	move.b	(2,a0),d0                         	| [$6070: ld   a,(hl)]
	                           	| [$6071: dec  l]
	cmp.b	#0x05,d0                         	| [$6073: cp   $05]
	jne	l_60f2                             	| [$6075: jp   nz,$60F2]
	move.b	round_number_8907(a6),d0                   	| [$6078: ld   a,($8907)]
	btst.b	#0,d0                           	| [$607b: bit  0,a]
	jne	l_61b4                             	| [$607d: jp   nz,$61B4]
l_6080:
	move.b	#0x06,d4                        	| [$6080: ld   e,$06]
	move.b	cabinet_upright_881F(a6),d0                   	| [$6082: ld   a,($881F)]
	                               	| [$6085: and  a]
	jne	l_608a                             	| [$6086: jr   nz,$608A]
	move.b	#0xFE,d4                        	| [$6088: ld   e,$FE]
l_608a:
	move.b	(0x00,a2),d0                    	| [$608a: ld   a,(ix+$00)]
	add.b	d4,d0                            	| [$608d: add  a,e]
	move.b	d0,d4                           	| [$608e: ld   e,a]
	move.b	(0x02,a2),d0                    	| [$608f: ld   a,(ix+$02)]
	add.b	#0x08,d0                         	| [$6092: add  a,$08]
	move.b	d0,d3                           	| [$6094: ld   d,a]
	move.b	(0x00,a3),d0                    	| [$6095: ld   a,(iy+$00)]
	sub.b	d4,d0                            	| [$6098: sub  e]
	jcc	l_609d                             	| [$6099: jr   nc,$609D]
	neg.b	d0                               	| [$609b: neg]
l_609d:
	cmp.b	#0x09,d0                         	| [$609d: cp   $09]
	jcc	l_60f2                             	| [$609f: jr   nc,$60F2]
	move.b	(0x02,a3),d0                    	| [$60a1: ld   a,(iy+$02)]
	add.b	#0x08,d0                         	| [$60a4: add  a,$08]
	sub.b	d3,d0                            	| [$60a6: sub  d]
	jcc	l_60ab                             	| [$60a7: jr   nc,$60AB]
	neg.b	d0                               	| [$60a9: neg]
l_60ab:
	cmp.b	#0x08,d0                         	| [$60ab: cp   $08]
	jcc	l_60f2                             	| [$60ad: jr   nc,$60F2]
	move.w	#0x0014,d3                      	| [$60af: ld   de,$0014] 20
	add.w	d3,a0                            	| [$60b2: add  hl,de]
	lea	l_8AE0(a6),a3                      	| [$60b3: ld   iy,$8AE0]
	move.b	(a0),d0                         	| [$60b7: ld   a,(hl)]
	move.b	#0x06,d2                        	| [$60b8: ld   c,$06]
	move.b	#0x18,d3                        	| [$60ba: ld   e,$18]
l_60bc:
	cmp.b	(0x14,a3),d0                     	| [$60bc: cp   (iy+$14)]
	jeq	l_60c8                             	| [$60bf: jr   z,$60C8]
	add.w	d3,a3                            	| [$60c1: add  iy,de]
	subq.b	#1,d2                           	| [$60c3: dec  c]
	jne	l_60bc                             	| [$60c4: jr   nz,$60BC]
	jra	l_60d5                             	| [$60c6: jr   $60D5]
l_60c8:
	btst.b	#1,(0x16,a3)                    	| [$60c8: bit  1,(iy+$16)]
	jeq	l_60d5                             	| [$60cc: jr   z,$60D5]
	move.b	l_8D44(a6),d0                   	| [$60ce: ld   a,($8D44)]
	cmp.b	#0x03,d0                         	| [$60d1: cp   $03]
	jne	l_60ff                             	| [$60d3: jr   nz,$60FF]
l_60d5:
	move.w  #0xFFEC,d3                          	| [$60d5: ld   de,$FFEC]
	add.w	d3,a0                            	| [$60d8: add  hl,de]
l_60d9:
	lea	l_8D1C(a6),a3                      	| [$60d9: ld   iy,$8D1C]
	move.b	i_reg,d0                           	| [$60dd: ld   a,i]
	illegal
	jne	l_60e3                             	| [$60df: jr   nz,$60E3]
	subq.w	#1,a3                           	| [$60e1: dec  iy]
l_60e3:
	move.b	#0x01,(0x00,a3)                 	| [$60e3: ld   (iy+$00),$01]
	move.w	#0x04,d3                          	| [$60e7: ld   de,$0404]
	move.w	#0x04,d4                          	| [$60e7: ld   de,$0404]
	jbsr	l_619f                            	| [$60ea: call $619F]
	move.w    #0xFFFD,d3                          	| [$60ed: ld   de,$FFFD]
	jra	l_611f                             	| [$60f0: jr   $611F]
l_60f2:
	move.w	#0x0004,d3                      	| [$60f2: ld   de,$0004] 4
	add.w	d3,a2                            	| [$60f5: add  ix,de]
	move.b	#0x18,d3                        	| [$60f7: ld   e,$18]
	add.w	d3,a0                            	| [$60f9: add  hl,de]
	subq.b	#1,d1                           	| [$60fa: dec  b]
	jne	l_6069                             	| [$60fb: jp   nz,$6069]
	rts                                    	| [$60fe: ret]
l_60ff:
	lea	l_8C90(a6),a2                      	| [$60ff: ld   ix,$8C90]
	move.b	i_reg,d0                           	| [$6103: ld   a,i]
	* can't happen, 60ff is called with Z flag unset                             	| [$6105: jr   z,$610B]
	lea	l_8CA8(a6),a2                      	| [$6107: ld   ix,$8CA8]
l_610b:
	move.b	#0x01,(0x01,a2)                 	| [$610b: ld   (ix+$01),$01]
	move.b	#0x01,(0x07,a2)                 	| [$610f: ld   (ix+$07),$01]
	jbsr	l_0f01                            	| [$6113: call $0F01]
	move.w	(sp)+,d0                        	| [$6116: pop  af]
	rts                                    	| [$6117: ret]

	* unreached?
	move.b	l_8D45(a6),d0                   	| [$6118: ld   a,($8D45)]
	addq.b	#1,d0                           	| [$611b: inc  a]
	move.b	d0,l_8D45(a6)                   	| [$611c: ld   ($8D45),a]
l_611f:
	add.w	d3,a0                            	| [$611f: add  hl,de]
	move.b	(a0),d0                         	| [$6120: ld   a,(hl)]
	move.b	#0x06,d1                        	| [$6121: ld   b,$06]
	move.w	#0x0018,d3                      	| [$6123: ld   de,$0018] 24
	lea	l_8AE0(a6),a3                      	| [$6126: ld   iy,$8AE0]
l_612a:
	cmp.b	(0x14,a3),d0                     	| [$612a: cp   (iy+$14)]
	jeq	l_613d                             	| [$612d: jr   z,$613D]
	add.w	d3,a3                            	| [$612f: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_612a                             	| [$6131: djnz $612A]
	move.b	l_8D44(a6),d0                   	| [$6133: ld   a,($8D44)]
	cmp.b	#0x03,d0                         	| [$6136: cp   $03]
	bne.b	0f                               	| [...]
	rts                                    	| [$6138: ret  z] [...]
0:
	jbsr	l_0ef1                            	| [$6139: call $0EF1]
	rts                                    	| [$613c: ret]
l_613d:
	btst.b	#0,(0x00,a3)                    	| [$613d: bit  0,(iy+$00)]
	jeq	l_618a                             	| [$6141: jr   z,$618A]
	move.b	round_number_8907(a6),d0                   	| [$6143: ld   a,($8907)]
	and.b	#0x01,d0                         	| [$6146: and  $01]
	jne	l_6166                             	| [$6148: jr   nz,$6166]
	move.b	l_8D44(a6),d0                   	| [$614a: ld   a,($8D44)]
	cmp.b	#0x03,d0                         	| [$614d: cp   $03]
	jne	l_6166                             	| [$614f: jr   nz,$6166]
	move.b	(0x14,a3),d0                    	| [$6151: ld   a,(iy+$14)]
	lea	l_8B70(a6),a2                      	| [$6154: ld   ix,$8B70]
	move.w	#0x0018,d3                      	| [$6158: ld   de,$0018] 24
	move.b	#0x06,d1                        	| [$615b: ld   b,$06]
l_615d:
	cmp.b	(0x14,a2),d0                     	| [$615d: cp   (ix+$14)]
	jeq	l_6190                             	| [$6160: jr   z,$6190]
	add.w	d3,a2                            	| [$6162: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_615d                             	| [$6164: djnz $615D]
l_6166:
	clr.b	d0                               	| [$6166: xor  a]
	move.b	d0,(0x00,a3)                    	| [$6167: ld   (iy+$00),a]
	move.b	#0x01,(0x01,a3)                 	| [$616a: ld   (iy+$01),$01]
	move.b	#0x08,(0x02,a3)                 	| [$616e: ld   (iy+$02),$08]
	move.b	#0x07,(0x16,a3)                 	| [$6172: ld   (iy+$16),$07]
	move.b	#0x05,(0x17,a3)                 	| [$6176: ld   (iy+$17),$05]
	move.b	d0,(0x14,a3)                    	| [$617a: ld   (iy+$14),a]
	move.b	d0,(0x13,a3)                    	| [$617d: ld   (iy+$13),a]
	move.b	l_8D44(a6),d0                   	| [$6180: ld   a,($8D44)]
	cmp.b	#0x03,d0                         	| [$6183: cp   $03]
	jne	l_619a                             	| [$6185: jr   nz,$619A]
	jbsr	l_0efd                            	| [$6187: call $0EFD]
l_618a:
	clr.b	d0                               	| [$618a: xor  a]
	move.b	d0,l_8D44(a6)                   	| [$618b: ld   ($8D44),a]
	move.w	(sp)+,d0                        	| [$618e: pop  af]
	rts                                    	| [$618f: ret]
l_6190:
	move.b	#0x01,(0x08,a2)                 	| [$6190: ld   (ix+$08),$01]
	move.b	#0xD0,(0x0a,a2)                 	| [$6194: ld   (ix+$0a),$D0]
	jra	l_6166                             	| [$6198: jr   $6166]
l_619a:
	jbsr	l_0ef1                            	| [$619a: call $0EF1]
	jra	l_618a                             	| [$619d: jr   $618A]
l_619f:
	clr.b	(a0)                             	| [$619f: ld   (hl),$00]
	addq.w	#1,a0                           	| [$61a1: inc  hl]
	move.b	#0x01,(a0)+                      	| [$61a2: ld   (hl),$01]
	                           	| [$61a4: inc  hl]
	move.b	#0x08,(a0)                      	| [$61a5: ld   (hl),$08]
	move.w	#0x0010,d1                      	| [$61a7: ld   bc,$0010] 16
	add.w	d1,a0                            	| [$61aa: add  hl,bc]
	move.b	#0xFF,(a0)                      	| [$61ab: ld   (hl),$FF]
	move.b	#0x04,d2                        	| [$61ad: ld   c,$04]
	add.w	d1,a0                            	| [$61af: add  hl,bc]
	move.b	d4,(a0)+                         	| [$61b0: ld   (hl),e]
	                           	| [$61b1: inc  hl]
	move.b	d3,(a0)                         	| [$61b2: ld   (hl),d]
	rts                                    	| [$61b3: ret]
l_61b4:

	move.l	a0,-(sp)                        	| [$61b4: push hl]

	move.l	a3,-(sp)                        	| [$61b5: push iy]
	movem.w	d1/d2,-(sp)                    	| [$61b7: push bc]
	move.l	a4,-(sp)                        	| [$61b7: push bc]
	                           	| [$61b8: ld   a,l]
	add.w	#0x14,a0                         	| [$61b9: add  a,$14]
	                           	| [$61bb: ld   l,a]
	move.b	(a0),d0                         	| [$61bc: ld   a,(hl)]
	lea	l_8AE0(a6),a3                      	| [$61bd: ld   iy,$8AE0]
	move.w	#0x0018,d1                      	| [$61c1: ld   bc,$0018] 24
	move.b	#0x05,D6                        	| [$61c4: ld   l,$05]
l_61c6:
	cmp.b	(0x14,a3),d0                     	| [$61c6: cp   (iy+$14)]
	jeq	l_61d7                             	| [$61c9: jr   z,$61D7]
	add.w	d1,a3                            	| [$61cb: add  iy,bc]
	subq.b	#1,D6                           	| [$61cd: dec  l]
	jne	l_61c6                             	| [$61ce: jr   nz,$61C6]
l_61d0:
	move.l	(sp)+,a4                        	| [$61d0: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$61d0: pop  bc]
	move.l	(sp)+,a3                        	| [$61d1: pop  iy]
	move.l	(sp)+,a0                        	| [$61d3: pop  hl]
	jra	l_6080                             	| [$61d4: jp   $6080]
l_61d7:
	move.b	(0x0b,a3),d0                    	| [$61d7: ld   a,(iy+$0b)]
	                               	| [$61da: and  a]
	jne	l_61d0                             	| [$61db: jr   nz,$61D0]
	move.b	(0x16,a3),d0                    	| [$61dd: ld   a,(iy+$16)]
	move.l	(sp)+,a4                        	| [$61e0: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$61e0: pop  bc]
	move.l	(sp)+,a3                        	| [$61e1: pop  iy]
	move.l	(sp)+,a0                        	| [$61e3: pop  hl]
	and.b	#0xF0,d0                         	| [$61e4: and  $F0]
	jeq	l_6080                             	| [$61e6: jp   z,$6080]
	cmp.b	#0x40,d0                         	| [$61e9: cp   $40]
	jeq	l_61fc                             	| [$61eb: jr   z,$61FC]
	cmp.b	#0x50,d0                         	| [$61ed: cp   $50]
	jeq	l_6287                             	| [$61ef: jp   z,$6287]
	cmp.b	#0xF0,d0                         	| [$61f2: cp   $F0]
	jeq	l_630f                             	| [$61f4: jp   z,$630F]
	cmp.b	#0xD0,d0                         	| [$61f7: cp   $D0]
	jeq	l_6287                             	| [$61f9: jp   z,$6287]
l_61fc:
	move.b	#0x06,d4                        	| [$61fc: ld   e,$06]
	move.b	cabinet_upright_881F(a6),d0                   	| [$61fe: ld   a,($881F)]
	                               	| [$6201: and  a]
	jne	l_6206                             	| [$6202: jr   nz,$6206]
	move.b	#0xFE,d4                        	| [$6204: ld   e,$FE]
l_6206:
	move.b	(0x00,a2),d0                    	| [$6206: ld   a,(ix+$00)]
	add.b	d4,d0                            	| [$6209: add  a,e]
	move.b	d0,d4                           	| [$620a: ld   e,a]
l_620b:
	move.b	(0x02,a2),d0                    	| [$620b: ld   a,(ix+$02)]
	add.b	#0x08,d0                         	| [$620e: add  a,$08]
	move.b	d0,d3                           	| [$6210: ld   d,a]
	move.b	(0x00,a3),d0                    	| [$6211: ld   a,(iy+$00)]
	sub.b	d4,d0                            	| [$6214: sub  e]
	jcc	l_6219                             	| [$6215: jr   nc,$6219]
	neg.b	d0                               	| [$6217: neg]
l_6219:
	cmp.b	#0x09,d0                         	| [$6219: cp   $09]
	jcc	l_60f2                             	| [$621b: jp   nc,$60F2]
	move.b	(0x02,a3),d0                    	| [$621e: ld   a,(iy+$02)]
	add.b	#0x08,d0                         	| [$6221: add  a,$08]
	sub.b	d3,d0                            	| [$6223: sub  d]
	jcc	l_6228                             	| [$6224: jr   nc,$6228]
	neg.b	d0                               	| [$6226: neg]
l_6228:
	cmp.b	#0x08,d0                         	| [$6228: cp   $08]
	jcc	l_60f2                             	| [$622a: jp   nc,$60F2]

	move.l	a0,a2                        	| [$622d: push hl]
	                        	| [$622e: pop  ix]
	LOAD_ROM	0x6343,a1                          	| [$6230: ld   de,$6343]
	jbsr	store_de_in_struct_381e                            	| [$6233: call $381E]
	LOAD_ROM	0x6358,a0                          	| [$6236: ld   hl,$6358]
	move.b	round_number_8907(a6),d0                   	| [$6239: ld   a,($8907)]
	and.b	#0x07,d0                         	| [$623c: and  $07]
	roxr.b	#1,d0                           	| [$623e: rra]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$623f: rst  $20]
												| [$6240: ld   l,a]
												| [$6241: ld   a,(ix+$0a)]
												| [$6244: add  a,l]
	add.b	d0,(0x0a,a2)                    	| [$6245: ld   (ix+$0a),a]
	lea	l_8AE0(a6),a3                      	| [$6248: ld   iy,$8AE0]
	move.b	(0x14,a2),d0                    	| [$624c: ld   a,(ix+$14)]
	move.b	#0x06,d2                        	| [$624f: ld   c,$06]
	move.w	#0x0018,d3                      	| [$6251: ld   de,$0018] 24
l_6254:
	cmp.b	(0x14,a3),d0                     	| [$6254: cp   (iy+$14)]
	jeq	l_625e                             	| [$6257: jr   z,$625E]
	add.w	d3,a3                            	| [$6259: add  iy,de]
	subq.b	#1,d2                           	| [$625b: dec  c]
	jne	l_6254                             	| [$625c: jr   nz,$6254]
l_625e:
	LOAD_ROM	0x6358,a0                          	| [$625e: ld   hl,$6358]
	move.b	round_number_8907(a6),d0                   	| [$6261: ld   a,($8907)]
	and.b	#0x07,d0                         	| [$6264: and  $07]
	roxr.b	#1,d0                           	| [$6266: rra]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$6267: rst  $20]
												| [$6268: ld   l,a]
												| [$6269: ld   a,(iy+$0a)]
													| [$626c: add  a,l]
	add.b	d0,(0x0a,a3)                    	| [$626d: ld   (iy+$0a),a]
	bset.b	#4,(0x16,a3)                    	| [$6270: set  4,(iy+$16)]
l_6274:
	lea	l_8C90(a6),a0                      	| [$6274: ld   hl,$8C90]
	move.b	i_reg,d0                           	| [$6277: ld   a,i]
	illegal
	jeq	l_627e                             	| [$6279: jr   z,$627E]
	lea	l_8CA8(a6),a0                      	| [$627b: ld   hl,$8CA8]
l_627e:
	move.b	#0x18,d1                        	| [$627e: ld   b,$18]
	CLEAR_XC_FLAGS                         	| [$6280: xor  a]
	clr.b	d0                               	| [$6280: xor  a]
	jbsr	fill_area_0010                            	| [$6281: rst  $10]
	jbsr	l_0ef1                            	| [$6282: call $0EF1]
	move.w	(sp)+,d0                        	| [$6285: pop  af]
	rts                                    	| [$6286: ret]
l_6287:
	move.b	d0,d2                           	| [$6287: ld   c,a]
	move.b	#0x06,d4                        	| [$6288: ld   e,$06]
	move.b	cabinet_upright_881F(a6),d0                   	| [$628a: ld   a,($881F)]
	                               	| [$628d: and  a]
	jne	l_6292                             	| [$628e: jr   nz,$6292]
	move.b	#0xFE,d4                        	| [$6290: ld   e,$FE]
l_6292:
	move.b	(0x00,a2),d0                    	| [$6292: ld   a,(ix+$00)]
	add.b	d4,d0                            	| [$6295: add  a,e]
	move.b	d0,d4                           	| [$6296: ld   e,a]
	move.b	(0x02,a2),d0                    	| [$6297: ld   a,(ix+$02)]
	add.b	#0x08,d0                         	| [$629a: add  a,$08]
	move.b	d0,d3                           	| [$629c: ld   d,a]
	move.b	(0x00,a3),d0                    	| [$629d: ld   a,(iy+$00)]
	sub.b	d4,d0                            	| [$62a0: sub  e]
	jcc	l_62a5                             	| [$62a1: jr   nc,$62A5]
	neg.b	d0                               	| [$62a3: neg]
l_62a5:
	cmp.b	#0x06,d0                         	| [$62a5: cp   $06]
	jcc	l_60f2                             	| [$62a7: jp   nc,$60F2]
	move.b	(0x02,a3),d0                    	| [$62aa: ld   a,(iy+$02)]
	add.b	#0x08,d0                         	| [$62ad: add  a,$08]
	sub.b	d3,d0                            	| [$62af: sub  d]
	jcc	l_62b4                             	| [$62b0: jr   nc,$62B4]
	neg.b	d0                               	| [$62b2: neg]
l_62b4:
	cmp.b	#0x07,d0                         	| [$62b4: cp   $07]
	jcc	l_60f2                             	| [$62b6: jp   nc,$60F2]
	move.b	d2,d0                           	| [$62b9: ld   a,c]
	cmp.b	#0x50,d0                         	| [$62ba: cp   $50]
	jeq	l_60d9                             	| [$62bc: jp   z,$60D9]

	move.l	a0,a2                        	| [$62bf: push hl]
	                        	| [$62c0: pop  ix]
	LOAD_ROM	0x6349,a1                          	| [$62c2: ld   de,$6349]
	jbsr	store_de_in_struct_381e                            	| [$62c5: call $381E]
	LOAD_ROM	0x6360,a0                          	| [$62c8: ld   hl,$6360]
	move.b	round_number_8907(a6),d0                   	| [$62cb: ld   a,($8907)]
	and.b	#0x07,d0                         	| [$62ce: and  $07]
	roxr.b	#1,d0                           	| [$62d0: rra]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$62d1: rst  $20]
	                           	| [$62d2: ld   l,a]
	add.b	d0,(0x0a,a2)                    	| [$62d3: ld   a,(ix+$0a)]
	                            	| [$62d6: add  a,l]
	                    	| [$62d7: ld   (ix+$0a),a]
	lea	l_8AE0(a6),a3                      	| [$62da: ld   iy,$8AE0]
	move.b	(0x14,a2),d0                    	| [$62de: ld   a,(ix+$14)]
	move.b	#0x06,d2                        	| [$62e1: ld   c,$06]
	move.w	#0x0018,d3                      	| [$62e3: ld   de,$0018] 24
l_62e6:
	cmp.b	(0x14,a3),d0                     	| [$62e6: cp   (iy+$14)]
	jeq	l_62f0                             	| [$62e9: jr   z,$62F0]
	add.w	d3,a3                            	| [$62eb: add  iy,de]
	subq.b	#1,d2                           	| [$62ed: dec  c]
	jne	l_62e6                             	| [$62ee: jr   nz,$62E6]
l_62f0:
	LOAD_ROM	0x6360,a0                          	| [$62f0: ld   hl,$6360]
	move.b	round_number_8907(a6),d0                   	| [$62f3: ld   a,($8907)]
	and.b	#0x07,d0                         	| [$62f6: and  $07]
	roxr.b	#1,d0                           	| [$62f8: rra]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$62f9: rst  $20]
												| [$62fa: ld   l,a]
												| [$62fb: ld   a,(iy+$0a)]
													| [$62fe: add  a,l]
	add.b	d0,(0x0a,a3)                    	| [$62ff: ld   (iy+$0a),a]
	bset.b	#5,(0x16,a3)                    	| [$6302: set  5,(iy+$16)]
	LOAD_ROM	0x634F,a1                          	| [$6306: ld   de,$634F]
	jbsr	store_de_in_struct_5c75                            	| [$6309: call $5C75]
	jra	l_6274                             	| [$630c: jp   $6274]
l_630f:
	move.b	#0x06,d4                        	| [$630f: ld   e,$06]
	move.b	cabinet_upright_881F(a6),d0                   	| [$6311: ld   a,($881F)]
	                               	| [$6314: and  a]
	jne	l_6319                             	| [$6315: jr   nz,$6319]
	move.b	#0xFE,d4                        	| [$6317: ld   e,$FE]
l_6319:
	move.b	(0x00,a2),d0                    	| [$6319: ld   a,(ix+$00)]
	add.b	d4,d0                            	| [$631c: add  a,e]
	move.b	d0,d4                           	| [$631d: ld   e,a]
	move.b	(0x02,a2),d0                    	| [$631e: ld   a,(ix+$02)]
	add.b	#0x08,d0                         	| [$6321: add  a,$08]
	move.b	d0,d3                           	| [$6323: ld   d,a]
	move.b	(0x00,a3),d0                    	| [$6324: ld   a,(iy+$00)]
	sub.b	d4,d0                            	| [$6327: sub  e]
	jcc	l_632c                             	| [$6328: jr   nc,$632C]
	neg.b	d0                               	| [$632a: neg]
l_632c:
	cmp.b	#0x05,d0                         	| [$632c: cp   $05]
	jcc	l_60f2                             	| [$632e: jp   nc,$60F2]
	move.b	(0x02,a3),d0                    	| [$6331: ld   a,(iy+$02)]
	add.b	#0x08,d0                         	| [$6334: add  a,$08]
	sub.b	d3,d0                            	| [$6336: sub  d]
	jcc	l_633b                             	| [$6337: jr   nc,$633B]
	neg.b	d0                               	| [$6339: neg]
l_633b:
	cmp.b	#0x05,d0                         	| [$633b: cp   $05]
	jcc	l_60f2                             	| [$633d: jp   nc,$60F2]
	jra	l_60d9                             	| [$6340: jp   $60D9]

l_6368:
	lea	l_8848(a6),a3                      	| [$6368: ld   iy,$8848]
	move.b	#0x02,d1                        	| [$636c: ld   b,$02]
	move.w	#0x0004,d3                      	| [$636e: ld   de,$0004] 4
	CLEAR_XC_FLAGS                         	| [$6371: xor  a]
	clr.b	d0                               	| [$6371: xor  a]
	move	d0,i_reg                              	| [$6372: ld   i,a]
l_6374:
	jbsr	exx                               	| [$6374: exx]
	jbsr	l_6381                            	| [$6375: call $6381]
	jbsr	exx                               	| [$6378: exx]
	add.w	d3,a3                            	| [$6379: add  iy,de]
	move.b	d3,d0                           	| [$637b: ld   a,e]
	move	d0,i_reg                              	| [$637c: ld   i,a]
	subq.b	#1,d1                           	| [...]
	jne	l_6374                             	| [$637e: djnz $6374]
	rts                                    	| [$6380: ret]
l_6381:
	lea	sprite_shadow_ram_8840+0x3C(a6),a2     	| [$6381: ld   ix,sprite_shadow_ram_8840+$3C]
	move.b	#0x03,d1                        	| [$6385: ld   b,$03]
	lea	l_8BE8(a6),a0                      	| [$6387: ld   hl,$8BE8]
l_638a:
	move.b	(a0),d0                         	| [$638a: ld   a,(hl)]
	                               	| [$638b: and  a]
	jeq	l_63ef                             	| [$638c: jr   z,$63EF]
	move.b	#0x05,d4                        	| [$638e: ld   e,$05]
	move.b	cabinet_upright_881F(a6),d0                   	| [$6390: ld   a,($881F)]
	                               	| [$6393: and  a]
	jne	l_6398                             	| [$6394: jr   nz,$6398]
	move.b	#0xFE,d4                        	| [$6396: ld   e,$FE]
l_6398:
	move.b	(0x00,a2),d0                    	| [$6398: ld   a,(ix+$00)]
	add.b	d4,d0                            	| [$639b: add  a,e]
	move.b	d0,d4                           	| [$639c: ld   e,a]
	move.b	(0x02,a2),d0                    	| [$639d: ld   a,(ix+$02)]
	add.b	#0x08,d0                         	| [$63a0: add  a,$08]
	move.b	d0,d3                           	| [$63a2: ld   d,a]
	move.b	(0x00,a3),d0                    	| [$63a3: ld   a,(iy+$00)]
	sub.b	d4,d0                            	| [$63a6: sub  e]
	jcc	l_63ab                             	| [$63a7: jr   nc,$63AB]
	neg.b	d0                               	| [$63a9: neg]
l_63ab:
	cmp.b	#0x06,d0                         	| [$63ab: cp   $06]
	jcc	l_63ef                             	| [$63ad: jr   nc,$63EF]
	move.b	(0x02,a3),d0                    	| [$63af: ld   a,(iy+$02)]
	add.b	#0x08,d0                         	| [$63b2: add  a,$08]
	sub.b	d3,d0                            	| [$63b4: sub  d]
	jcc	l_63b9                             	| [$63b5: jr   nc,$63B9]
	neg.b	d0                               	| [$63b7: neg]
l_63b9:
	cmp.b	#0x06,d0                         	| [$63b9: cp   $06]
	jcc	l_63ef                             	| [$63bb: jr   nc,$63EF]

	move.l	a0,-(sp)                        	| [$63bd: push hl]
	move.l	(sp)+,a2                        	| [$63be: pop  ix]
	clr.b	(0x00,a2)                        	| [$63c0: ld   (ix+$00),$00]
	move.b	#0x01,(0x01,a2)                 	| [$63c4: ld   (ix+$01),$01]
	move.b	#0x02,(0x02,a2)                 	| [$63c8: ld   (ix+$02),$02]
	move.b	#0x28,(0x11,a2)                 	| [$63cc: ld   (ix+$11),$28]
	move.w	#0x000F,d3                      	| [$63d0: ld   de,$000F] 15
	lea	l_8D1B(a6),a0                      	| [$63d3: ld   hl,$8D1B]
	move.b	i_reg,d0                           	| [$63d6: ld   a,i]
	                               	| [$63d8: and  a]
	jeq	l_63de                             	| [$63d9: jr   z,$63DE]
	lea	l_8D1C(a6),a0                      	| [$63db: ld   hl,$8D1C]
l_63de:
	move.b	#0x01,(a0)                      	| [$63de: ld   (hl),$01]
	LOAD_ROM	0x63FB,a1                          	| [$63e0: ld   de,$63FB]
	jbsr	store_de_in_struct_381e                            	| [$63e3: call $381E]
	jbsr	l_0ef9                            	| [$63e6: call $0EF9]
	move.w	#0x0315,d3                          	| [$63e9: ld   de,$0315]
	jbsr	update_88A0_0038                            	| [$63ec: rst  $38]
	move.w	(sp)+,d0                        	| [$63ed: pop  af]
	rts                                    	| [$63ee: ret]
l_63ef:
	move.w	#0x0004,d3                      	| [$63ef: ld   de,$0004] 4
	add.w	d3,a2                            	| [$63f2: add  ix,de]
	move.w	#0x0018,d3                      	| [$63f4: ld   de,$0018] 24
	add.w	d3,a0                            	| [$63f7: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_638a                             	| [$63f8: djnz $638A]
	rts                                    	| [$63fa: ret]

l_6404:
	move.b	is_bonus_stage_8F50(a6),d0				| [$6404:  ld   a,($8F50)] 
	                               	| [$6407: and  a]
	jne	l_6410                             	| [$6408: jr   nz,$6410]
	move.b	round_number_8907(a6),d0                   	| [$640a: ld   a,($8907)]
	and.b	#0x01,d0                         	| [$640d: and  $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$640f: ret  nz] [...]
0:
l_6410:
	lea	l_8848(a6),a3                      	| [$6410: ld   iy,$8848]
	move.b	#0x02,d1                        	| [$6414: ld   b,$02]
	move.w	#0x0004,d3                      	| [$6416: ld   de,$0004] 4
	CLEAR_XC_FLAGS                         	| [$6419: xor  a]
	clr.b	d0                               	| [$6419: xor  a]
	move	d0,i_reg                              	| [$641a: ld   i,a]
l_641c:
	jbsr	exx                               	| [$641c: exx]
	jbsr	l_6435                            	| [$641d: call $6435]
	jbsr	exx                               	| [$6420: exx]
	add.w	d3,a3                            	| [$6421: add  iy,de]
	move.b	d3,d0                           	| [$6423: ld   a,e]
	move	d0,i_reg                              	| [$6424: ld   i,a]
	subq.b	#1,d1                           	| [...]
	jne	l_641c                             	| [$6426: djnz $641C]
	rts                                    	| [$6428: ret]
l_6429:
	move.w	#0x0004,d3                      	| [$6429: ld   de,$0004] 4
	add.w	d3,a2                            	| [$642c: add  ix,de]
	move.w	#0x0018,d3                      	| [$642e: ld   de,$0018] 24
	add.w	d3,a0                            	| [$6431: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_644b                             	| [$6432: djnz $644B]
	rts                                    	| [$6434: ret]
l_6435:
	lea	l_888C(a6),a2                      	| [$6435: ld   ix,$888C]
	lea	l_8C48(a6),a0                      	| [$6439: ld   hl,$8C48]
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$643c: ld   a,($8F50)]
l_643f:
	                               	| [$643f: and  a]
	jeq	l_6449                             	| [$6440: jr   z,$6449]
	lea	sprite_shadow_ram_8840+0x3C(a6),a2     	| [$6442: ld   ix,sprite_shadow_ram_8840+$3C]
	lea	l_8BE8(a6),a0                      	| [$6446: ld   hl,$8BE8]
l_6449:
	move.b	#0x03,d1                        	| [$6449: ld   b,$03]
l_644b:
	move.b	(a0),d0                         	| [$644b: ld   a,(hl)]
	                               	| [$644c: and  a]
	jeq	l_6429                             	| [$644d: jr   z,$6429]
	move.b	#0x05,d4                        	| [$644f: ld   e,$05]
	move.b	cabinet_upright_881F(a6),d0                   	| [$6451: ld   a,($881F)]
	                               	| [$6454: and  a]
	jne	l_6459                             	| [$6455: jr   nz,$6459]
	move.b	#0xFE,d4                        	| [$6457: ld   e,$FE]
l_6459:
	move.b	(0x00,a2),d0                    	| [$6459: ld   a,(ix+$00)]
	add.b	d4,d0                            	| [$645c: add  a,e]
	move.b	d0,d4                           	| [$645d: ld   e,a]
	move.b	(0x02,a2),d0                    	| [$645e: ld   a,(ix+$02)]
	add.b	#0x08,d0                         	| [$6461: add  a,$08]
	move.b	d0,d3                           	| [$6463: ld   d,a]
	move.b	(0x00,a3),d0                    	| [$6464: ld   a,(iy+$00)]
	sub.b	d4,d0                            	| [$6467: sub  e]
	jcc	l_646c                             	| [$6468: jr   nc,$646C]
	neg.b	d0                               	| [$646a: neg]
l_646c:
	cmp.b	#0x07,d0                         	| [$646c: cp   $07]
	jcc	l_6429                             	| [$646e: jr   nc,$6429]
	move.b	(0x02,a3),d0                    	| [$6470: ld   a,(iy+$02)]
	add.b	#0x08,d0                         	| [$6473: add  a,$08]
	sub.b	d3,d0                            	| [$6475: sub  d]
	jcc	l_647a                             	| [$6476: jr   nc,$647A]
	neg.b	d0                               	| [$6478: neg]
l_647a:
	cmp.b	#0x07,d0                         	| [$647a: cp   $07]
	jcc	l_6429                             	| [$647c: jr   nc,$6429]

	move.l	a0,a2                        	| [$647e: push hl]
	                        	| [$647f: pop  ix]
	clr.b	(0x00,a2)                        	| [$6481: ld   (ix+$00),$00]
	move.b	#0x01,(0x01,a2)                 	| [$6485: ld   (ix+$01),$01]
	move.b	#0x02,(0x02,a2)                 	| [$6489: ld   (ix+$02),$02]
	move.b	#0x20,(0x11,a2)                 	| [$648d: ld   (ix+$11),$20]
	move.w	#0x000F,d3                      	| [$6491: ld   de,$000F] 15
	lea	l_8D1B(a6),a0                      	| [$6494: ld   hl,$8D1B]
	move.b	i_reg,d0                           	| [$6497: ld   a,i]
	                               	| [$6499: and  a]
	jeq	l_649f                             	| [$649a: jr   z,$649F]
	lea	l_8D1C(a6),a0                      	| [$649c: ld   hl,$8D1C]
l_649f:
	move.b	#0x01,(a0)                      	| [$649f: ld   (hl),$01]
	LOAD_ROM	0x64DF,a1                          	| [$64a1: ld   de,$64DF]
	jbsr	store_de_in_struct_381e                            	| [$64a4: call $381E]
	jbsr	l_0ef5                            	| [$64a7: call $0EF5]
	move.b	is_bonus_stage_8F50(a6),d0                   	| [$64aa: ld   a,($8F50)]
	                               	| [$64ad: and  a]
	jne	l_64b4                             	| [$64ae: jr   nz,$64B4]
l_64b0:
	move.w	#0x0315,d3                          	| [$64b0: ld   de,$0315]
	jbsr	update_88A0_0038                            	| [$64b3: rst  $38]
l_64b4:
	lea	l_8F52(a6),a0                      	| [$64b4: ld   hl,$8F52]
	addq.b	#1,(a0)                         	| [$64b7: inc  (hl)]
												| [$64b8: ld   de,$0BC2]
												| [$64bb: ld   hl,$64D0]
								
												| [$64be: ld   a,(de)]
												| [$64bf: sub  (hl)]
												| [$64c0: jr   nz,$64CA]
												| [$64c2: dec  de]
												| [$64c3: inc  hl]
												| [$64c4: ld   a,(hl)]
												| [$64c5: dec  a]
												| [$64c6: jr   z,$64CE]
												| [$64c8: jr   $64BE]
								
														| [$64ca: ld   hl,$8DF9]
										| [$64cd: inc  (hl)]
l_64ce:
	move.w	(sp)+,d0                        	| [$64ce: pop  af]
	rts                                    	| [$64cf: ret]

l_64e2:
	jbsr	animate_pigs_in_house_intro_6b13                            	| [$64e2: call $6B13]
	LOAD_D3D4_FROM_A1_ROM
	LOAD_D5D6_FROM_A0_RAM
	move.b	d4,d6                           	| [$64e4: ld   l,e]
	lea	l_8C78(a6),a2                      	| [$64e5: ld   ix,$8C78]
	jbsr	l_64fb                            	| [$64e9: call $64FB]
	lea	l_8AE0(a6),a2                      	| [$64ec: ld   ix,$8AE0]
	lea	l_8C78(a6),a3                      	| [$64f0: ld   iy,$8C78]
	jbsr	l_66c5                            	| [$64f4: call $66C5]
	jbsr	l_6822                            	| [$64f7: call $6822]
	rts                                    	| [$64fa: ret]
l_64fb:
	move.b	(0x02,a2),d0                    	| [$64fb: ld   a,(ix+$02)]
	jbsr	jump_from_table_below_0028                            	| [$64fe: rst  $28]
jump_table_64FF:
	.long	game_intro_init_6505
	.long	game_intro_pigs_arrive_6566
	.long	game_intro_wolf_arrive_6666


game_intro_init_6505:
	lea	intro_timer_8929(a6),a0                      	| [$6505: ld   hl,$8929]
	move.b	#0x1C,(a0)                      	| [$6508: ld   (hl),$1C]
	move.w    #0xFFE8,d3                          	| [$650a: ld   de,$FFE8]
	move.b	#0x03,d1                        	| [$650d: ld   b,$03]
	lea	intro_timer_8929+2(a6),a0             	| [$650f: ld   l,$2B]
	move.b	#0x08,(a0)                      	| [$6511: ld   (hl),$08]
l_6513:
	jbsr	exx                               	| [$6513: exx]
	jbsr	l_6523                            	| [$6514: call $6523]
	jbsr	exx                               	| [$6517: exx]
	addq.b	#1,(0x02,a2)                    	| [$6518: inc  (ix+$02)]
	add.w	d3,a2                            	| [$651b: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_6513                             	| [$651d: djnz $6513]
	jbsr	l_0f88                            	| [$651f: call $0F88]
	rts                                    	| [$6522: ret]
l_6523:
	move.b	(0x00,a2),d0                    	| [$6523: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$6526: or   (ix+$01)]
	ror.b	#1,d0                            	| [$6529: rrca]
	bcc.b	0f                               	| [...]
	rts                                    	| [$652a: ret  c] [...]
0:
* checks protection/checksum failed
     	| [$652b: ld   a,(checksum_failed_8EF0)]
| [$652e: and  a]
         	| [...]
       	| [$652f: ret  nz] failed: returns [...]
0:
	move.b	#0x01,(0x00,a2)                 	| [$6530: ld   (ix+$00),$01]
	move.b	d0,(0x03,a2)                    	| [$6534: ld   (ix+$03),a]
	move.b	d0,(0x05,a2)                    	| [$6537: ld   (ix+$05),a]
	move.b	#0x15,(0x04,a2)                 	| [$653a: ld   (ix+$04),$15]
	move.b	intro_timer_8929(a6),d0                   	| [$653e: ld   a,($8929)]
	move.b	d0,(0x06,a2)                    	| [$6541: ld   (ix+$06),a]
	subq.b	#0x02,d0                        	| [$6544: sub  $02]
	move.b	d0,intro_timer_8929(a6)                   	| [$6546: ld   ($8929),a]
	move.b	#0x03,(0x0f,a2)                 	| [$6549: ld   (ix+$0f),$03]
	move.b	#0xC0,(0x10,a2)                 	| [$654d: ld   (ix+$10),$C0]
	move.b	#0x30,(0x08,a2)                 	| [$6551: ld   (ix+$08),$30]
	move.b	#0xF0,(0x09,a2)                 	| [$6555: ld   (ix+$09),$F0]
	move.w	#0x0611,d3                          	| [$6559: ld   de,$0611]
	jbsr	update_88A0_0038                            	| [$655c: rst  $38]
	move.b	round_number_8907(a6),d0                   	| [$655d: ld   a,($8907)]
	                               	| [$6560: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$6561: ret  nz] [...]
0:
	move.b	#0x0007,d3                        	| [$6562: ld   e,$07]
	jbsr	update_88A0_0038                            	| [$6564: rst  $38]
	rts                                    	| [$6565: ret]

game_intro_pigs_arrive_6566:
	lea	l_892F(a6),a0                      	| [$6566: ld   hl,$892F]
	move.b	(a0),d0                         	| [$6569: ld   a,(hl)]
	                               	| [$656a: and  a]
	jeq	l_656f                             	| [$656b: jr   z,$656F]
	subq.b	#1,(a0)                         	| [$656d: dec  (hl)]
	rts                                    	| [$656e: ret]
l_656f:
	lea	l_892C(a6),a0                        	| [$656f: ld   l,$2C]
	addq.b	#1,(a0)                         	| [$6571: inc  (hl)]
	btst.b	#0,(a0)                         	| [$6572: bit  0,(hl)]
	sne		d7
	lea	l_892F(a6),a0                        	| [$6574: ld   l,$2F]
	tst.b	d7
	jne	l_6596                             	| [$6576: jr   nz,$6596]
	move.b	#0x06,(a0)                      	| [$6578: ld   (hl),$06]
	move.b	(0x03,a2),d0                    	| [$657a: ld   a,(ix+$03)]
	add.b	(0x08,a2),d0                     	| [$657d: add  a,(ix+$08)]
	jcc	l_658b                             	| [$6580: jr   nc,$658B]
	addq.b	#1,(0x04,a2)                    	| [$6582: inc  (ix+$04)]
	addq.b	#1,(-0x14,a2)                   	| [$6585: inc  (ix-$14)]
	addq.b	#1,(-0x2c,a2)                   	| [$6588: inc  (ix-$2c)]
l_658b:
	move.b	d0,(0x03,a2)                    	| [$658b: ld   (ix+$03),a]
	move.b	d0,(-0x15,a2)                   	| [$658e: ld   (ix-$15),a]
	move.b	d0,(-0x2d,a2)                   	| [$6591: ld   (ix-$2d),a]
	jra	l_65ea                             	| [$6594: jr   $65EA]
l_6596:
	move.b	#0x0C,(a0)                      	| [$6596: ld   (hl),$0C]
	move.b	(0x03,a2),d0                    	| [$6598: ld   a,(ix+$03)]
	sub.b	(0x08,a2),d0                     	| [$659b: sub  (ix+$08)]
	jcc	l_65a9                             	| [$659e: jr   nc,$65A9]
	subq.b	#1,(0x04,a2)                    	| [$65a0: dec  (ix+$04)]
	subq.b	#1,(-0x14,a2)                   	| [$65a3: dec  (ix-$14)]
	subq.b	#1,(-0x2c,a2)                   	| [$65a6: dec  (ix-$2c)]
l_65a9:
	move.b	d0,(0x03,a2)                    	| [$65a9: ld   (ix+$03),a]
	move.b	d0,(-0x15,a2)                   	| [$65ac: ld   (ix-$15),a]
	move.b	d0,(-0x2d,a2)                   	| [$65af: ld   (ix-$2d),a]
	move.b	(0x05,a2),d0                    	| [$65b2: ld   a,(ix+$05)]
	sub.b	(0x09,a2),d0                     	| [$65b5: sub  (ix+$09)]
	move.b	d0,(0x05,a2)                    	| [$65b8: ld   (ix+$05),a]
	move.b	d0,(-0x13,a2)                   	| [$65bb: ld   (ix-$13),a]
	move.b	d0,(-0x2b,a2)                   	| [$65be: ld   (ix-$2b),a]
	SET_C_FROM_X
	jcc	l_65d5                             	| [$65c1: jr   nc,$65D5]
	move.b	(0x06,a2),d0                    	| [$65c3: ld   a,(ix+$06)]
	subq.b	#0x01,d0                        	| [$65c6: sub  $01]
	move.b	d0,(0x06,a2)                    	| [$65c8: ld   (ix+$06),a]
	subq.b	#0x02,d0                        	| [$65cb: sub  $02]
	move.b	d0,(-0x12,a2)                   	| [$65cd: ld   (ix-$12),a]
	subq.b	#0x02,d0                        	| [$65d0: sub  $02]
	move.b	d0,(-0x2a,a2)                   	| [$65d2: ld   (ix-$2a),a]
l_65d5:
	lea	l_892C(a6),a0                        	| [$65d5: ld   l,$2C]
	btst.b	#0,(a0)                         	| [$65d7: bit  0,(hl)]
	lea	table_66BF,a0                          	| [$65d9: ld   hl,$66BF]
	jeq	l_65e1                             	| [$65dc: jr   z,$65E1]
	LOAD_ROM	0x66C2,a0                          	| [$65de: ld   hl,$66C2]
l_65e1:
	move.w    #0xFFE8,d3                          	| [$65e1: ld   de,$FFE8]
	move.b	#0x03,d1                        	| [$65e4: ld   b,$03]
	jbsr	l_2514                            	| [$65e6: call $2514]
	rts                                    	| [$65e9: ret]
l_65ea:
	lea	l_8C78(a6),a2                      	| [$65ea: ld   ix,$8C78]
	move.b	(0x06,a2),d0                    	| [$65ee: ld   a,(ix+$06)]
	cmp.b	#0x0C,d0                         	| [$65f1: cp   $0C]
	bcs.b	0f                               	| [...]
	rts                                    	| [$65f3: ret  nc] [...]
0:
	move.b	#0x40,d0                        	| [$65f4: ld   a,$40]
	move.b	d0,(0x10,a2)                    	| [$65f6: ld   (ix+$10),a]
	move.b	d0,(-0x08,a2)                   	| [$65f9: ld   (ix-$08),a]
	move.b	d0,(-0x20,a2)                   	| [$65fc: ld   (ix-$20),a]
	move.b	#0x18,d0                        	| [$65ff: ld   a,$18]
	move.b	d0,(0x09,a2)                    	| [$6601: ld   (ix+$09),a]
	move.b	d0,(-0x0f,a2)                   	| [$6604: ld   (ix-$0f),a]
	move.b	d0,(-0x27,a2)                   	| [$6607: ld   (ix-$27),a]
	move.b	#0x02,d0                        	| [$660a: ld   a,$02]
	move.b	d0,(0x02,a2)                    	| [$660c: ld   (ix+$02),a]
	move.b	d0,(-0x16,a2)                   	| [$660f: ld   (ix-$16),a]
	move.b	d0,(-0x2e,a2)                   	| [$6612: ld   (ix-$2e),a]
	move.b	d0,l_8930(a6)                   	| [$6615: ld   ($8930),a]
	move.b	d0,l_892E(a6)                   	| [$6618: ld   ($892E),a]

                   	| [$661b: ld   iy,$82BC]
                    	| [$661f: ld   de,$0000] 0
                    	| [$6622: ld   b,$0A]

                    	| [$6624: ld   a,(iy+$00)]
                    	| [$6627: cp   (iy-$20)]
                       	| [$662a: jp   nz,$5284]
                     	| [$662d: add  a,e]
                    	| [$662e: ld   e,a]

                   	| [$662f: jr   nc,$6632]
                    	| [$6631: inc  d]

     	            | [$6632: ld   a,iyl]
                     	| [$6634: sub  $20]
        	              | [$6636: ld   iyl,a]
     	              | [$6638: jr   nc,$663C]
      	             | [$663a: dec  iyh]

                    	| [...]
                   	| [$663c: djnz $6624]
                    	| [$663e: ld   b,$0A]
    	| [$6640: ld   a,$04]
                       	| [$6642: add  a,iyh]
        	| [$6644: ld   iyh,a]
                   	| [$6646: ex   de,hl]
                  	| [$6647: ld   e,iyl]
				| [$6649: ld   d,iyh]
                   	| [$664b: ex   de,hl]


                    	| [$664c: ld   a,(hl)]
                     	| [$664d: add  a,e]
                   	| [$664e: jr   nc,$6651]
                    	| [$6650: inc  d]

                    	| [$6651: ld   e,a]
       	| [$6652: ld   a,l]
                     	| [$6653: add  a,$20]
    	| [$6655: jr   nc,$6658]
     	| [$6657: inc  h]
       	| [$6658: ld   l,a]
                    	| [...]
                   	| [$6659: djnz $664C]
                    	| [$665b: ld   a,e]
                     	| [$665c: cp   $2A]
                   	| [$665e: jp   nz,$6014]
                    	| [$6661: dec  d]
                   	| [$6662: jp   nz,$2005]
	rts                                    	| [$6665: ret]

game_intro_wolf_arrive_6666:
	move.w    #0xFFE8,d3                          	| [$6666: ld   de,$FFE8]
	move.b	#0x03,d1                        	| [$6669: ld   b,$03]
l_666b:
	jbsr	exx                               	| [$666b: exx]
	jbsr	l_667c                            	| [$666c: call $667C]
	jbsr	exx                               	| [$666f: exx]
	add.w	d3,a2                            	| [$6670: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_666b                             	| [$6672: djnz $666B]
	lea	l_8C78(a6),a2                      	| [$6674: ld   ix,$8C78]
	jbsr	l_66a1                            	| [$6678: call $66A1]
	rts                                    	| [$667b: ret]
l_667c:
	move.b	(0x01,a2),d0                    	| [$667c: ld   a,(ix+$01)]
	                               	| [$667f: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$6680: ret  nz] [...]
0:
	move.b	(0x05,a2),d0                    	| [$6681: ld   a,(ix+$05)]
	add.b	(0x09,a2),d0                     	| [$6684: add  a,(ix+$09)]
	jcc	l_668c                             	| [$6687: jr   nc,$668C]
	addq.b	#1,(0x06,a2)                    	| [$6689: inc  (ix+$06)]
l_668c:
	move.b	d0,(0x05,a2)                    	| [$668c: ld   (ix+$05),a]
	move.b	(0x06,a2),d0                    	| [$668f: ld   a,(ix+$06)]
	cmp.b	#0x1D,d0                         	| [$6692: cp   $1D]
	bcc.b	0f                               	| [...]
	rts                                    	| [$6694: ret  c] [...]
0:
	move.b	#0x02,(0x01,a2)                 	| [$6695: ld   (ix+$01),$02]
	CLEAR_XC_FLAGS                         	| [$6699: xor  a]
	clr.b	d0                               	| [$6699: xor  a]
	move.b	d0,(0x04,a2)                    	| [$669a: ld   (ix+$04),a]
	move.b	d0,(0x06,a2)                    	| [$669d: ld   (ix+$06),a]
	rts                                    	| [$66a0: ret]
l_66a1:
	lea	l_892B(a6),a0                      	| [$66a1: ld   hl,$892B]
	subq.b	#1,(a0)                         	| [$66a4: dec  (hl)]
	move.b	(a0),d0                         	| [$66a5: ld   a,(hl)]
	                               	| [$66a6: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$66a7: ret  nz] [...]
0:
	move.b	#0x08,(a0)                      	| [$66a8: ld   (hl),$08]
	addq.w	#1,a0                           	| [$66aa: inc  hl]
	addq.b	#1,(a0)                         	| [$66ab: inc  (hl)]
	btst.b	#0,(a0)                         	| [$66ac: bit  0,(hl)]
	lea	table_66BF,a0                          	| [$66ae: ld   hl,$66BF]
	jeq	l_66b6                             	| [$66b1: jr   z,$66B6]
	LOAD_ROM	0x66C2,a0                          	| [$66b3: ld   hl,$66C2]
l_66b6:
	move.w    #0xFFE8,d3                          	| [$66b6: ld   de,$FFE8]
	move.b	#0x03,d1                        	| [$66b9: ld   b,$03]
	jbsr	l_2514                            	| [$66bb: call $2514]
	rts                                    	| [$66be: ret]
table_66BF:
	.byte	0x03 
	.byte	0x03 
	.byte	0x03 
	.byte	0x09 
	.byte	0x09 
	.byte	0x09 
l_66c5:
	move.w	#0x0018,d3                      	| [$66c5: ld   de,$0018] 24
	move.b	#0x03,d1                        	| [$66c8: ld   b,$03]
l_66ca:
	jbsr	exx                               	| [$66ca: exx]
	jbsr	l_66f1                            	| [$66cb: call $66F1]
	jbsr	exx                               	| [$66ce: exx]
	add.w	d3,a2                            	| [$66cf: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_66ca                             	| [$66d1: djnz $66CA]
	move.b	l_8AE2(a6),d0                   	| [$66d3: ld   a,($8AE2)]
	                               	| [$66d6: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$66d7: ret  z] [...]
0:
	lea	l_892D(a6),a0                      	| [$66d8: ld   hl,$892D]
	move.b	(a0),d0                         	| [$66db: ld   a,(hl)]
	                               	| [$66dc: and  a]
	jeq	l_66e1                             	| [$66dd: jr   z,$66E1]
	subq.b	#1,(a0)                         	| [$66df: dec  (hl)]
	rts                                    	| [$66e0: ret]
l_66e1:
	move.b	#0x10,(a0)                      	| [$66e1: ld   (hl),$10]
	addq.w	#2,a0                           	| [$66e3: inc  hl] * 2
	addq.b	#1,(a0)                         	| [$66e5: inc  (hl)]
	move.w	#0x0612,d3                          	| [$66e8: ld   de,$0612]
	btst.b	#0,(a0)                         	| [$66e6: bit  0,(hl)]
	jne	l_66ef                             	| [$66eb: jr   nz,$66EF]
	move.b	#0x92,d3                        	| [$66ed: ld   e,$92]
l_66ef:
	jbsr	update_88A0_0038                            	| [$66ef: rst  $38]
	rts                                    	| [$66f0: ret]
l_66f1:
	move.b	(0x02,a2),d0                    	| [$66f1: ld   a,(ix+$02)]
	jbsr	jump_from_table_below_0028                            	| [$66f4: rst  $28]
jump_table_66F5:
	.long	l_game_intro_related_66FD
	.long	l_game_intro_wolves_arriving_672a
	.long	l_game_intro_wolves_departing_67a0
	.long	l_game_intro_sequence_end_67df

l_game_intro_related_66FD:
	move.b	l_8930(a6),d0                   	| [$game_intro_related_66FD: ld   a,($8930)]
	                               	| [$6700: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$6701: ret  z] [...]
0:
	lea	l_892E(a6),a0                      	| [$6702: ld   hl,$892E]
	move.b	(a0),d0                         	| [$6705: ld   a,(hl)]
	                               	| [$6706: and  a]
	jeq	l_670b                             	| [$6707: jr   z,$670B]
	subq.b	#1,(a0)                         	| [$6709: dec  (hl)]
	rts                                    	| [$670a: ret]
l_670b:
	move.b	#0x12,(a0)                      	| [$670b: ld   (hl),$12]
	addq.b	#1,(0x02,a2)                    	| [$670d: inc  (ix+$02)]
	CLEAR_XC_FLAGS                         	| [$6710: xor  a]
	clr.b	d0                               	| [$6710: xor  a]
	move.b	d0,(0x03,a2)                    	| [$6711: ld   (ix+$03),a]
	move.b	d0,(0x05,a2)                    	| [$6714: ld   (ix+$05),a]
	move.b	#0x15,(0x04,a2)                 	| [$6717: ld   (ix+$04),$15]
	move.b	#0x02,(0x06,a2)                 	| [$671b: ld   (ix+$06),$02]
	LOAD_ROM	0x3829,a1                          	| [$671f: ld   de,$3829]
	jbsr	store_de_in_struct_381e                            	| [$6722: call $381E]
	move.b	#0x2C,(0x09,a2)                 	| [$6725: ld   (ix+$09),$2C]
	rts                                    	| [$6729: ret]
l_game_intro_wolves_arriving_672a:
	jbsr	l_4006                            	| [$672a: call $4006]
	move.b	(0x05,a2),d0                    	| [$672d: ld   a,(ix+$05)]
	add.b	(0x09,a2),d0                     	| [$6730: add  a,(ix+$09)]
	jcc	l_6738                             	| [$6733: jr   nc,$6738]
	addq.b	#1,(0x06,a2)                    	| [$6735: inc  (ix+$06)]
l_6738:
	move.b	d0,(0x05,a2)                    	| [$6738: ld   (ix+$05),a]
	move.b	(0x06,a2),d0                    	| [$673b: ld   a,(ix+$06)]
	cmp.b	#0x18,d0                         	| [$673e: cp   $18]
	jcc	l_6792                             	| [$6740: jr   nc,$6792]
	lea	l_8C48(a6),a3                      	| [$6742: ld   iy,$8C48]
	move.w	#0x0018,d3                      	| [$6746: ld   de,$0018] 24
	move.b	#0x03,d1                        	| [$6749: ld   b,$03]
l_674b:
	move.b	(0x01,a3),d0                    	| [$674b: ld   a,(iy+$01)]
	                               	| [$674e: and  a]
	jne	l_6759                             	| [$674f: jr   nz,$6759]
	move.b	(0x06,a2),d0                    	| [$6751: ld   a,(ix+$06)]
	cmp.b	(0x06,a3),d0                     	| [$6754: cp   (iy+$06)]
	jeq	l_675e                             	| [$6757: jr   z,$675E]
l_6759:
	add.w	d3,a3                            	| [$6759: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_674b                             	| [$675b: djnz $674B]
	rts                                    	| [$675d: ret]
l_675e:
	lea	l_8903(a6),a0                      	| [$675e: ld   hl,$8903]
	addq.b	#1,(a0)                         	| [$6761: inc  (hl)]
	move.b	#0x02,(0x01,a3)                 	| [$6762: ld   (iy+$01),$02]
	move.b	(0x03,a2),d0                    	| [$6766: ld   a,(ix+$03)]
	sub.b	#0x80,d0                         	| [$6769: sub  $80]
	jcc	l_6770                             	| [$676b: jr   nc,$6770]
	subq.b	#1,(0x04,a3)                    	| [$676d: dec  (iy+$04)]
l_6770:
	move.b	d0,(0x03,a3)                    	| [$6770: ld   (iy+$03),a]
	move.b	(0x05,a2),d0                    	| [$6773: ld   a,(ix+$05)]
	add.b	#0x40,d0                         	| [$6776: add  a,$40]
	jcc	l_677d                             	| [$6778: jr   nc,$677D]
	subq.b	#1,(0x06,a3)                    	| [$677a: dec  (iy+$06)]
l_677d:
	move.b	d0,(0x05,a3)                    	| [$677d: ld   (iy+$05),a]
	move.b	#0xC0,(0x0f,a3)                 	| [$6780: ld   (iy+$0f),$C0]

	move.l	a3,a0                        	| [$6784: push iy]
	LOAD_D5D6_FROM_A0_RAM                        	| [$6786: pop  hl]
	move.b	d6,(0x07,a2)                    	| [$6787: ld   (ix+$07),l]
	move.b	d5,(0x08,a2)                    	| [$678a: ld   (ix+$08),h]
	move.b	#0x20,d0                        	| [$678d: ld   a,$20]
	move.b	d0,intro_timer_8929(a6)                   	| [$678f: ld   ($8929),a]
l_6792:
	addq.b	#1,(0x02,a2)                    	| [$6792: inc  (ix+$02)]
	move.b	#0x18,(0x09,a2)                 	| [$6795: ld   (ix+$09),$18]
	LOAD_ROM	0x3838,a1                          	| [$6799: ld   de,$3838]
	jbsr	store_de_in_struct_381e                            	| [$679c: call $381E]
	rts                                    	| [$679f: ret]
l_game_intro_wolves_departing_67a0:
	lea	intro_timer_8929(a6),a0                      	| [$67a0: ld   hl,$8929]
	move.b	(a0),d0                         	| [$67a3: ld   a,(hl)]
	                               	| [$67a4: and  a]
	jeq	l_67a9                             	| [$67a5: jr   z,$67A9]
	subq.b	#1,(a0)                         	| [$67a7: dec  (hl)]
	rts                                    	| [$67a8: ret]
l_67a9:
	jbsr	l_4006                            	| [$67a9: call $4006]
	move.b	(0x07,a2),d6                    	| [$67ac: ld   l,(ix+$07)]
	move.b	(0x08,a2),d5                    	| [$67af: ld   h,(ix+$08)]
	move.b	d5,d0                           	| [$67b2: ld   a,h]
	                               	| [$67b3: and  a]
	jeq	l_67c7                             	| [$67b4: jr   z,$67C7]

	LOAD_A0_FROM_D5D6
	move.l	a0,a3                       	| [$67b6: push hl]
	                        	| [$67b7: pop  iy]
	move.b	(0x05,a3),d0                    	| [$67b9: ld   a,(iy+$05)]
	sub.b	(0x09,a2),d0                     	| [$67bc: sub  (ix+$09)]
	jcc	l_67c4                             	| [$67bf: jr   nc,$67C4]
	subq.b	#1,(0x06,a3)                    	| [$67c1: dec  (iy+$06)]
l_67c4:
	move.b	d0,(0x05,a3)                    	| [$67c4: ld   (iy+$05),a]
l_67c7:
	move.b	(0x05,a2),d0                    	| [$67c7: ld   a,(ix+$05)]
	sub.b	(0x09,a2),d0                     	| [$67ca: sub  (ix+$09)]
	jcc	l_67d2                             	| [$67cd: jr   nc,$67D2]
	subq.b	#1,(0x06,a2)                    	| [$67cf: dec  (ix+$06)]
l_67d2:
	move.b	d0,(0x05,a2)                    	| [$67d2: ld   (ix+$05),a]
	move.b	(0x06,a2),d0                    	| [$67d5: ld   a,(ix+$06)]
	                               	| [$67d8: cp   $00]
	beq.b	0f                               	| [...]
	rts                                    	| [$67da: ret  nz] [...]
0:
	addq.b	#1,(0x02,a2)                    	| [$67db: inc  (ix+$02)]
	rts                                    	| [$67de: ret]
l_game_intro_sequence_end_67df:
	lea	l_82BC(a6),a0                      	| [$67df: ld   hl,$82BC]
	move.w    #0xFFE0,d3                          	| [$67e2: ld   de,$FFE0]
	move.w	#0x0A00,d1                          	| [$67e5: ld   bc,$0A00]
	LOAD_D1D2_FROM_D1_16
l_67e8:
	move.b	(a0),d0                         	| [$67e8: ld   a,(hl)]
	add.b	d2,d0                            	| [$67e9: add  a,c]
	move.b	d0,d2                           	| [$67ea: ld   c,a]
	add.w	d3,a0                            	| [$67eb: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_67e8                             	| [$67ec: djnz $67E8]
	move.b	#0x5A,d0                        	| [$67ee: ld   a,$5A]
	cmp.b	d2,d0                            	| [$67f0: cp   c]
	jne	l_game_intro_wolves_departing_67a0                             	| [$67f1: jr   nz,$67A0]
	move.b	#0x01,d0                        	| [$67f3: ld   a,$01]
	move.b	d0,l_8904(a6)                   	| [$67f5: ld   ($8904),a]
	move.b	d0,l_8808(a6)                   	| [$67f8: ld   ($8808),a]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$67fb: ld   (in_game_sub_state_880A),a]
	clr.b	d0                               	| [$67fe: xor  a]
	lea	l_8928(a6),a0                      	| [$67ff: ld   hl,$8928]
	move.b	#0x09,d1                        	| [$6802: ld   b,$09]
	jbsr	fill_area_0010                            	| [$6804: rst  $10]
	lea	player_structure_8A80(a6),a0      	| [$6805: ld   hl,player_structure_8A80]
	move.b	d0,(a0)                         	| [$6808: ld   (hl),a]
	lea	l_8A81(a6),a1                      	| [$6809: ld   de,$8A81]
	move.w	#0x0240,d1                          	| [$680c: ld   bc,$0240]
	jbsr	ldir                              	| [$680f: ldir]
	move.b	#0x10,d0                        	| [$6811: ld   a,$10]
	lea	l_8442(a6),a0                      	| [$6813: ld   hl,$8442]
	move.b	#0x1D,d2                        	| [$6816: ld   c,$1D]
l_6818:
	move.b	#0x1D,d1                        	| [$6818: ld   b,$1D]
	jbsr	fill_area_0010                            	| [$681a: rst  $10]
	addq.w	#3,a0                           	| [$681b: inc  hl] * 3
	subq.b	#1,d2                           	| [$681e: dec  c]
	jne	l_6818                             	| [$681f: jr   nz,$6818]
	rts                                    	| [$6821: ret]
l_6822:
	move.b	l_8AFA(a6),d0                   	| [$6822: ld   a,($8AFA)]
	                               	| [$6825: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$6826: ret  z] [...]
0:
	lea	l_8AE0(a6),a2                      	| [$6827: ld   ix,$8AE0]
	move.w	#0x0048,d3                      	| [$682b: ld   de,$0048] 72
	add.w	d3,a2                            	| [$682e: add  ix,de]
	move.b	(0x02,a2),d0                    	| [$6830: ld   a,(ix+$02)]
	jbsr	jump_from_table_below_0028                            	| [$6833: rst  $28]
jump_table_6834:
	.long	l_683a
	.long	intro_mama_arrives_6857
	.long	l_68ac

l_683a:
	addq.b	#1,(0x02,a2)                    	| [$683a: inc  (ix+$02)]
	CLEAR_XC_FLAGS                         	| [$683d: xor  a]
	clr.b	d0                               	| [$683d: xor  a]
	move.b	d0,(0x03,a2)                    	| [$683e: ld   (ix+$03),a]
	move.b	d0,(0x05,a2)                    	| [$6841: ld   (ix+$05),a]
	move.b	#0x08,(0x04,a2)                 	| [$6844: ld   (ix+$04),$08]
	move.b	#0x1E,(0x06,a2)                 	| [$6848: ld   (ix+$06),$1E]
	LOAD_ROM	0x68EF,a1                          	| [$684c: ld   de,$68EF]
	jbsr	store_de_in_struct_381e                            	| [$684f: call $381E]
	move.b	#0x18,(0x09,a2)                 	| [$6852: ld   (ix+$09),$18]
	rts                                    	| [$6856: ret]
intro_mama_arrives_6857:
	jbsr	l_4006                            	| [$6857: call $4006]
	move.b	(0x05,a2),d0                    	| [$685a: ld   a,(ix+$05)]
	sub.b	(0x09,a2),d0                     	| [$685d: sub  (ix+$09)]
	jcc	l_6865                             	| [$6860: jr   nc,$6865]
	subq.b	#1,(0x06,a2)                    	| [$6862: dec  (ix+$06)]
l_6865:
	move.b	d0,(0x05,a2)                    	| [$6865: ld   (ix+$05),a]
	move.b	(0x06,a2),d0                    	| [$6868: ld   a,(ix+$06)]
	cmp.b	#0x1B,d0                         	| [$686b: cp   $1B]
	bcs.b	0f                               	| [...]
	rts                                    	| [$686d: ret  nc] [...]
0:
	addq.b	#1,(0x02,a2)                    	| [$686e: inc  (ix+$02)]
	lea	l_86BC(a6),a0                      	| [$6871: ld   hl,$86BC]
	LOAD_ROM	0x68A3,a1                          	| [$6874: ld   de,$68A3]
	move.w	#0x0800,d1                          	| [$6877: ld   bc,$0800]
	LOAD_D1D2_FROM_D1_16
l_687a:
	move.b	(a1)+,d0                         	| [$687a: ld   a,(de)]
	add.b	(a0),d0                          	| [$687b: add  a,(hl)]
	add.b	d2,d0                            	| [$687c: add  a,c]
	move.b	d0,d2                           	| [$687d: ld   c,a]
	                           	| [$687e: inc  de]
	                           	| [$687f: ld   a,l]
	sub.w	#0x20,a0                         	| [$6880: sub  $20]
                     	| [$6882: jr   nc,$6885]
                      	| [$6884: dec  h]
                           	| [$6885: ld   l,a]
	subq.b	#1,d1                           	| [...]
	jne	l_687a                             	| [$6886: djnz $687A]
	move.b	#0x08,d1                        	| [$6888: ld   b,$08]
	                           	| [$688a: ld   a,h]
	sub.w	#0x0400,a0                        	| [$688b: sub  $04]
	                           	| [$688d: ld   h,a]
l_688e:
	move.b	(a0),d0                         	| [$688e: ld   a,(hl)]
	add.b	d2,d0                            	| [$688f: add  a,c]
	move.b	d0,d2                           	| [$6890: ld   c,a]
	                           	| [$6891: ld   a,l]
	add.w	#0x20,a0                         	| [$6892: add  a,$20]
	                          	| [$6894: jr   nc,$6897]
	                           	| [$6896: inc  h]
l_6897:
	subq.b	#1,d1                           	| [...]
	jne	l_688e                             	| [$6897: djnz $688E]
	move.b	(a1),d0                         	| [$6899: ld   a,(de)]
	add.b	d2,d0                            	| [$689a: add  a,c]
	jne	l_08b3                             	| [$689b: jp   nz,$08B3]
	move.w	#0x0613,d3                          	| [$689e: ld   de,$0613]
	jbsr	update_88A0_0038                            	| [$68a1: rst  $38]
	rts                                    	| [$68a2: ret]

l_68ac:
	lea	l_8F55(a6),a0                      	| [$68ac: ld   hl,$8F55]
	move.b	(a0),d0                         	| [$68af: ld   a,(hl)]
	                               	| [$68b0: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$68b1: ret  nz] [...]
0:
	addq.b	#1,(a0)                         	| [$68b2: inc  (hl)]
	lea	l_8402(a6),a0                      	| [$68b3: ld   hl,$8402]
	move.w	#0x0000,d3                      	| [$68b6: ld   de,$0000] 0
	move.w	#0x0000,d4                      	| [$68b6: ld   de,$0000] 0
l_68b9:
	move.b	(a0),d0                         	| [$68b9: ld   a,(hl)]
	add.b	d4,d0                            	| [$68ba: add  a,e]
	move.b	d0,d4                           	| [$68bb: ld   e,a]
	SET_C_FROM_X
	jcc	l_68bf                             	| [$68bc: jr   nc,$68BF]
	addq.b	#1,d3                           	| [$68be: inc  d]
l_68bf:
	addq.w	#1,a0                           	| [$68bf: inc  l]
	LOAD_D5D6_FROM_A0_RAM
	move.b	D6,d0                           	| [$68c0: ld   a,l]
	and.b	#0x1F,d0                         	| [$68c1: and  $1F]
	cmp.b	#0x1F,d0                         	| [$68c3: cp   $1F]
	jne	l_68b9                             	| [$68c5: jr   nz,$68B9]
	                          	| [$68c7: ld   a,l]
	addq.w	#0x03,a0                        	| [$68c8: add  a,$03]
	                           	| [$68ca: ld   l,a]
	                             	| [$68cb: jr   nc,$68B9]
	                           	| [$68cd: inc  h]
	LOAD_D5D6_FROM_A0_RAM
	move.b	d5,d0                           	| [$68ce: ld   a,h]
	cmp.b	#0x88,d0                         	| [$68cf: cp   $88]
	jcs	l_68b9                             	| [$68d1: jr   c,$68B9]
           	| [$68d3: ld   hl,$68EB]
    	| [$68d6: ld   b,$04]
    	| [$68d8: ld   a,e]

     	| [$68d9: cp   (hl)]
   	| [$68da: jr   z,$68E2]
    	| [$68dc: inc  hl]
    	| [...]
   	| [$68dd: djnz $68D9]
	| [$68df: jp   $76D4]

    	| [$68e2: ld   a,d]
    	| [$68e3: inc  hl]
     	| [$68e4: cp   (hl)]
     	| [...]
	rts                                    	| [$68e5: ret  z] [...]

                   	| [...]
                  	| [$68e6: djnz $68E2]
               	| [$68e8: jp   $3829]

l_68f8:
	jbsr	l_6905                            	| [$68f8: call $6905]
	jbsr	l_69ad                            	| [$68fb: call $69AD]
	jbsr	l_6a0f                            	| [$68fe: call $6A0F]
	jbsr	l_6a7f                            	| [$6901: call $6A7F]
	rts                                    	| [$6904: ret]
l_6905:
	lea	intro_timer_8929(a6),a0                      	| [$6905: ld   hl,$8929]
	move.b	(a0),d0                         	| [$6908: ld   a,(hl)]
	                               	| [$6909: and  a]
	jeq	l_690e                             	| [$690a: jr   z,$690E]
	subq.b	#1,(a0)                         	| [$690c: dec  (hl)]
	rts                                    	| [$690d: ret]
l_690e:
	lea	l_892D(a6),a0                        	| [$690e: ld   l,$2D]
	move.b	(a0),d0                         	| [$6910: ld   a,(hl)]
	lea	l_8903(a6),a0                        	| [$6911: ld   l,$03]
	cmp.b	(a0),d0                          	| [$6913: cp   (hl)]
	bne.b	0f                               	| [...]
	rts                                    	| [$6914: ret  z] [...]
0:
	cmp.b	#0x08,d0                         	| [$6915: cp   $08]
	bcs.b	0f                               	| [...]
	rts                                    	| [$6917: ret  nc] [...]
0:
	lea	l_8AE0(a6),a2                      	| [$6918: ld   ix,$8AE0]
	lea	l_8BA0(a6),a3                      	| [$691c: ld   iy,$8BA0]
	move.w	#0x0018,d3                      	| [$6920: ld   de,$0018] 24
	move.b	#0x08,d1                        	| [$6923: ld   b,$08]
l_6925:
	jbsr	exx                               	| [$6925: exx]
	jbsr	l_6931                            	| [$6926: call $6931]
	jbsr	exx                               	| [$6929: exx]
	add.w	d3,a2                            	| [$692a: add  ix,de]
	add.w	d3,a3                            	| [$692c: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_6925                             	| [$692e: djnz $6925]
	rts                                    	| [$6930: ret]
l_6931:
	move.b	(0x00,a2),d0                    	| [$6931: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$6934: or   (ix+$01)]
	ror.b	#1,d0                            	| [$6937: rrca]
	bcc.b	0f                               	| [...]
	rts                                    	| [$6938: ret  c] [...]
0:
	clr.b	d0                               	| [$6939: xor  a]
	move.b	d0,(0x03,a2)                    	| [$693a: ld   (ix+$03),a]
	move.b	d0,(0x05,a2)                    	| [$693d: ld   (ix+$05),a]
	addq.b	#1,d0                           	| [$6940: inc  a]
	move.b	d0,(0x00,a2)                    	| [$6941: ld   (ix+$00),a]
	move.b	d0,(0x00,a3)                    	| [$6944: ld   (iy+$00),a]
	move.b	#0x15,(0x04,a2)                 	| [$6947: ld   (ix+$04),$15]
	move.b	#0x1E,(0x06,a2)                 	| [$694b: ld   (ix+$06),$1E]
	move.b	#0x80,(0x03,a3)                 	| [$694f: ld   (iy+$03),$80]
	move.b	#0xA0,(0x05,a3)                 	| [$6953: ld   (iy+$05),$A0]
	move.b	#0x14,(0x04,a3)                 	| [$6957: ld   (iy+$04),$14]
	move.b	#0x1E,(0x06,a3)                 	| [$695b: ld   (iy+$06),$1E]
	move.b	#0x03,(0x0f,a3)                 	| [$695f: ld   (iy+$0f),$03]
	move.b	#0x40,(0x10,a3)                 	| [$6963: ld   (iy+$10),$40]
	move.b	#0x24,(0x09,a2)                 	| [$6967: ld   (ix+$09),$24]
	move.b	#0x24,(0x09,a3)                 	| [$696b: ld   (iy+$09),$24]
	LOAD_ROM	0x3838,a1                          	| [$696f: ld   de,$3838]
	jbsr	store_de_in_struct_381e                            	| [$6972: call $381E]
	move.b	#0x10,d0                        	| [$6975: ld   a,$10]
	move.b	d0,intro_timer_8929(a6)                   	| [$6977: ld   ($8929),a]
	move.b	l_892D(a6),d0                   	| [$697a: ld   a,($892D)]
	                               	| [$697d: and  a]
	jne	l_69a7                             	| [$697e: jr   nz,$69A7]
	move.w	#0x0625,d3                          	| [$6980: ld   de,$0625]
	jbsr	update_88A0_0038                            	| [$6983: rst  $38]
	move.b	#0x0A,d3                        	| [$6984: ld   e,$0A]
	jbsr	update_88A0_0038                            	| [$6986: rst  $38]
	lea	l_863B(a6),a0                      	| [$6987: ld   hl,$863B]
	move.b	l_8903(a6),d0                   	| [$698a: ld   a,($8903)]
	move.b	d0,d1                           	| [$698d: ld   b,a]
	subq	#1,d1		| for dbf
	CLEAR_XC_FLAGS                         	| [$698e: xor  a]
	clr.b	d0                               	| [$698e: xor  a]
	moveq	#1,d7
l_698f:
	abcd	d7,d0                        	| [$698f: add  a,$01]+daa
	dbf	d1,l_698f                             	| [$6992: djnz $698F]
	move.b	d0,d4                           	| [$6994: ld   e,a]
	and.b	#0xF0,d0                         	| [$6995: and  $F0]
	ror.b	#4,d0                            	| [$6997: rrca] * 4
	move.b	d0,(a0)                         	| [$699b: ld   (hl),a]
	move.w	#0xFFE0,d1                          	| [$699c: ld   bc,$FFE0]
	add.w	d1,a0                            	| [$699f: add  hl,bc]
	move.b	d4,d0                           	| [$69a0: ld   a,e]
	and.b	#0x0F,d0                         	| [$69a1: and  $0F]
	move.b	d0,(a0)                         	| [$69a3: ld   (hl),a]
	jbsr	l_0f97                            	| [$69a4: call $0F97]
l_69a7:
	lea	l_892D(a6),a0                      	| [$69a7: ld   hl,$892D]
	addq.b	#1,(a0)                         	| [$69aa: inc  (hl)]
	move.w	(sp)+,d0                        	| [$69ab: pop  af]
	rts                                    	| [$69ac: ret]
l_69ad:
	lea	l_8AE0(a6),a2                      	| [$69ad: ld   ix,$8AE0]
	lea	l_8BA0(a6),a3                      	| [$69b1: ld   iy,$8BA0]
	move.w	#0x0018,d3                      	| [$69b5: ld   de,$0018] 24
	move.b	#0x08,d1                        	| [$69b8: ld   b,$08]
l_69ba:
	jbsr	exx                               	| [$69ba: exx]
	jbsr	l_69c6                            	| [$69bb: call $69C6]
	jbsr	exx                               	| [$69be: exx]
	add.w	d3,a2                            	| [$69bf: add  ix,de]
	add.w	d3,a3                            	| [$69c1: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_69ba                             	| [$69c3: djnz $69BA]
	rts                                    	| [$69c5: ret]
l_69c6:
	move.b	(0x00,a2),d0                    	| [$69c6: ld   a,(ix+$00)]
	                               	| [$69c9: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$69ca: ret  z] [...]
0:
	move.b	(0x02,a2),d0                    	| [$69cb: ld   a,(ix+$02)]
	                               	| [$69ce: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$69cf: ret  nz] [...]
0:
	jbsr	l_4006                            	| [$69d0: call $4006]
	move.b	(0x05,a3),d0                    	| [$69d3: ld   a,(iy+$05)]
	sub.b	(0x09,a3),d0                     	| [$69d6: sub  (iy+$09)]
	jcc	l_69de                             	| [$69d9: jr   nc,$69DE]
	subq.b	#1,(0x06,a3)                    	| [$69db: dec  (iy+$06)]
l_69de:
	move.b	d0,(0x05,a3)                    	| [$69de: ld   (iy+$05),a]
	move.b	(0x05,a2),d0                    	| [$69e1: ld   a,(ix+$05)]
	sub.b	(0x09,a2),d0                     	| [$69e4: sub  (ix+$09)]
	jcc	l_69ec                             	| [$69e7: jr   nc,$69EC]
	subq.b	#1,(0x06,a2)                    	| [$69e9: dec  (ix+$06)]
l_69ec:
	move.b	d0,(0x05,a2)                    	| [$69ec: ld   (ix+$05),a]
	move.b	(0x06,a2),d0                    	| [$69ef: ld   a,(ix+$06)]
	cmp.b	#0x06,d0                         	| [$69f2: cp   $06]
	jne	l_69fe                             	| [$69f4: jr   nz,$69FE]
	lea	l_892B(a6),a0                      	| [$69f6: ld   hl,$892B]
	move.b	(a0),d0                         	| [$69f9: ld   a,(hl)]
	                               	| [$69fa: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$69fb: ret  nz] [...]
0:
	addq.b	#1,(a0)                         	| [$69fc: inc  (hl)]
	rts                                    	| [$69fd: ret]
l_69fe:
	cmp.b	#0x01,d0                         	| [$69fe: cp   $01]
	bcs.b	0f                               	| [...]
	rts                                    	| [$6a00: ret  nc] [...]
0:
	CLEAR_XC_FLAGS                         	| [$6a01: xor  a]
	clr.b	d0                               	| [$6a01: xor  a]

	move.l	a2,-(sp)                        	| [$6a02: push ix]
	move.l	(sp)+,a0                        	| [$6a04: pop  hl]
	move.b	#0x18,d1                        	| [$6a05: ld   b,$18]
	jbsr	fill_area_0010                            	| [$6a07: rst  $10]

	move.l	a3,-(sp)                        	| [$6a08: push iy]
	move.l	(sp)+,a0                        	| [$6a0a: pop  hl]
	move.b	#0x18,d1                        	| [$6a0b: ld   b,$18]
	jbsr	fill_area_0010                            	| [$6a0d: rst  $10]
	rts                                    	| [$6a0e: ret]
l_6a0f:
	lea	l_892B(a6),a0                      	| [$6a0f: ld   hl,$892B]
	move.b	(a0),d0                         	| [$6a12: ld   a,(hl)]
	                               	| [$6a13: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$6a14: ret  z] [...]
0:
	addq.w	#1,a0                           	| [$6a15: inc  hl]
	move.b	(a0),d0                         	| [$6a16: ld   a,(hl)]
	cmp.b	#0x06,d0                         	| [$6a17: cp   $06]
	bne.b	0f                               	| [...]
	rts                                    	| [$6a19: ret  z] [...]
0:
	lea	l_892B-1(a6),a0                        	| [$6a1a: ld   l,$2A]
	move.b	(a0),d0                         	| [$6a1c: ld   a,(hl)]
	                               	| [$6a1d: and  a]
	jeq	l_6a22                             	| [$6a1e: jr   z,$6A22]
	subq.b	#1,(a0)                         	| [$6a20: dec  (hl)]
	rts                                    	| [$6a21: ret]
l_6a22:
	lea	l_8AE0(a6),a2                      	| [$6a22: ld   ix,$8AE0]
	move.w	#0x0018,d3                      	| [$6a26: ld   de,$0018] 24
	move.b	#0x12,d1                        	| [$6a29: ld   b,$12]
l_6a2b:
	jbsr	exx                               	| [$6a2b: exx]
	jbsr	l_6a35                            	| [$6a2c: call $6A35]
	jbsr	exx                               	| [$6a2f: exx]
	add.w	d3,a2                            	| [$6a30: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_6a2b                             	| [$6a32: djnz $6A2B]
	rts                                    	| [$6a34: ret]
l_6a35:
	move.b	(0x00,a2),d0                    	| [$6a35: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$6a38: or   (ix+$01)]
	ror.b	#1,d0                            	| [$6a3b: rrca]
	bcc.b	0f                               	| [...]
	rts                                    	| [$6a3c: ret  c] [...]
0:
	CLEAR_XC_FLAGS                         	| [$6a3d: xor  a]
	clr.b	d0                               	| [$6a3d: xor  a]
	move.b	d0,(0x03,a2)                    	| [$6a3e: ld   (ix+$03),a]
	move.b	d0,(0x05,a2)                    	| [$6a41: ld   (ix+$05),a]
	addq.b	#1,d0                           	| [$6a44: inc  a]
	move.b	d0,(0x01,a2)                    	| [$6a45: ld   (ix+$01),a]
	move.b	d0,(0x02,a2)                    	| [$6a48: ld   (ix+$02),a]
	move.b	#0x15,(0x04,a2)                 	| [$6a4b: ld   (ix+$04),$15]
	move.b	#0x1E,(0x06,a2)                 	| [$6a4f: ld   (ix+$06),$1E]
	move.b	#0x28,(0x09,a2)                 	| [$6a53: ld   (ix+$09),$28]
	lea	l_892A(a6),a0                      	| [$6a57: ld   hl,$892A]
	move.b	#0x10,(a0)                      	| [$6a5a: ld   (hl),$10]
	addq.w	#2,a0                        	| [$6a5c: ld   l,$2C]
	move.b	(a0),d0                         	| [$6a5e: ld   a,(hl)]
	addq.b	#1,(a0)                         	| [$6a5f: inc  (hl)]
	cmp.b	#0x02,d0                         	| [$6a60: cp   $02]
	jeq	l_6a72                             	| [$6a62: jr   z,$6A72]
	jcc	l_6a77                             	| [$6a64: jr   nc,$6A77]
	tst.b	d0                               	| [$6a66: and  a]
	jeq	l_6a6d                             	| [$6a67: jr   z,$6A6D]
	lea	l_892A(a6),a0                        	| [$6a69: ld   l,$2A]
	move.b	#0x1C,(a0)                      	| [$6a6b: ld   (hl),$1C]
l_6a6d:
	LOAD_ROM	0x76D4,a1                          	| [$6a6d: ld   de,$76D4]
	jra	l_6a7a                             	| [$6a70: jr   $6A7A]
l_6a72:
	LOAD_ROM	0x68EF,a1                          	| [$6a72: ld   de,$68EF]
	jra	l_6a7a                             	| [$6a75: jr   $6A7A]
l_6a77:
	LOAD_ROM	0x6B0A,a1                          	| [$6a77: ld   de,$6B0A]
l_6a7a:
	jbsr	store_de_in_struct_381e                            	| [$6a7a: call $381E]
	move.w	(sp)+,d0                        	| [$6a7d: pop  af]
	rts                                    	| [$6a7e: ret]
l_6a7f:
	move.b	l_892B(a6),d0                   	| [$6a7f: ld   a,($892B)]
	                               	| [$6a82: and  a]
	jeq	l_6ac5                             	| [$6a83: jr   z,$6AC5]
	lea	l_8AE0(a6),a2                      	| [$6a85: ld   ix,$8AE0]
	move.w	#0x0018,d3                      	| [$6a89: ld   de,$0018] 24
	move.b	#0x12,d1                        	| [$6a8c: ld   b,$12]
l_6a8e:
	jbsr	exx                               	| [$6a8e: exx]
	jbsr	l_6a98                            	| [$6a8f: call $6A98]
	jbsr	exx                               	| [$6a92: exx]
	add.w	d3,a2                            	| [$6a93: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_6a8e                             	| [$6a95: djnz $6A8E]
	rts                                    	| [$6a97: ret]
l_6a98:
	move.b	(0x01,a2),d0                    	| [$6a98: ld   a,(ix+$01)]
	                               	| [$6a9b: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$6a9c: ret  z] [...]
0:
	move.b	(0x02,a2),d0                    	| [$6a9d: ld   a,(ix+$02)]
	subq.b	#1,d0                           	| [$6aa0: dec  a]
	and.b	#0x03,d0                         	| [$6aa1: and  $03]
	jbsr	jump_from_table_below_0028                            	| [$6aa3: rst  $28]
jump_table_6AA4:
	.long	l_6aa8
	.long	l_game_intro_sequence_end_67df

l_6aa8:
	jbsr	l_4006                            	| [$6aa8: call $4006]
	move.b	(0x05,a2),d0                    	| [$6aab: ld   a,(ix+$05)]
	sub.b	(0x09,a2),d0                     	| [$6aae: sub  (ix+$09)]
	jcc	l_6ab6                             	| [$6ab1: jr   nc,$6AB6]
	subq.b	#1,(0x06,a2)                    	| [$6ab3: dec  (ix+$06)]
l_6ab6:
	move.b	d0,(0x05,a2)                    	| [$6ab6: ld   (ix+$05),a]
	move.b	(0x06,a2),d0                    	| [$6ab9: ld   a,(ix+$06)]
	                               	| [$6abc: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$6abd: ret  nz] [...]
0:
	move.b	d0,l_8F56(a6)                   	| [$6abe: ld   ($8F56),a]
	addq.b	#1,(0x02,a2)                    	| [$6ac1: inc  (ix+$02)]
	rts                                    	| [$6ac4: ret]
l_6ac5:
	move.b	l_892D(a6),d0                   	| [$6ac5: ld   a,($892D)]
	cmp.b	#0x02,d0                         	| [$6ac8: cp   $02]
	beq.b	0f                               	| [...]
	rts                                    	| [$6aca: ret  nz] [...]
0:
	move.b	l_8F56(a6),d0                   	| [$6acb: ld   a,($8F56)]
	                               	| [$6ace: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$6acf: ret  nz] [...]
0:
	addq.b	#1,d0                           	| [$6ad0: inc  a]
	move.b	d0,l_8F56(a6)                   	| [$6ad1: ld   ($8F56),a]
	lea	l_8450(a6),a0                      	| [$6ad4: ld   hl,$8450]
	move.w	#0x0000,d3                      	| [$6ad7: ld   de,$0000] 0
l_6ada:
	move.b	d4,d0                           	| [$6ada: ld   a,e]
	add.b	(a0),d0                          	| [$6adb: add  a,(hl)]
	move.b	d0,d4                           	| [$6adc: ld   e,a]
	SET_C_FROM_X
	jcc	l_6ae0                             	| [$6add: jr   nc,$6AE0]
	addq.b	#1,d3                           	| [$6adf: inc  d]
l_6ae0:
	addq.w	#1,a0                           	| [$6ae0: inc  l]
	LOAD_D5D6_FROM_A0_RAM
	move.b	D6,d0                           	| [$6ae1: ld   a,l]
	and.b	#0x1F,d0                         	| [$6ae2: and  $1F]
	cmp.b	#0x1B,d0                         	| [$6ae4: cp   $1B]
	jne	l_6aeb                             	| [$6ae6: jr   nz,$6AEB]
	addq.w	#1,a0                           	| [$6ae8: inc  l]
	jra	l_6ada                             	| [$6ae9: jr   $6ADA]
l_6aeb:
	cmp.b	#0x1F,d0                         	| [$6aeb: cp   $1F]
	jne	l_6ada                             	| [$6aed: jr   nz,$6ADA]
	add.w	#0x12,a0                        	| [$6aef: ld   a,$12]
	  	| [$6af1: add  a,l]
	 	| [$6af2: ld   l,a]
		| [$6af3: jr   nc,$6ADA]
	
	LOAD_D5D6_FROM_A0_RAM                           	| [$6af5: inc  h]
	move.b	d5,d0                           	| [$6af6: ld   a,h]
	cmp.b	#0x88,d0                         	| [$6af7: cp   $88]
	jcs	l_6ada                             	| [$6af9: jr   c,$6ADA]
	move.b	d4,d0                           	| [$6afb: ld   a,e]
	cmp.b	#0xB8,d0                         	| [$6afc: cp   $B8]
	jeq	l_6b03                             	| [$6afe: jr   z,$6B03]
	SET_X_FROM_C
	jra	l_0929                             	| [$6b00: jp   $0929]
l_6b03:
	move.b	d3,d0                           	| [$6b03: ld   a,d]
	                        	| [$6b04: cp   $29]
	                      	| [$6b06: jp   nz,$3829]
	rts                                    	| [$6b09: ret]

animate_pigs_in_house_intro_6b13:
	lea	animation_timer_8F06(a6),a0                      	| [$6b13: ld   hl,$8F06]
	move.b	(a0),d0                         	| [$6b16: ld   a,(hl)]
	                               	| [$6b17: and  a]
	jeq	l_6b1c                             	| [$6b18: jr   z,$6B1C]
	subq.b	#1,(a0)                         	| [$6b1a: dec  (hl)]
	rts                                    	| [$6b1b: ret]
l_6b1c:
	move.b	#0x0C,(a0)+                      	| [$6b1c: ld   (hl),$0C]
	                           	| [$6b1e: inc  hl]
	addq.b	#1,(a0)                         	| [$6b1f: inc  (hl)]
	move.b	(a0),d0                         	| [$6b20: ld   a,(hl)]
	LOAD_ROM	0x2744,a1                          	| [$6b23: ld   de,$2744]
	lea	l_84B4(a6),a0                      	| [$6b26: ld   hl,$84B4]
	and.b	#0x01,d0                         	| [$6b21: and  $01]
	jeq	l_6b2e                             	| [$6b29: jr   z,$6B2E]
	LOAD_ROM	0x2748,a1                          	| [$6b2b: ld   de,$2748]
l_6b2e:
	
	move.l	a1,-(a7)										| [$6b2e: push de]
	* left pig head
	jbsr	write_4x4_tile_block_3325         	| [$6b2f: call write_4x4_tile_block_3325]
	                          	| [$6b32: ld   de,$FFA0]
	sub.w	#0x60,a0                            	| [$6b35: add  hl,de]
	move.l	(a7)+,a1									| [$6b36: pop  de]
	* right pig head
	jbsr	write_4x4_tile_block_3325         	| [$6b37: call write_4x4_tile_block_3325]
	rts                                    	| [$6b3a: ret]
l_6b3b:
	move.b	l_8806(a6),d0                   	| [$6b3b: ld   a,($8806)]
	                               	| [$6b3e: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$6b3f: ret  nz] [...]
0:
	move.b	l_8D5F(a6),d0                   	| [$6b40: ld   a,($8D5F)]
	                               	| [$6b43: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$6b44: ret  nz] [...]
0:
	move.b	round_number_8907(a6),d0                   	| [$6b45: ld   a,($8907)]
	and.b	#0x01,d0                         	| [$6b48: and  $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$6b4a: ret  nz] [...]
0:
	lea	l_8D5E(a6),a0                      	| [$6b4b: ld   hl,$8D5E]
	move.b	(a0),d0                         	| [$6b4e: ld   a,(hl)]
	                               	| [$6b4f: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$6b50: ret  z] [...]
0:
	cmp.b	#0x01,d0                         	| [$6b51: cp   $01]
	jeq	l_6b57                             	| [$6b53: jr   z,$6B57]
	subq.b	#1,(a0)                         	| [$6b55: dec  (hl)]
	rts                                    	| [$6b56: ret]
l_6b57:
	move.b	#0x11,d0                        	| [$6b57: ld   a,$11]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$6b59: ld   (in_game_sub_state_880A),a]
	move.b	d0,l_8D5F(a6)                   	| [$6b5c: ld   ($8D5F),a]
	st.b	d0                                	| [$6b5f: ld   a,$FF]
	move.b	d0,l_8D5E(a6)                   	| [$6b61: ld   ($8D5E),a]
	move.w	#0x0018,d3                      	| [$6b64: ld   de,$0018] 24
	lea	l_8AE0(a6),a2                      	| [$6b67: ld   ix,$8AE0]
	lea	l_8D80(a6),a3                      	| [$6b6b: ld   iy,$8D80]
	move.b	#0x0B,d1                        	| [$6b6f: ld   b,$0B]
l_6b71:
	move.b	(0x04,a2),d0                    	| [$6b71: ld   a,(ix+$04)]
	and.b	#0x1F,d0                         	| [$6b74: and  $1F]
	cmp.b	#0x06,d0                         	| [$6b76: cp   $06]
	jcs	l_6b97                             	| [$6b78: jr   c,$6B97]
	cmp.b	#0x1A,d0                         	| [$6b7a: cp   $1A]
	jcc	l_6b97                             	| [$6b7c: jr   nc,$6B97]

	move.l	a2,a0                        	| [$6b7e: push ix]
	LOAD_D5D6_FROM_A0_RAM                        	| [$6b80: pop  hl]
	move.b	d6,(0x00,a3)                    	| [$6b81: ld   (iy+$00),l]
	move.b	d5,(0x01,a3)                    	| [$6b84: ld   (iy+$01),h]
	move.b	(0x06,a2),d0                    	| [$6b87: ld   a,(ix+$06)]
	move.b	d0,(0x02,a3)                    	| [$6b8a: ld   (iy+$02),a]
	clr.b	(0x06,a2)                        	| [$6b8d: ld   (ix+$06),$00]
	addq.w	#3,a3                           	| [$6b91: inc  iy] * 3
l_6b97:
	add.w	d3,a2                            	| [$6b97: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_6b71                             	| [$6b99: djnz $6B71]
	move.w	#0x062B,d3                          	| [$6b9b: ld   de,$062B]
	jbsr	update_88A0_0038                            	| [$6b9e: rst  $38]
	move.w	#0x062C,d3                          	| [$6b9f: ld   de,$062C]
	jbsr	update_88A0_0038                            	| [$6ba2: rst  $38]
	move.w	#0x062D,d3                          	| [$6ba3: ld   de,$062D]
	jbsr	update_88A0_0038                            	| [$6ba6: rst  $38]
	move.w	#0x062E,d3                          	| [$6ba7: ld   de,$062E]
	jbsr	update_88A0_0038                            	| [$6baa: rst  $38]
	move.w	#0x062F,d3                          	| [$6bab: ld   de,$062F]
l_6bae:
	jbsr	update_88A0_0038                            	| [$6bae: rst  $38]
	jra	update_sprite_shadows_02EF         	| [$6baf: jp   update_sprite_shadows_02EF]
l_6bb2:
	lea	l_8D5E(a6),a0                      	| [$6bb2: ld   hl,$8D5E]
	subq.b	#1,(a0)                         	| [$6bb5: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$6bb6: ret  nz] [...]
0:
	lea	l_8D80(a6),a3                      	| [$6bb7: ld   iy,$8D80]
	move.w	#0x0003,d3                      	| [$6bbb: ld   de,$0003] 3
	move.b	#0x0B,d1                        	| [$6bbe: ld   b,$0B]
l_6bc0:
	clr.b	d0                               	| [$6bc0: xor  a]
	move.b	(0x01,a3),d5                    	| [$6bc1: ld   h,(iy+$01)]
	or.b	d5,d0                             	| [$6bc4: or   h]
	jeq	l_6bd0                             	| [$6bc5: jr   z,$6BD0]
	move.b	(0x00,a3),d6                    	| [$6bc7: ld   l,(iy+$00)]
	LOAD_D5_16_FROM_D5D6
	move.b	(0x02,a3),d0                    	| [$6bca: ld   a,(iy+$02)]
	add.w	d3,d5                            	| [$6bcd: add  hl,de]
	add.w	d3,d5                            	| [$6bce: add  hl,de]
	LOAD_A0_FROM_D5
	move.b	d0,(a0)                         	| [$6bcf: ld   (hl),a]
l_6bd0:
	add.w	d3,a3                            	| [$6bd0: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_6bc0                             	| [$6bd2: djnz $6BC0]
	move.b	#0x04,d0                        	| [$6bd4: ld   a,$04]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$6bd6: ld   (in_game_sub_state_880A),a]
	move.w	#0x06AB,d3                          	| [$6bd9: ld   de,$06AB]
	jbsr	update_88A0_0038                            	| [$6bdc: rst  $38]
	move.w	#0x06AC,d3                          	| [$6bdd: ld   de,$06AC]
	jbsr	update_88A0_0038                            	| [$6be0: rst  $38]
	move.w	#0x06AD,d3                          	| [$6be1: ld   de,$06AD]
	jbsr	update_88A0_0038                            	| [$6be4: rst  $38]
	move.w	#0x06AE,d3                          	| [$6be5: ld   de,$06AE]
	jbsr	update_88A0_0038                            	| [$6be8: rst  $38]
	move.w	#0x06AF,d3                          	| [$6be9: ld   de,$06AF]
	jra	l_6bae                             	| [$6bec: jr   $6BAE]
l_6bee:
	move.b	l_8D52(a6),d0                   	| [$6bee: ld   a,($8D52)]
	                               	| [$6bf1: and  a]
	jeq	l_6c14                             	| [$6bf2: jr   z,$6C14]
	lea	l_8A87(a6),a0                      	| [$6bf4: ld   hl,$8A87]
	subq.b	#1,d0                           	| [$6bf7: dec  a]
	jeq	l_6c07                             	| [$6bf8: jr   z,$6C07]
	bset.b	#3,(a0)                         	| [$6bfa: set  3,(hl)]
	bclr.b	#2,(a0)                         	| [$6bfc: res  2,(hl)]
	lea	l_8D53(a6),a0                      	| [$6bfe: ld   hl,$8D53]
	subq.b	#1,(a0)                         	| [$6c01: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$6c02: ret  nz] [...]
0:
	clr.b	d0                               	| [$6c03: xor  a]
	subq.w	#1,a0                           	| [$6c04: dec  l]
	move.b	d0,(a0)                         	| [$6c05: ld   (hl),a]
	rts                                    	| [$6c06: ret]
l_6c07:
	bset.b	#2,(a0)                         	| [$6c07: set  2,(hl)]
	bclr.b	#3,(a0)                         	| [$6c09: res  3,(hl)]
	lea	l_8D53(a6),a0                      	| [$6c0b: ld   hl,$8D53]
	subq.b	#1,(a0)                         	| [$6c0e: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$6c0f: ret  nz] [...]
0:
	clr.b	d0                               	| [$6c10: xor  a]
	                           	| [$6c11: dec  l]
	move.b	d0,-(a0)                         	| [$6c12: ld   (hl),a]
	rts                                    	| [$6c13: ret]
l_6c14:
	jbsr	l_6c18                            	| [$6c14: call $6C18]
	rts                                    	| [$6c17: ret]
l_6c18:
	lea	sprite_shadow_ram_8840(a6),a2      	| [$6c18: ld   ix,sprite_shadow_ram_8840]
	lea	sprite_shadow_ram_8840+0x3C(a6),a3     	| [$6c1c: ld   iy,sprite_shadow_ram_8840+$3C]
	lea	l_8BE8(a6),a0                      	| [$6c20: ld   hl,$8BE8]
	move.b	#0x03,d1                        	| [$6c23: ld   b,$03]
l_6c25:
	jbsr	l_6c3f                            	| [$6c25: call $6C3F]
	move.w	#0x0004,d3                      	| [$6c28: ld   de,$0004] 4
	add.w	d3,a3                            	| [$6c2b: add  iy,de]
	move.b	#0x18,d3                        	| [$6c2d: ld   e,$18]
	add.w	d3,a0                            	| [$6c2f: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_6c25                             	| [$6c30: djnz $6C25]
	lea	l_8A87(a6),a0                      	| [$6c32: ld   hl,$8A87]
	bclr.b	#2,(a0)                         	| [$6c35: res  2,(hl)]
	bclr.b	#3,(a0)                         	| [$6c37: res  3,(hl)]
	lea	l_8D54(a6),a0                      	| [$6c39: ld   hl,$8D54]
	clr.b	(a0)                             	| [$6c3c: ld   (hl),$00]
	rts                                    	| [$6c3e: ret]
l_6c3f:
	btst.b	#0,(a0)                         	| [$6c3f: bit  0,(hl)]
	bne.b	0f                               	| [...]
	rts                                    	| [$6c41: ret  z] [...]
0:
	move.b	#0x10,d4                        	| [$6c42: ld   e,$10]
	clr.b	d3                               	| [$6c44: ld   d,$00]
	move.b	(0x00,a2),d0                    	| [$6c46: ld   a,(ix+$00)]
	add.b	d4,d0                            	| [$6c49: add  a,e]
	move.b	d0,d4                           	| [$6c4a: ld   e,a]
	move.b	(0x02,a2),d0                    	| [$6c4b: ld   a,(ix+$02)]
	add.b	d3,d0                            	| [$6c4e: add  a,d]
	move.b	d0,d3                           	| [$6c4f: ld   d,a]
	move.b	(0x00,a3),d0                    	| [$6c50: ld   a,(iy+$00)]
	add.b	#0x20,d0                         	| [$6c53: add  a,$20]
	sub.b	d4,d0                            	| [$6c55: sub  e]
	jcc	l_6c5a                             	| [$6c56: jr   nc,$6C5A]
	neg.b	d0                               	| [$6c58: neg]
l_6c5a:
	cmp.b	#0x18,d0                         	| [$6c5a: cp   $18]
	bcs.b	0f                               	| [...]
	rts                                    	| [$6c5c: ret  nc] [...]
0:
	clr.b	d2                               	| [$6c5d: ld   c,$00]
	move.b	(0x02,a3),d0                    	| [$6c5f: ld   a,(iy+$02)]
	add.b	#0x08,d0                         	| [$6c62: add  a,$08]
	sub.b	d3,d0                            	| [$6c64: sub  d]
	jcc	l_6c6b                             	| [$6c65: jr   nc,$6C6B]
	st.b	d2                                	| [$6c67: ld   c,$FF]
	neg.b	d0                               	| [$6c69: neg]
l_6c6b:
	cmp.b	#0x0E,d0                         	| [$6c6b: cp   $0E]
	bcs.b	0f                               	| [...]
	rts                                    	| [$6c6d: ret  nc] [...]
0:
	lea	l_8D54(a6),a0                      	| [$6c6e: ld   hl,$8D54]
	move.b	#0x01,(a0)                      	| [$6c71: ld   (hl),$01]
	move.b	(0x02,a2),d0                    	| [$6c73: ld   a,(ix+$02)]
	lea	l_8A87(a6),a0                      	| [$6c76: ld   hl,$8A87]
	addq.b	#1,d2                           	| [$6c79: inc  c]
	jne	l_6c8f                             	| [$6c7a: jr   nz,$6C8F]
	cmp.b	#0xB6,d0                         	| [$6c7c: cp   $B6]
	jcs	l_6c9b                             	| [$6c7e: jr   c,$6C9B]
	bset.b	#2,(a0)                         	| [$6c80: set  2,(hl)]
	bclr.b	#3,(a0)                         	| [$6c82: res  3,(hl)]
	move.b	#0x01,d2                        	| [$6c84: ld   c,$01]
l_6c86:
	lea	l_8D52(a6),a0                      	| [$6c86: ld   hl,$8D52]
	move.b	d2,(a0)+                         	| [$6c89: ld   (hl),c]
	                           	| [$6c8a: inc  l]
	move.b	#0x18,(a0)                      	| [$6c8b: ld   (hl),$18]
	move.w	(sp)+,d0                        	| [$6c8d: pop  af]
	rts                                    	| [$6c8e: ret]
l_6c8f:
	cmp.b	#0x51,d0                         	| [$6c8f: cp   $51]
	jcc	l_6ca5                             	| [$6c91: jr   nc,$6CA5]
l_6c93:
	bset.b	#3,(a0)                         	| [$6c93: set  3,(hl)]
	bclr.b	#2,(a0)                         	| [$6c95: res  2,(hl)]
	move.b	#0x02,d2                        	| [$6c97: ld   c,$02]
	jra	l_6c86                             	| [$6c99: jr   $6C86]
l_6c9b:
	cmp.b	#0x51,d0                         	| [$6c9b: cp   $51]
	jcs	l_6c93                             	| [$6c9d: jr   c,$6C93]
	bset.b	#3,(a0)                         	| [$6c9f: set  3,(hl)]
	bclr.b	#2,(a0)                         	| [$6ca1: res  2,(hl)]
	move.w	(sp)+,d0                        	| [$6ca3: pop  af]
	rts                                    	| [$6ca4: ret]
l_6ca5:
	bset.b	#2,(a0)                         	| [$6ca5: set  2,(hl)]
	bclr.b	#3,(a0)                         	| [$6ca7: res  3,(hl)]
	move.w	(sp)+,d0                        	| [$6ca9: pop  af]
	rts                                    	| [$6caa: ret]
l_6cab:
	move.b	l_8806(a6),d0                   	| [$6cab: ld   a,($8806)]
	                               	| [$6cae: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$6caf: ret  nz] [...]
0:
	move.b	l_8D32(a6),d0                   	| [$6cb0: ld   a,($8D32)]
	                               	| [$6cb3: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$6cb4: ret  nz] [...]
0:
	move.b	l_8F24(a6),d0                   	| [$6cb5: ld   a,($8F24)]
	                               	| [$6cb8: and  a]
	lea	l_8A87(a6),a0                      	| [$6cb9: ld   hl,$8A87]
	jeq	l_6cc1                             	| [$6cbc: jr   z,$6CC1]
	CLEAR_XC_FLAGS                         	| [$6cbe: xor  a]
	clr.b	d0                               	| [$6cbe: xor  a]
	move.b	d0,(a0)                         	| [$6cbf: ld   (hl),a]
	rts                                    	| [$6cc0: ret]
l_6cc1:
	jbsr	l_6bee                            	| [$6cc1: call $6BEE]
	move.b	l_8D54(a6),d0                   	| [$6cc4: ld   a,($8D54)]
	                               	| [$6cc7: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$6cc8: ret  nz] [...]
0:
	lea	l_8A87(a6),a0                      	| [$6cc9: ld   hl,$8A87]
	move.b	l_8F30(a6),d0                   	| [$6ccc: ld   a,($8F30)]
	cmp.b	#0x01,d0                         	| [$6ccf: cp   $01]
	jeq	l_6d0d                             	| [$6cd1: jr   z,$6D0D]
	move.b	ram_pointerl_8F41(a6),d0                   	| [$6cd3: ld   a,($8F41)]
	                               	| [$6cd6: and  a]
	jne	l_6d4d                             	| [$6cd7: jp   nz,$6D4D]
	lea	l_8842(a6),a0                      	| [$6cda: ld   hl,$8842]
	lea	l_8AE0(a6),a2                      	| [$6cdd: ld   ix,$8AE0]
	lea	l_8852(a6),a3                      	| [$6ce1: ld   iy,$8852]
	move.b	#0x06,d1                        	| [$6ce5: ld   b,$06]
l_6ce7:
	move.b	(0x00,a2),d0                    	| [$6ce7: ld   a,(ix+$00)]
	                               	| [$6cea: and  a]
	jne	l_6d17                             	| [$6ceb: jr   nz,$6D17]
l_6ced:
	move.w	#0x0018,d3                      	| [$6ced: ld   de,$0018] 24
	add.w	d3,a2                            	| [$6cf0: add  ix,de]
	move.w	#0x0004,d3                      	| [$6cf2: ld   de,$0004] 4
	add.w	d3,a3                            	| [$6cf5: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_6ce7                             	| [$6cf7: djnz $6CE7]
	move.b	ram_pointerl_8F41(a6),d0                   	| [$6cf9: ld   a,($8F41)]
	                               	| [$6cfc: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$6cfd: ret  z] [...]
0:
	move.b	l_8842(a6),d0                   	| [$6cfe: ld   a,($8842)]
	move.b	d0,d2                           	| [$6d01: ld   c,a]
	LOAD_RAM_POINTER	ram_pointerl_8F41(a6),a1             	| [$6d02: ld   de,($8F41)]
	lea	l_8A87(a6),a0                      	| [$6d06: ld   hl,$8A87]
	move.b	(a1),d0                         	| [$6d09: ld   a,(de)]
	cmp.b	d2,d0                            	| [$6d0a: cp   c]
	jcc	l_6d12                             	| [$6d0b: jr   nc,$6D12]
l_6d0d:
	bset.b	#2,(a0)                         	| [$6d0d: set  2,(hl)]
	bclr.b	#3,(a0)                         	| [$6d0f: res  3,(hl)]
	rts                                    	| [$6d11: ret]
l_6d12:
	bset.b	#3,(a0)                         	| [$6d12: set  3,(hl)]
	bclr.b	#2,(a0)                         	| [$6d14: res  2,(hl)]
	rts                                    	| [$6d16: ret]
l_6d17:
	move.b	(0x00,a3),d0                    	| [$6d17: ld   a,(iy+$00)]
	cmp.b	#0x40,d0                         	| [$6d1a: cp   $40]
	jcs	l_6ced                             	| [$6d1c: jr   c,$6CED]
	cmp.b	#0xC0,d0                         	| [$6d1e: cp   $C0]
	jcc	l_6ced                             	| [$6d20: jr   nc,$6CED]
	sub.b	(a0),d0                          	| [$6d22: sub  (hl)]
	jcc	l_6d26                             	| [$6d23: jr   nc,$6D26]
	not.b	d0                               	| [$6d25: cpl]
l_6d26:
	move.b	d0,d2                           	| [$6d26: ld   c,a]
	move.b	l_8F40(a6),d0                   	| [$6d27: ld   a,($8F40)]
	                               	| [$6d2a: and  a]
	jeq	l_6d31                             	| [$6d2b: jr   z,$6D31]
	cmp.b	d2,d0                            	| [$6d2d: cp   c]
	jcc	l_6ced                             	| [$6d2e: jr   nc,$6CED]
	move.b	d2,d0                           	| [$6d30: ld   a,c]
l_6d31:
	move.b	d0,l_8F40(a6)                   	| [$6d31: ld   ($8F40),a]

	                        	| [$6d34: push iy]
	                        	| [$6d36: pop  de]
	                           	| [$6d37: ld   a,e]
	STORE_RAM_POINTER	a3,ram_pointerl_8F41(a6)                   	| [$6d38: ld   ($8F41),a]
	                   	| [$6d3b: ld   a,d]
	                   	| [$6d3c: ld   ($8F42),a]

	move.l	a2,a1                        	| [$6d3f: push ix]
	                        	| [$6d41: pop  de]
	addq.w	#1,a1                           	| [$6d42: inc  de]
	                          	| [$6d43: ld   a,e]
	STORE_RAM_POINTER	a1,color_ram_pointerl_8F43(a6)                   	| [$6d44: ld   ($8F43),a]
	                  	| [$6d47: ld   a,d]
	                  	| [$6d48: ld   ($8F44),a]
	jra	l_6ced                             	| [$6d4b: jr   $6CED]
l_6d4d:
	LOAD_RAM_POINTER	color_ram_pointerl_8F43(a6),a0             	| [$6d4d: ld   hl,($8F43)]

	move.b	(a0),d0                         	| [$6d50: ld   a,(hl)]
	                               	| [$6d51: and  a]
	jne	l_6d60                             	| [$6d52: jr   nz,$6D60]
	LOAD_RAM_POINTER	ram_pointerl_8F41(a6),a0             	| [$6d54: ld   hl,($8F41)]
	move.b	(a0),d0                         	| [$6d57: ld   a,(hl)]
	cmp.b	#0x40,d0                         	| [$6d58: cp   $40]
	jcs	l_6d60                             	| [$6d5a: jr   c,$6D60]
	cmp.b	#0xC0,d0                         	| [$6d5c: cp   $C0]
	jcs	l_6d68                             	| [$6d5e: jr   c,$6D68]
l_6d60:
	clr.b	d0                               	| [$6d60: xor  a]
	lea	l_8F40(a6),a0                      	| [$6d61: ld   hl,$8F40]
	move.b	#0x05,d1                        	| [$6d64: ld   b,$05]
	jbsr	fill_area_0010                            	| [$6d66: rst  $10]
	rts                                    	| [$6d67: ret]
l_6d68:
	move.b	d0,d2                           	| [$6d68: ld   c,a]
	move.b	round_number_8907(a6),d7                   	| [$6d69: ld   a,($8907)]
	move.b	l_8842(a6),d0                   	| [$6d6e: ld   a,($8842)]
	btst.b	#0,d7                           	| [$6d6c: bit  0,a]
	jne	l_6d77                             	| [$6d71: jr   nz,$6D77]
	subq.b	#0x02,d0                        	| [$6d73: sub  $02]
	jra	l_6d79                             	| [$6d75: jr   $6D79]
l_6d77:
	add.b	#0x14,d0                         	| [$6d77: add  a,$14]
l_6d79:
	lea	l_8A87(a6),a0                      	| [$6d79: ld   hl,$8A87]
	move.b	d0,d1                           	| [$6d7c: ld   b,a]
	move.b	l_8F03(a6),d0                   	| [$6d7d: ld   a,($8F03)]
	addq.b	#1,d0                           	| [$6d80: inc  a]
	move.b	d0,l_8F03(a6)                   	| [$6d81: ld   ($8F03),a]
	and.b	#0x07,d0                         	| [$6d84: and  $07]
	jne	l_6d95                             	| [$6d86: jr   nz,$6D95]
	move.b	d1,d0                           	| [$6d88: ld   a,b]
	add.b	#0x08,d0                         	| [$6d89: add  a,$08]
	cmp.b	d2,d0                            	| [$6d8b: cp   c]
	jcs	l_6d95                             	| [$6d8c: jr   c,$6D95]
	sub.b	#0x10,d0                         	| [$6d8e: sub  $10]
	move.b	d0,d7
	move.b	#0x10,d0                        	| [$6d91: ld   a,$10]
	cmp.b	d2,d7                            	| [$6d90: cp   c]
	jcs	l_6d96                             	| [$6d93: jr   c,$6D96]
l_6d95:
	clr.b	d0                               	| [$6d95: xor  a]
l_6d96:
	move.b	d0,(a0)                         	| [$6d96: ld   (hl),a]
	move.b	d1,d0                           	| [$6d97: ld   a,b]
	cmp.b	d2,d0                            	| [$6d98: cp   c]
	jeq	l_6da1                             	| [$6d99: jr   z,$6DA1]
	jcs	l_6d12                             	| [$6d9b: jp   c,$6D12]
	jra	l_6d0d                             	| [$6d9e: jp   $6D0D]
l_6da1:
	bclr.b	#2,(a0)                         	| [$6da1: res  2,(hl)]
	bclr.b	#3,(a0)                         	| [$6da3: res  3,(hl)]
	rts                                    	| [$6da5: ret]
l_6da6:
	move.b	l_8F51(a6),d0                   	| [$6da6: ld   a,($8F51)]
	jbsr	jump_from_table_below_0028                            	| [$6da9: rst  $28]
jump_table_6DAA:
	.long	l_6db8
	.long	l_6e59
	.long	l_6f42
	.long	l_6f5e
	.long	l_6f9d
	.long	l_7032
	.long	l_705f


l_6db8:
	jbsr	l_0fbc                            	| [$6db8: call $0FBC]
	move.b	round_number_8907(a6),d0                   	| [$6dbb: ld   a,($8907)]
	lsr.b	#2,d0                            	| [$6dbe: srl  a] * 2
	cmp.b	#0x07,d0                         	| [$6dc2: cp   $07]
	jcs	l_6dc8                             	| [$6dc4: jr   c,$6DC8]
	move.b	#0x07,d0                        	| [$6dc6: ld   a,$07]
l_6dc8:
	and.b	#0x07,d0                         	| [$6dc8: and  $07]
	LOAD_ROM	0x70F3,a0                          	| [$6dca: ld   hl,$70F3]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$6dcd: call $0C45]
	STORE_RXM_POINTER	a1,ram_or_rom_pointer_8f4a(a6)            	| [$6dd0: ld   ($8F4A),de]
	
	move.b	#0x40,d0                        	| [$6dd4: ld   a,$40]
	move.b	d0,ram_pointer_8f48(a6)                   	| [$6dd6: ld   ($8F48),a]
	lea	l_8F51(a6),a0                      	| [$6dd9: ld   hl,$8F51]
	addq.b	#1,(a0)                         	| [$6ddc: inc  (hl)]
	move.b	round_number_8907(a6),d0                   	| [$6ddd: ld   a,($8907)]
	lsr.b	#3,d0                            	| [$6de0: srl  a] * 3
	bcs.b	0f                               	| [...]
	rts                                    	| [$6de6: ret  nc] [...]
0:
* protection again?? checksum
											| [$6de7: ld   hl,$0AC8]
											| [$6dea: ld   de,$6DF9]
											| [$6ded: ld   b,$60]
								
											| [$6def: ld   a,(de)]
											| [$6df0: cp   (hl)]
											| [$6df1: jp   nz,$7071]
											| [$6df4: inc  hl]
											| [$6df5: inc  de]
											| [...]
											| [$6df6: djnz $6DEF]
	rts                                    	| [$6df8: ret]

l_6df9:
	lea	character_animation_timer_8D41(a6),a0                      	| [$6df9: ld   hl,$8D41]
	subq.b	#1,(a0)                         	| [$6dfc: dec  (hl)]
	jne	l_6e02                             	| [$6dfd: jr   nz,$6E02]
	jbsr	l_0a28                            	| [$6dff: call $0A28]
l_6e02:
	jbsr	l_09f8                            	| [$6e02: call $09F8]
	lea	high_score_table_timer_8E50(a6),a0                      	| [$6e05: ld   hl,$8E50]
	subq.b	#1,(a0)                         	| [$6e08: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$6e09: ret  nz] [...]
0:
	move.b	#0x02,(a0)                      	| [$6e0a: ld   (hl),$02]
	LOAD_ROM_POINTER	rom_pointer_8e54(a6),a0             	| [$6e0c: ld   hl,($8E54)]
	move.b	(a0)+,d0                         	| [$6e0f: ld   a,(hl)]
	                           	| [$6e10: inc  hl]
	STORE_ROM_POINTER	a0,rom_pointer_8e54(a6)            	| [$6e11: ld   ($8E54),hl]
	
	LOAD_RXM_POINTER	ram_or_rom_pointer_8e56(a6),a0             	| [$6e14: ld   hl,($8E56)]
	move.b	d0,(a0)                         	| [$6e17: ld   (hl),a]
	move.w	#0xFFE0,d3                          	| [$6e18: ld   de,$FFE0]
	add.w	d3,a0                            	| [$6e1b: add  hl,de]
	STORE_RXM_POINTER	a0,ram_or_rom_pointer_8e56(a6)            	| [$6e1c: ld   ($8E56),hl]
	
	lea	l_8E52(a6),a0                      	| [$6e1f: ld   hl,$8E52]
	subq.b	#1,(a0)                         	| [$6e22: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$6e23: ret  nz] [...]
0:
	move.b	#0x0D,(a0)                      	| [$6e24: ld   (hl),$0D]
	lea	high_score_table_timer_8E50(a6),a0                      	| [$6e26: ld   hl,$8E50]
	move.b	#0x14,(a0)+                      	| [$6e29: ld   (hl),$14]
	                           	| [$6e2b: inc  l]
	addq.b	#1,(a0)                         	| [$6e2c: inc  (hl)]
	LOAD_RXM_POINTER	ram_or_rom_pointer_8e56(a6),a0             	| [$6e2d: ld   hl,($8E56)]
	move.w	#0x0000,d3                      	| [$6e30: ld   de,$0000] 0
	move.b	#0x0E,d1                        	| [$6e33: ld   b,$0E]
l_6e35:
	moveq	#0,d0
	move.b	(a0),d0                         	| [$6e35: ld   a,(hl)]
	add.w	d0,d3                            	| [$6e36: add  a,e]
	                           	| [$6e37: ld   e,a]
	                             	| [$6e38: jr   nc,$6E3B]
	                           	| [$6e3a: inc  d]
l_6e3b:
	                        	| [$6e3b: ld   a,$20]
	add.w	#0x20,a0                            	| [$6e3d: add  a,l]
	                        	| [$6e3e: ld   l,a]
	                       	| [$6e3f: jr   nc,$6E42]
	                        	| [$6e41: inc  h]
l_6e42:
	subq.b	#1,d1                           	| [...]
	jne	l_6e35                             	| [$6e42: djnz $6E35]
	LOAD_RAM_POINTER	ram_pointer_8f48(a6),a0             	| [$6e44: ld   hl,($8F48)]
	LOAD_D3D4_FROM_D3_16
	move.b	(a0),d0                         	| [$6e47: ld   a,(hl)]
	cmp.b	d4,d0                            	| [$6e48: cp   e]
	jne	pigs_arrive_during_title_7442      	| [$6e49: jp   nz,pigs_arrive_during_title_7442]
	addq.w	#1,a0                           	| [$6e4c: inc  hl]
	move.b	(a0),d0                         	| [$6e4d: ld   a,(hl)]
	cmp.b	d3,d0                            	| [$6e4e: cp   d]
	jne	intro_balloons_rise_76ea                             	| [$6e4f: jp   nz,$76EA]
	addq.w	#1,a0                           	| [$6e52: inc  hl]
	STORE_RAM_POINTER	a0,ram_pointer_8f48(a6)            	| [$6e53: ld   ($8F48),hl]
	
	rts                                    	| [$6e56: ret]

l_6e59:
	jbsr	l_1583                            	| [$6e59: call $1583]
	jbsr	l_6e75                            	| [$6e5c: call $6E75]
	jbsr	l_1e55                            	| [$6e5f: call $1E55]
	jbsr	l_20d4                            	| [$6e62: call $20D4]
	jbsr	update_sprite_shadows_02EF        	| [$6e65: call update_sprite_shadows_02EF]
	jbsr	l_18da                            	| [$6e68: call $18DA]
	jbsr	l_191c                            	| [$6e6b: call $191C]
	jbsr	l_6404                            	| [$6e6e: call $6404]
	jbsr	l_0e64                            	| [$6e71: call $0E64]
	rts                                    	| [$6e74: ret]

l_6e75:
	                      	| [$6e75: ld   hl,$881E]
	    	| [$6e78: ld   a,(checksum_failed_8EF0)]
	      	| [$6e7b: or   (hl)]
	       	| [$6e7c: jp   nz,$4C92] crash!
	jbsr	l_6e86                            	| [$6e7f: call $6E86]
	jbsr	l_6edb                            	| [$6e82: call $6EDB]
	rts                                    	| [$6e85: ret]
l_6e86:
	lea	ram_pointer_8f48(a6),a0                      	| [$6e86: ld   hl,$8F48]
	move.b	(a0),d0                         	| [$6e89: ld   a,(hl)]
	                               	| [$6e8a: and  a]
	jeq	l_6e8f                             	| [$6e8b: jr   z,$6E8F]
	subq.b	#1,(a0)                         	| [$6e8d: dec  (hl)]
	rts                                    	| [$6e8e: ret]
l_6e8f:
	move.b	l_8F49(a6),d7                   	| [$6e8f: ld   a,($8F49)]
	move.b	#0x20,d0                        	| [$6e94: ld   a,$20]
	btst.b	#1,d7                           	| [$6e92: bit  1,a]
	jeq	l_6e9a                             	| [$6e96: jr   z,$6E9A]
	move.b	#0x2C,d0                        	| [$6e98: ld   a,$2C]
l_6e9a:
	move.b	d0,(a0)                         	| [$6e9a: ld   (hl),a]
	LOAD_RXM_POINTER	ram_or_rom_pointer_8f4a(a6),a0             	| [$6e9b: ld   hl,($8F4A)]
	move.b	(a0),d0                         	| [$6e9e: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$6e9f: cp   $FF]
	bne.b	0f                               	| [...]
	rts                                    	| [$6ea1: ret  z] [...]
0:
	addq.w	#1,a0                           	| [$6ea2: inc  hl]
	STORE_RXM_POINTER	a0,ram_or_rom_pointer_8f4a(a6)            	| [$6ea3: ld   ($8F4A),hl]
	
	move.b	d0,d1                           	| [$6ea6: ld   b,a]
	lea	l_8AC8(a6),a2                      	| [$6ea7: ld   ix,$8AC8]
	move.w	#0x0018,d3                      	| [$6eab: ld   de,$0018] 24
l_6eae:
	add.w	d3,a2                            	| [$6eae: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_6eae                             	| [$6eb0: djnz $6EAE]
	lea	l_8BEA(a6),a0                      	| [$6eb2: ld   hl,$8BEA]
	move.w	#0x0018,d3                      	| [$6eb5: ld   de,$0018] 24
	move.b	#0x03,d1                        	| [$6eb8: ld   b,$03]
l_6eba:
	move.b	(a0),d0                         	| [$6eba: ld   a,(hl)]
	                               	| [$6ebb: and  a]
	jeq	l_6ec9                             	| [$6ebc: jr   z,$6EC9]
	add.w	d3,a0                            	| [$6ebe: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_6eba                             	| [$6ebf: djnz $6EBA]
	LOAD_RXM_POINTER	ram_or_rom_pointer_8f4a(a6),a0             	| [$6ec1: ld   hl,($8F4A)]
	subq.w	#1,a0                           	| [$6ec4: dec  hl]
	STORE_RXM_POINTER	a0,ram_or_rom_pointer_8f4a(a6)            	| [$6ec5: ld   ($8F4A),hl]
	
	rts                                    	| [$6ec8: ret]
l_6ec9:
	move.b	#0x06,(0x02,a2)                 	| [$6ec9: ld   (ix+$02),$06]
	LOAD_ROM	0x396A,a1                          	| [$6ecd: ld   de,$396A]
	jbsr	store_de_in_struct_381e                            	| [$6ed0: call $381E]
	jbsr	l_3a6c                            	| [$6ed3: call $3A6C]
	lea	l_8F49(a6),a0                      	| [$6ed6: ld   hl,$8F49]
	addq.b	#1,(a0)                         	| [$6ed9: inc  (hl)]
	rts                                    	| [$6eda: ret]
l_6edb:
	lea	l_8AE0(a6),a2                      	| [$6edb: ld   ix,$8AE0]
	move.w	#0x0018,d3                      	| [$6edf: ld   de,$0018] 24
	move.b	#0x0E,d1                        	| [$6ee2: ld   b,$0E]
l_6ee4:
	jbsr	exx                               	| [$6ee4: exx]
	jbsr	l_6f2d                            	| [$6ee5: call $6F2D]
	jbsr	exx                               	| [$6ee8: exx]
	add.w	d3,a2                            	| [$6ee9: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_6ee4                             	| [$6eeb: djnz $6EE4]
	LOAD_RXM_POINTER	ram_or_rom_pointer_8f4a(a6),a0             	| [$6eed: ld   hl,($8F4A)]
	move.b	(a0),d0                         	| [$6ef0: ld   a,(hl)]
	cmp.b	#0xFF,d0                         	| [$6ef1: cp   $FF]
	beq.b	0f                               	| [...]
	rts                                    	| [$6ef3: ret  nz] [...]
0:
	lea	l_8BEA(a6),a0                      	| [$6ef4: ld   hl,$8BEA]
	move.w	#0x0018,d3                      	| [$6ef7: ld   de,$0018] 24
	move.b	#0x03,d1                        	| [$6efa: ld   b,$03]
l_6efc:
	move.b	(a0),d0                         	| [$6efc: ld   a,(hl)]
	                               	| [$6efd: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$6efe: ret  nz] [...]
0:
	add.w	d3,a0                            	| [$6eff: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_6efc                             	| [$6f00: djnz $6EFC]
	lea	l_8F51(a6),a0                      	| [$6f02: ld   hl,$8F51]
	addq.b	#1,(a0)+                         	| [$6f05: inc  (hl)]
	                          	| [$6f06: inc  hl]
	move.w	#0x0635,d3                          	| [$6f07: ld   de,$0635]
	jbsr	update_88A0_0038                            	| [$6f0a: rst  $38]
	move.b	l_8F47(a6),d0                   	| [$6f0b: ld   a,($8F47)]
	move.b	d0,d1                           	| [$6f0e: ld   b,a]
	asl.b	#1,d0                            	| [$6f0f: sla  a]
	add.b	d1,d0                            	| [$6f11: add  a,b]
	move.w	#0x0608,d3                          	| [$6f13: ld   de,$0608]
	cmp.b	(a0),d0                          	| [$6f12: cp   (hl)]
	jne	l_6f1f                             	| [$6f16: jr   nz,$6F1F]
	move.b	#0x04,d0                        	| [$6f18: ld   a,$04]
	move.b	d0,l_8F51(a6)                   	| [$6f1a: ld   ($8F51),a]
	move.b	#0x10,d3                        	| [$6f1d: ld   e,$10]
l_6f1f:
	move.b	#0x40,d0                        	| [$6f1f: ld   a,$40]
	* set lsb
	move.b	d0,ram_pointer_8f48(a6)                   	| [$6f21: ld   ($8F48),a]
	jbsr	update_88A0_0038                            	| [$6f24: rst  $38]
	CLEAR_XC_FLAGS                         	| [$6f25: xor  a]
	clr.b	d0                               	| [$6f25: xor  a]
	lea	l_8C90(a6),a0                      	| [$6f26: ld   hl,$8C90]
	move.b	#0x30,d1                        	| [$6f29: ld   b,$30]
	jbsr	fill_area_0010                            	| [$6f2b: rst  $10]
	rts                                    	| [$6f2c: ret]
l_6f2d:
	move.b	(0x02,a2),d0                    	| [$6f2d: ld   a,(ix+$02)]
	cmp.b	#0x02,d0                         	| [$6f30: cp   $02]
	jeq	l_3536                             	| [$6f32: jp   z,$3536]
	sub.b	#0x0B,d0                         	| [$6f35: sub  $0B]
	jcc	l_6f3d                             	| [$6f37: jr   nc,$6F3D]
	jbsr	l_4006                            	| [$6f39: call $4006]
	rts                                    	| [$6f3c: ret]
l_6f3d:
	jbsr	jump_from_table_below_0028
	.long 	l_3e69
	.long 	l_3e9c  
	
l_6f42:
	lea	l_8F51(a6),a0                      	| [$6f42: ld   hl,$8F51]
	addq.b	#1,(a0)                         	| [$6f45: inc  (hl)]
	addq.w	#1,a0                           	| [$6f46: inc  hl]
	move.b	(a0),d0                         	| [$6f47: ld   a,(hl)]
	                               	| [$6f48: and  a]
	jeq	l_6f4f                             	| [$6f49: jr   z,$6F4F]
	move.b	d0,d1                           	| [$6f4b: ld   b,a]
	jbsr	convert_number_to_bcd_1131                            	| [$6f4c: call $1131]
l_6f4f:
	lea	l_8634(a6),a0                      	| [$6f4f: ld   hl,$8634]
	jbsr	write_2_digits_to_screen_1119                            	| [$6f52: call $1119]
	add.w	d1,a0                            	| [$6f55: add  hl,bc]
	add.w	d1,a0                            	| [$6f56: add  hl,bc]
	move.b	d4,d0                           	| [$6f57: ld   a,e]
	CLEAR_XC_FLAGS
	abcd	d0,d0                            	| [$6f58: add  a,a] + daa
	jbsr	write_2_digits_to_screen_1119                            	| [$6f5a: call $1119]
	rts                                    	| [$6f5d: ret]
l_6f5e:
	lea	ram_pointer_8f48(a6),a0                      	| [$6f5e: ld   hl,$8F48]
	move.b	(a0),d0                         	| [$6f61: ld   a,(hl)]
	cmp.b	#0x20,d0                         	| [$6f62: cp   $20]
	jne	l_6f79                             	| [$6f64: jr   nz,$6F79]
	lea	l_8F52(a6),a0                        	| [$6f66: ld   l,$52]
	move.b	(a0),d0                         	| [$6f68: ld   a,(hl)]
	                               	| [$6f69: and  a]
	jeq	l_6f77                             	| [$6f6a: jr   z,$6F77]
	move.w	#0x0315,d3                          	| [$6f6c: ld   de,$0315]
	jbsr	update_88A0_0038                            	| [$6f6f: rst  $38]
                   	| [$6f70: ld   a,($89E5)]
	 	| [$6f73: and  a]
	           	| [...]
	         	| [$6f74: ret  nz] [...]

	subq.b	#1,(a0)                         	| [$6f75: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$6f76: ret  nz] [...]
0:
l_6f77:
	lea	ram_pointer_8f48(a6),a0                        	| [$6f77: ld   l,$48]
l_6f79:
	subq.b	#1,(a0)                         	| [$6f79: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$6f7a: ret  nz] [...]
0:
	move.b	#0x60,(a0)                      	| [$6f7b: ld   (hl),$60]
	move.b	round_number_8907(a6),d0                   	| [$6f7d: ld   a,($8907)]
	cmp.b	#0x03,d0                         	| [$6f80: cp   $03]
	jne	l_6f98                             	| [$6f82: jp   nz,$6F98]
	* protection checksum removed			| [$6f85: ld   hl,$0B32]
									| [$6f88: ld   de,$7071]
									| [$6f8b: ld   b,$79]
					
									| [$6f8d: ld   a,(de)]
										| [$6f8e: cp   (hl)]
									| [$6f8f: jp   nz,$6DF9]
									| [$6f92: inc  hl]
									| [$6f93: inc  de]
									| [...]
									| [$6f94: djnz $6F8D]
                        	| [$6f96: ld   h,$8F]
l_6f98:
	lea	l_8F51(a6),a0                        	| [$6f98: ld   l,$51]
	move.b	#0x06,(a0)                      	| [$6f9a: ld   (hl),$06]
	rts                                    	| [$6f9c: ret]
l_6f9d:
	move.b	l_8F47(a6),d0                   	| [$6f9d: ld   a,($8F47)]
	lea	l_8634(a6),a0                      	| [$6fa0: ld   hl,$8634]
	move.b	d0,(a0)                         	| [$6fa3: ld   (hl),a]
	move.b	d0,d1                           	| [$6fa4: ld   b,a]
	CLEAR_XC_FLAGS                         	| [$6fa5: xor  a]
	clr.b	d0                               	| [$6fa5: xor  a]
l_6fa6:
	addq.b	#0x05,d0                        	| [$6fa6: add  a,$05]
	subq.b	#1,d1                           	| [...]
	jne	l_6fa6                             	| [$6fa8: djnz $6FA6]
	move.b	d0,l_8F47(a6)                   	| [$6faa: ld   ($8F47),a]
	move.w    #0xFFE0,d3                          	| [$6fad: ld   de,$FFE0]
	move.b	#0x03,d1                        	| [$6fb0: ld   b,$03]
l_6fb2:
	add.w	d3,a0                            	| [$6fb2: add  hl,de]
	clr.b	(a0)                             	| [$6fb3: ld   (hl),$00]
	subq.b	#1,d1                           	| [...]
	jne	l_6fb2                             	| [$6fb5: djnz $6FB2]
	lea	l_8F51(a6),a0                      	| [$6fb7: ld   hl,$8F51]
	addq.b	#1,(a0)                         	| [$6fba: inc  (hl)]
	lea	ram_pointer_8f48(a6),a0                        	| [$6fbb: ld   l,$48]
	move.b	#0x80,(a0)                      	| [$6fbd: ld   (hl),$80]
											| [$6fbf: ld   ix,$6AC5]
											| [$6fc3: ld   hl,$6FED]
											| [$6fc6: ld   b,$44]
						
											| [$6fc8: ld   a,(ix+$00)]
											| [$6fcb: cp   (hl)]
											| [$6fcc: jr   nz,$6FE2]
											| [$6fce: inc  ixl]
							| [$6fd0: ld   a,ixl]
									| [$6fd2: and  a]
								| [$6fd3: jr   nz,$6FD7]
								| [$6fd5: inc  ixh]
						
											| [$6fd7: inc  hl]
											| [...]
											| [$6fd8: djnz $6FC8]
	jbsr	l_0f44                            	| [$6fda: call $0F44]
	move.w	#0x0627,d3                          	| [$6fdd: ld   de,$0627]
	jbsr	update_88A0_0038                            	| [$6fe0: rst  $38]
	rts                                    	| [$6fe1: ret]
l_6fe2:
	clr.b	d0                               	| [$6fe2: xor  a]
	lea	l_8800(a6),a0                      	| [$6fe3: ld   hl,$8800]
	lea	l_8801(a6),a1                      	| [$6fe6: ld   de,$8801]
	move.b	d0,(a0)                         	| [$6fe9: ld   (hl),a]
	jbsr	ldir                              	| [$6fea: ldir]
	rts                                    	| [$6fec: ret]
	move.b	l_892D(a6),d0                   	| [$6fed: ld   a,($892D)]
	cmp.b	#0x02,d0                         	| [$6ff0: cp   $02]
	beq.b	0f                               	| [...]
	rts                                    	| [$6ff2: ret  nz] [...]
0:
	move.b	l_8F56(a6),d0                   	| [$6ff3: ld   a,($8F56)]
	                               	| [$6ff6: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$6ff7: ret  nz] [...]
0:
	addq.b	#1,d0                           	| [$6ff8: inc  a]
	move.b	d0,l_8F56(a6)                   	| [$6ff9: ld   ($8F56),a]
	lea	l_8450(a6),a0                      	| [$6ffc: ld   hl,$8450]
	move.w	#0x0000,d3                      	| [$6fff: ld   de,$0000] 0
	move.w	#0x0000,d4                      	| [$6fff: ld   de,$0000] 0
l_7002:
	move.b	d4,d0                           	| [$7002: ld   a,e]
	add.b	(a0),d0                          	| [$7003: add  a,(hl)]
	move.b	d0,d4                           	| [$7004: ld   e,a]
	SET_C_FROM_X
	jcc	l_7008                             	| [$7005: jr   nc,$7008]
	addq.b	#1,d3                           	| [$7007: inc  d]
l_7008:
	addq.w	#1,a0                           	| [$7008: inc  l]
	LOAD_D5D6_FROM_A0_RAM
	move.b	D6,d0                           	| [$7009: ld   a,l]
	and.b	#0x1F,d0                         	| [$700a: and  $1F]
	cmp.b	#0x1B,d0                         	| [$700c: cp   $1B]
	jne	l_7013                             	| [$700e: jr   nz,$7013]
	addq.w	#1,a0                           	| [$7010: inc  l]
	jra	l_7002                             	| [$7011: jr   $7002]
l_7013:
	cmp.b	#0x1F,d0                         	| [$7013: cp   $1F]
	jne	l_7002                             	| [$7015: jr   nz,$7002]
	add.w	#0x12,a0                        	| [$7017: ld   a,$12]
									| [$7019: add  a,l]
									| [$701a: ld   l,a]
									| [$701b: jr   nc,$7002]
								
	LOAD_D5D6_FROM_A0_RAM								| [$701d: inc  h]
	move.b	D5,d0                           	| [$701e: ld   a,h]
	cmp.b	#0x88,d0                         	| [$701f: cp   $88]
	jcs	l_7002                             	| [$7021: jr   c,$7002]
	move.b	d4,d0                           	| [$7023: ld   a,e]
	cmp.b	#0xB8,d0                         	| [$7024: cp   $B8]
	jeq	l_702b                             	| [$7026: jr   z,$702B]
	SET_X_FROM_C
	jra	l_0929                             	| [$7028: jp   $0929]
l_702b:
	move.b	d3,d0                           	| [$702b: ld   a,d]
	                       	| [$702c: cp   $29]
	                     	| [$702e: jp   nz,$3829]
	rts                                    	| [$7031: ret]
l_7032:
	lea	l_8F47(a6),a0                      	| [$7032: ld   hl,$8F47]
	move.b	(a0),d0                         	| [$7035: ld   a,(hl)]
	                               	| [$7036: and  a]
	beq.b	0f                               	| [...]
	jbsr	l_7059                            	| [$7037: call nz,$7059]
0:
	addq.w	#1,a0                           	| [$703a: inc  hl]
	move.b	(a0),d0                         	| [$703b: ld   a,(hl)]
	                               	| [$703c: and  a]
	jeq	l_7053                             	| [$703d: jr   z,$7053]
	subq.b	#1,(a0)                         	| [$703f: dec  (hl)]
	move.b	(a0),d0                         	| [$7040: ld   a,(hl)]
	and.b	#0x0F,d0                         	| [$7041: and  $0F]
	                               	| [$7043: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$7044: ret  nz] [...]
0:
	lea	l_8F54(a6),a0                        	| [$7045: ld   l,$54]
	addq.b	#1,(a0)                         	| [$7047: inc  (hl)]
	LOAD_ROM	0x06A7,a1                          	| [$704a: ld   de,$06A7]
	btst.b	#0,(a0)                         	| [$7048: bit  0,(hl)]
	jeq	l_7051                             	| [$704d: jr   z,$7051]
	move.b	#0x27,d3                        	| [$704f: ld   e,$27]
l_7051:
	jbsr	update_88A0_0038                            	| [$7051: rst  $38]
	rts                                    	| [$7052: ret]
l_7053:
	move.b	#0x20,(a0)                      	| [$7053: ld   (hl),$20]
	lea	l_8F51(a6),a0                        	| [$7055: ld   l,$51]
	addq.b	#1,(a0)                         	| [$7057: inc  (hl)]
	rts                                    	| [$7058: ret]
l_7059:
	subq.b	#1,(a0)                         	| [$7059: dec  (hl)]
	move.w	#0x0315,d3                          	| [$705a: ld   de,$0315]
	jbsr	update_88A0_0038                            	| [$705d: rst  $38]
	rts                                    	| [$705e: ret]
l_705f:
	lea	ram_pointer_8f48(a6),a0                      	| [$705f: ld   hl,$8F48]
	subq.b	#1,(a0)                         	| [$7062: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$7063: ret  nz] [...]
0:
	jbsr	l_0ecf                            	| [$7064: call $0ECF]
	CLEAR_XC_FLAGS                         	| [$7067: xor  a]
	clr.b	d0                               	| [$7067: xor  a]
	move.b	d0,l_8F52(a6)                   	| [$7068: ld   ($8F52),a]
	move.b	#0x06,d0                        	| [$706b: ld   a,$06]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$706d: ld   (in_game_sub_state_880A),a]
	rts                                    	| [$7070: ret]
l_7071:
	lea	l_82BC(a6),a0                      	| [$7071: ld   hl,$82BC]
	move.w    #0xFFE0,d3                          	| [$7074: ld   de,$FFE0]
	move.b	#0x0A,d1                        	| [$7077: ld   b,$0A]
l_7079:
	move.b	(a0),d0                         	| [$7079: ld   a,(hl)]
	add.w	d3,a0                            	| [$707a: add  hl,de]
	cmp.b	(a0),d0                          	| [$707b: cp   (hl)]
	jne	l_08b3                             	| [$707c: jp   nz,$08B3]
	subq.b	#1,d1                           	| [...]
	jne	l_7079                             	| [$707f: djnz $7079]
	lea	character_animation_timer_8D41(a6),a0                      	| [$7081: ld   hl,$8D41]
	subq.b	#1,(a0)                         	| [$7084: dec  (hl)]
	jne	l_708a                             	| [$7085: jr   nz,$708A]
	jbsr	l_0a28                            	| [$7087: call $0A28]
l_708a:
	jbsr	l_09f8                            	| [$708a: call $09F8]
	lea	high_score_table_timer_8E50(a6),a0                      	| [$708d: ld   hl,$8E50]
	subq.b	#1,(a0)                         	| [$7090: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$7091: ret  nz] [...]
0:
	move.b	#0x01,(a0)+                      	| [$7092: ld   (hl),$01]
	                           	| [$7094: inc  l]
	subq.b	#1,(a0)                         	| [$7095: dec  (hl)]
	move.b	l_8E53(a6),d0                   	| [$7096: ld   a,($8E53)]
	subq.b	#1,d0                           	| [$7099: dec  a]
	LOAD_ROM	0x0BAB,a0                          	| [$709a: ld   hl,$0BAB]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$709d: call $0C45]
	STORE_RXM_POINTER	a1,ram_or_rom_pointer_8e56(a6)            	| [$70a0: ld   ($8E56),de]
	
	lea	l_8E53(a6),a0                      	| [$70a4: ld   hl,$8E53]
	subq.b	#1,(a0)                         	| [$70a7: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$70a8: ret  nz] [...]
0:
	lea	high_score_table_timer_8E50(a6),a0                      	| [$70a9: ld   hl,$8E50]
	move.b	#0x96,(a0)+                      	| [$70ac: ld   (hl),$96]
	                           	| [$70ae: inc  l]
	clr.b	d0                               	| [$70af: xor  a]
	move.b	d0,(a0)                         	| [$70b0: ld   (hl),a]
	lea	l_8462(a6),a0                      	| [$70b1: ld   hl,$8462]
	move.b	d0,d3                           	| [$70b4: ld   d,a]
	move.b	d0,d4                           	| [$70b5: ld   e,a]
	move.b	#0x0E,d2                        	| [$70b6: ld   c,$0E]
l_70b8:
	move.b	#0x1D,d1                        	| [$70b8: ld   b,$1D]
l_70ba:
	move.b	d4,d0                           	| [$70ba: ld   a,e]
	add.b	(a0),d0                          	| [$70bb: add  a,(hl)]
	jcc	l_70bf                             	| [$70bc: jr   nc,$70BF]
	addq.b	#1,d3                           	| [$70be: inc  d]
l_70bf:
	move.b	d0,d4                           	| [$70bf: ld   e,a]
	addq.w	#1,a0                           	| [$70c0: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_70ba                             	| [$70c1: djnz $70BA]
	                           	| [$70c3: ld   a,l]
	addq.w	#0x03,a0                        	| [$70c4: add  a,$03]
	                           	| [$70c6: ld   l,a]
	                             	| [$70c7: jr   nc,$70CA]
	                           	| [$70c9: inc  h]
l_70ca:
	subq.b	#1,d2                           	| [$70ca: dec  c]
	jne	l_70b8                             	| [$70cb: jr   nz,$70B8]
	LOAD_RAM_POINTER	ram_pointer_8f48(a6),a0             	| [$70cd: ld   hl,($8F48)]
	move.b	d4,d0                           	| [$70d0: ld   a,e]
	cmp.b	(a0),d0                          	| [$70d1: cp   (hl)]
	jne	l_08b3                             	| [$70d2: jp   nz,$08B3]
	addq.w	#1,a0                           	| [$70d5: inc  hl]
	move.b	(a0),d0                         	| [$70d6: ld   a,(hl)]
	cmp.b	d3,d0                            	| [$70d7: cp   d]
	jne	l_08e9                             	| [$70d8: jp   nz,$08E9]
	clr.b	d0                               	| [$70db: xor  a]
	move.b	d0,ram_pointer_8f48(a6)                   	| [$70dc: ld   ($8F48),a]
	move.b	d0,l_8F49(a6)                   	| [$70df: ld   ($8F49),a]
	move.b	#GAME_IN_PLAY_03,d0             	| [$70e2: ld   a,GAME_IN_PLAY_03]
	move.b	d0,game_state_8805(a6)          	| [$70e4: ld   (game_state_8805),a]
	jra	init_play_0E00                     	| [$70e7: jp   init_play_0E00]


l_71b9:
	move.b	l_8F38(a6),d0                   	| [$71b9: ld   a,($8F38)]
	lea	update_sprite_shadows_02EF,a0      	| [$71bc: ld   hl,update_sprite_shadows_02EF]

	move.l	a0,-(sp)                        	| [$71bf: push hl]
	jbsr	jump_from_table_below_0028                            	| [$71c0: rst  $28]
jump_table_71C1:
	.long	l_71c7
	.long	l_72a0
	.long	l_7421

l_71c7:
	jbsr	l_71ce                            	| [$71c7: call $71CE]
	jbsr	l_20d4                            	| [$71ca: call $20D4]
	rts                                    	| [$71cd: ret]
l_71ce:
	lea	l_8F36(a6),a0                      	| [$71ce: ld   hl,$8F36]
	move.b	(a0),d0                         	| [$71d1: ld   a,(hl)]
	                               	| [$71d2: and  a]
	jeq	l_71d7                             	| [$71d3: jr   z,$71D7]
	subq.b	#1,(a0)                         	| [$71d5: dec  (hl)]
	rts                                    	| [$71d6: ret]
l_71d7:
	lea	l_8A99(a6),a0                      	| [$71d7: ld   hl,$8A99]
	move.b	l_8C90(a6),d0                   	| [$71da: ld   a,($8C90)]
	or.b	(a0),d0                           	| [$71dd: or   (hl)]
	lea	l_8A87(a6),a0                      	| [$71de: ld   hl,$8A87]
	jne	l_71fd                             	| [$71e1: jr   nz,$71FD]
l_71e3:
	move.b	l_8F5B(a6),d0                   	| [$71e3: ld   a,($8F5B)]
	                               	| [$71e6: and  a]
	jne	l_71f8                             	| [$71e7: jr   nz,$71F8]
	move.b	lift_speed_8A84(a6),d0          	| [$71e9: ld   a,(lift_speed_8A84)]
	cmp.b	#0x60,d0                         	| [$71ec: cp   $60]
	jcs	l_71f3                             	| [$71ee: jr   c,$71F3]
	move.b	d0,l_8F5B(a6)                   	| [$71f0: ld   ($8F5B),a]
l_71f3:
	bclr.b	#2,(a0)                         	| [$71f3: res  2,(hl)]
	bset.b	#3,(a0)                         	| [$71f5: set  3,(hl)]
	rts                                    	| [$71f7: ret]
l_71f8:
	bset.b	#2,(a0)                         	| [$71f8: set  2,(hl)]
	bclr.b	#3,(a0)                         	| [$71fa: res  3,(hl)]
	rts                                    	| [$71fc: ret]
l_71fd:
	move.b	lift_speed_8A84(a6),d0          	| [$71fd: ld   a,(lift_speed_8A84)]
	cmp.b	#0x59,d0                         	| [$7200: cp   $59]
	jeq	l_720b                             	| [$7202: jr   z,$720B]
	jcc	l_71e3                             	| [$7204: jr   nc,$71E3]
	bclr.b	#2,(a0)                         	| [$7206: res  2,(hl)]
	bset.b	#3,(a0)                         	| [$7208: set  3,(hl)]
	rts                                    	| [$720a: ret]
l_720b:
	move.b	l_8F39(a6),d0                   	| [$720b: ld   a,($8F39)]
	                               	| [$720e: and  a]
	jne	l_721b                             	| [$720f: jr   nz,$721B]
	move.b	#0x01,d0                        	| [$7211: ld   a,$01]
	move.b	d0,l_8F39(a6)                   	| [$7213: ld   ($8F39),a]
	bclr.b	#2,(a0)                         	| [$7216: res  2,(hl)]
	bclr.b	#3,(a0)                         	| [$7218: res  3,(hl)]
	rts                                    	| [$721a: ret]
l_721b:
	cmp.b	#0x02,d0                         	| [$721b: cp   $02]
	jeq	l_722a                             	| [$721d: jr   z,$722A]
	move.b	#0x02,d0                        	| [$721f: ld   a,$02]
	move.b	d0,l_8F39(a6)                   	| [$7221: ld   ($8F39),a]
	move.b	#0x10,d0                        	| [$7224: ld   a,$10]
	move.b	d0,l_8A87(a6)                   	| [$7226: ld   ($8A87),a]
	rts                                    	| [$7229: ret]
l_722a:
	lea	l_8F3E(a6),a0                      	| [$722a: ld   hl,$8F3E]
	move.b	(a0),d0                         	| [$722d: ld   a,(hl)]
	                               	| [$722e: and  a]
	jne	l_7292                             	| [$722f: jp   nz,$7292]
	subq.w	#0xE-0xB,a0                        	| [$7232: ld   l,$3B]
	addq.b	#1,(a0)                         	| [$7234: inc  (hl)]
	move.b	(a0),d0                         	| [$7235: ld   a,(hl)]
	and.b	#0x07,d0                         	| [$7236: and  $07]
	jne	l_7287                             	| [$7238: jp   nz,$7287]
	move.b	l_8C96(a6),d0                   	| [$723b: ld   a,($8C96)]
	lsr.b	#3,d0                            	| [$723e: srl  a] * 3
	addq.b	#1,d0                           	| [$7244: inc  a]
	move.b	d0,d1                           	| [$7245: ld   b,a]
	lea	l_87E0(a6),a0                      	| [$7246: ld   hl,$87E0]
	move.w    #0xFFE0,d3                          	| [$7249: ld   de,$FFE0]
l_724c:
	add.w	d3,a0                            	| [$724c: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_724c                             	| [$724d: djnz $724C]
	jbsr	l_7287                            	| [$724f: call $7287]
	lsr.b	#3,d0                            	| [$7252: srl  a] * 3
	addq.b	#1,d0                           	| [$7258: inc  a]
	move.b	d0,d1                           	| [$7259: ld   b,a]
l_725a:
	addq.w	#1,a0                           	| [$725a: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_725a                             	| [$725b: djnz $725A]
	move.b	#0x2C,d0                      	| [$725d: ld   (hl),$2C]
	jbsr	osd_w_videoram
	move.w	#0xFC00,d3                          	| [$725f: ld   de,$FC00]
	add.w	d3,a0                            	| [$7262: add  hl,de]
	move.b	l_8C96(a6),d7                   	| [$7263: ld   a,($8C96)]
	and.b	#0x06,d7                         	| [$7266: and  $06]
	move.b	l_8C94(a6),d0                   	| [$726a: ld   a,($8C94)]
	cmp.b	#0x06,d7                         	| [$7268: cp   $06]
	jeq	l_727b                             	| [$726d: jr   z,$727B]
	and.b	#0x06,d0                         	| [$726f: and  $06]
	cmp.b	#0x02,d0                         	| [$7271: cp   $02]
	jeq	l_7278                             	| [$7273: jr   z,$7278]
	clr.b	d0                             	| [$7275: ld   (hl),$00]
	jbsr	osd_w_colorram	
	rts                                    	| [$7277: ret]
l_7278:
	move.b	#0x40,d0                      	| [$7278: ld   (hl),$40]
	jbsr	osd_w_colorram
	rts                                    	| [$727a: ret]
l_727b:
	and.b	#0x06,d0                         	| [$727b: and  $06]
	cmp.b	#0x02,d0                         	| [$727d: cp   $02]
	jeq	l_7284                             	| [$727f: jr   z,$7284]
	move.b	#0x80,d0
	jbsr	osd_w_colorram                      	| [$7281: ld   (hl),$80]
	rts                                    	| [$7283: ret]
l_7284:
	move.b	#0xC0,d0                      	| [$7284: ld   (hl),$C0]
	jbsr	osd_w_colorram                      	| [$7281: ld   (hl),$80]	
	rts                                    	| [$7286: ret]
l_7287:
	move.b	l_8C94(a6),d0                   	| [$7287: ld   a,($8C94)]
	cmp.b	#0xD0,d0                         	| [$728a: cp   $D0]
	bcc.b	0f                               	| [...]
	rts                                    	| [$728c: ret  c] [...]
0:
	move.b	#0x01,d0                        	| [$728d: ld   a,$01]
	move.b	d0,l_8F3E(a6)                   	| [$728f: ld   ($8F3E),a]
l_7292:
	clr.b	d0                               	| [$7292: xor  a]
	move.b	d0,l_8A87(a6)                   	| [$7293: ld   ($8A87),a]
	move.b	d0,l_8F5B(a6)                   	| [$7296: ld   ($8F5B),a]
	lea	l_8F38(a6),a0                      	| [$7299: ld   hl,$8F38]
	addq.b	#1,(a0)+                         	| [$729c: inc  (hl)]
	                           	| [$729d: inc  hl]
	move.b	d0,(a0)                         	| [$729e: ld   (hl),a]
	rts                                    	| [$729f: ret]

l_72a0:
	jbsr	l_20d4                            	| [$72a0: call $20D4]
	jbsr	l_72a7                            	| [$72a3: call $72A7]
	rts                                    	| [$72a6: ret]
l_72a7:
	lea	l_8F3A(a6),a0                      	| [$72a7: ld   hl,$8F3A]
	move.b	(a0),d0                         	| [$72aa: ld   a,(hl)]
	                               	| [$72ab: and  a]
	jne	l_72b2                             	| [$72ac: jr   nz,$72B2]
	jbsr	l_72e1                            	| [$72ae: call $72E1]
	rts                                    	| [$72b1: ret]
l_72b2:
	move.b	l_8F3C(a6),d0                   	| [$72b2: ld   a,($8F3C)]
	                               	| [$72b5: and  a]
	jeq	l_73e3                             	| [$72b6: jp   z,$73E3]
	lea	l_8AE0(a6),a2                      	| [$72b9: ld   ix,$8AE0]
	move.w	#0x0018,d3                      	| [$72bd: ld   de,$0018] 24
	move.b	l_8F3D(a6),d0                   	| [$72c0: ld   a,($8F3D)]
	add.b	d0,d0                            	| [$72c3: add  a,a]
	move.b	d0,d1                           	| [$72c4: ld   b,a]
l_72c5:
	jbsr	exx                               	| [$72c5: exx]
	jbsr	l_72cf                            	| [$72c6: call $72CF]
	jbsr	exx                               	| [$72c9: exx]
	add.w	d3,a2                            	| [$72ca: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_72c5                             	| [$72cc: djnz $72C5]
	rts                                    	| [$72ce: ret]
l_72cf:
	move.b	(0x00,a2),d0                    	| [$72cf: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$72d2: or   (ix+$01)]
	ror.b	#1,d0                            	| [$72d5: rrca]
	bcs.b	0f                               	| [...]
	rts                                    	| [$72d6: ret  nc] [...]
0:
	move.b	(0x02,a2),d0                    	| [$72d7: ld   a,(ix+$02)]
	jbsr	jump_from_table_below_0028                            	| [$72da: rst  $28]
jump_table_72DB:
	.long	l_733c
	.long	l_7395
	.long	l_73ce

l_72e1:
	move.b	l_8C90(a6),d0                   	| [$72e1: ld   a,($8C90)]
	                               	| [$72e4: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$72e5: ret  nz] [...]
0:
	addq.b	#1,d0                           	| [$72e6: inc  a]
	move.b	d0,l_8F3A(a6)                   	| [$72e7: ld   ($8F3A),a]
	lea	l_8F3D(a6),a0                      	| [$72ea: ld   hl,$8F3D]
	addq.b	#1,(a0)                         	| [$72ed: inc  (hl)]
	move.b	(a0),d0                         	| [$72ee: ld   a,(hl)]
	cmp.b	#0x04,d0                         	| [$72ef: cp   $04]
	jne	l_72fb                             	| [$72f1: jr   nz,$72FB]
	lea	l_8F38(a6),a0                        	| [$72f3: ld   l,$38]
	addq.b	#1,(a0)                         	| [$72f5: inc  (hl)]
	subq.w	#2,a0											| [$72f6: ld   l,$36]
	move.b	#0x20,(a0)                      	| [$72f8: ld   (hl),$20]
	rts                                    	| [$72fa: ret]
l_72fb:
	add.b	d0,d0                            	| [$72fb: add  a,a]
	move.b	d0,l_8F3C(a6)                   	| [$72fc: ld   ($8F3C),a]
	move.b	d0,d1                           	| [$72ff: ld   b,a]
	LOAD_ROM	0x7409,a0                          	| [$7300: ld   hl,$7409]
	move.w	#0x0018,d3                      	| [$7303: ld   de,$0018] 24
	lea	l_8AE0(a6),a2                      	| [$7306: ld   ix,$8AE0]
l_730a:
	move.b	#0x01,(0x00,a2)                 	| [$730a: ld   (ix+$00),$01]
	move.b	(a0),d0                         	| [$730e: ld   a,(hl)]
	move.b	d0,(0x06,a2)                    	| [$730f: ld   (ix+$06),a]
	addq.w	#1,a0                           	| [$7312: inc  hl]
	move.b	(a0),d0                         	| [$7313: ld   a,(hl)]
	move.b	d0,(0x10,a2)                    	| [$7314: ld   (ix+$10),a]
	addq.w	#1,a0                           	| [$7317: inc  hl]
	move.b	(a0),d0                         	| [$7318: ld   a,(hl)]
	move.b	d0,(0x04,a2)                    	| [$7319: ld   (ix+$04),a]
	addq.w	#1,a0                           	| [$731c: inc  hl]
	move.b	(a0),d0                         	| [$731d: ld   a,(hl)]
	move.b	d0,(0x0f,a2)                    	| [$731e: ld   (ix+$0f),a]
	addq.w	#1,a0                           	| [$7321: inc  hl]
	jbsr  read_ixl_in_d0                         	| [$7322: ld   a,ixl]
	btst.b	#3,d0                           	| [$7324: bit  3,a]
	jeq	l_732c                             	| [$7326: jr   z,$732C]
	move.b	#0x80,(0x03,a2)                 	| [$7328: ld   (ix+$03),$80]
l_732c:
	move.b	#0x80,(0x05,a2)                 	| [$732c: ld   (ix+$05),$80]
	add.w	d3,a2                            	| [$7330: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_730a                             	| [$7332: djnz $730A]
	move.b	d1,d0                           	| [$7334: ld   a,b]
	lea	l_8F38(a6),a0                      	| [$7335: ld   hl,$8F38]
	move.b	d0,(a0)+                         	| [$7338: ld   (hl),a]
	                           	| [$7339: inc  hl]
	move.b	d0,(a0)                         	| [$733a: ld   (hl),a]
	rts                                    	| [$733b: ret]

l_733c:
	move.b	l_8C96(a6),d0                   	| [$733c: ld   a,($8C96)]
	lsr.b	#3,d0                            	| [$733f: srl  a] * 3
	cmp.b	(0x06,a2),d0                     	| [$7345: cp   (ix+$06)]
	jeq	l_734f                             	| [$7348: jr   z,$734F]
	addq.b	#1,d0                           	| [$734a: inc  a]
	cmp.b	(0x06,a2),d0                     	| [$734b: cp   (ix+$06)]
	beq.b	0f                               	| [...]
	rts                                    	| [$734e: ret  nz] [...]
0:
l_734f:
	move.b	l_8C94(a6),d0                   	| [$734f: ld   a,($8C94)]
	lsr.b	#3,d0                            	| [$7352: srl  a] * 3
	addq.b	#0x04,d0                        	| [$7358: add  a,$04]
	cmp.b	(0x04,a2),d0                     	| [$735a: cp   (ix+$04)]
	jeq	l_7366                             	| [$735d: jr   z,$7366]
	bcc.b	0f                               	| [...]
	rts                                    	| [$735f: ret  c] [...]
0:
	subq.b	#0x05,d0                        	| [$7360: sub  $05]
	cmp.b	(0x04,a2),d0                     	| [$7362: cp   (ix+$04)]
	bcs.b	0f                               	| [...]
	rts                                    	| [$7365: ret  nc] [...]
0:
l_7366:
	addq.b	#1,(0x02,a2)                    	| [$7366: inc  (ix+$02)]
	jbsr  read_ixl_in_d0                         	| [$7369: ld   a,ixl]
	btst.b	#3,d0                           	| [$736b: bit  3,a]
	jne	l_738a                             	| [$736d: jr   nz,$738A]
	LOAD_ROM	0x4086,a1                          	| [$736f: ld   de,$4086]
	jbsr	store_de_in_struct_381e                            	| [$7372: call $381E]
	move.b	#0x40,(0x09,a2)                 	| [$7375: ld   (ix+$09),$40]
	lea	l_8F39(a6),a0                      	| [$7379: ld   hl,$8F39]
	addq.b	#1,(a0)                         	| [$737c: inc  (hl)]
	move.b	l_8F3D(a6),d0                   	| [$737d: ld   a,($8F3D)]
	cmp.b	(a0),d0                          	| [$7380: cp   (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$7381: ret  nz] [...]
0:
	move.b	(a0),d0                         	| [$7382: ld   a,(hl)]
	move.w	#0x0630,d3                          	| [$7383: ld   de,$0630]
	add.b	d0,d3                            	| [$7386: add  a,e]
	                           	| [$7387: ld   e,a]
	jbsr	update_88A0_0038                            	| [$7388: rst  $38]
	rts                                    	| [$7389: ret]
l_738a:
	LOAD_ROM	0x7403,a1                          	| [$738a: ld   de,$7403]
	jbsr	store_de_in_struct_381e                            	| [$738d: call $381E]
	move.b	#0x38,(0x09,a2)                 	| [$7390: ld   (ix+$09),$38]
	rts                                    	| [$7394: ret]
l_7395:
	jbsr	l_4006                            	| [$7395: call $4006]
	jbsr  read_ixl_in_d0                         	| [$7398: ld   a,ixl]
	btst.b	#3,d0                           	| [$739a: bit  3,a]
	jne	l_73b6                             	| [$739c: jr   nz,$73B6]
	move.b	(0x03,a2),d0                    	| [$739e: ld   a,(ix+$03)]
	add.b	(0x09,a2),d0                     	| [$73a1: add  a,(ix+$09)]
	move.b	d0,(0x03,a2)                    	| [$73a4: ld   (ix+$03),a]
	SET_C_FROM_X
	jcc	l_73ac                             	| [$73a7: jr   nc,$73AC]
	addq.b	#1,(0x04,a2)                    	| [$73a9: inc  (ix+$04)]
l_73ac:
	move.b	(0x04,a2),d0                    	| [$73ac: ld   a,(ix+$04)]
	cmp.b	#0x1D,d0                         	| [$73af: cp   $1D]
	bcc.b	0f                               	| [...]
	rts                                    	| [$73b1: ret  c] [...]
0:
	addq.b	#1,(0x02,a2)                    	| [$73b2: inc  (ix+$02)]
	rts                                    	| [$73b5: ret]
l_73b6:
	move.b	(0x03,a2),d0                    	| [$73b6: ld   a,(ix+$03)]
	sub.b	(0x09,a2),d0                     	| [$73b9: sub  (ix+$09)]
	move.b	d0,(0x03,a2)                    	| [$73bc: ld   (ix+$03),a]
	SET_C_FROM_X
	jcc	l_73c4                             	| [$73bf: jr   nc,$73C4]
	subq.b	#1,(0x04,a2)                    	| [$73c1: dec  (ix+$04)]
l_73c4:
	move.b	(0x04,a2),d0                    	| [$73c4: ld   a,(ix+$04)]
	cmp.b	#0x04,d0                         	| [$73c7: cp   $04]
	bcs.b	0f                               	| [...]
	rts                                    	| [$73c9: ret  nc] [...]
0:
	addq.b	#1,(0x02,a2)                    	| [$73ca: inc  (ix+$02)]
	rts                                    	| [$73cd: ret]
l_73ce:
	move.l	a2,a0                         	| [$73ce: ld   a,ixl]
											| [$73d0: ld   l,a]
											| [$73d1: ld   a,ixh]
											| [$73d3: ld   h,a]
	CLEAR_XC_FLAGS                         	| [$73d4: xor  a]
	clr.b	d0                               	| [$73d4: xor  a]
	move.b	#0x18,d1                        	| [$73d5: ld   b,$18]
	jbsr	fill_area_0010                            	| [$73d7: rst  $10]
	lea	l_8F3C(a6),a0                      	| [$73d8: ld   hl,$8F3C]
	subq.b	#1,(a0)                         	| [$73db: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$73dc: ret  nz] [...]
0:
	move.b	#0x30,d0                        	| [$73dd: ld   a,$30]
	move.b	d0,l_8F36(a6)                   	| [$73df: ld   ($8F36),a]
	rts                                    	| [$73e2: ret]
l_73e3:
	lea	l_8F36(a6),a0                      	| [$73e3: ld   hl,$8F36]
	move.b	(a0),d0                         	| [$73e6: ld   a,(hl)]
	                               	| [$73e7: and  a]
	jeq	l_73ec                             	| [$73e8: jr   z,$73EC]
	subq.b	#1,(a0)                         	| [$73ea: dec  (hl)]
	rts                                    	| [$73eb: ret]
l_73ec:
	move.b	l_8F3D(a6),d0                   	| [$73ec: ld   a,($8F3D)]
	                               	| [$73ef: and  a]
	jeq	l_73f8                             	| [$73f0: jr   z,$73F8]
	move.w	#0x06B0,d3                          	| [$73f2: ld   de,$06B0]
	add.b	d0,d3                            	| [$73f5: add  a,e]
	                           	| [$73f6: ld   e,a]
	jbsr	update_88A0_0038                            	| [$73f7: rst  $38]
l_73f8:
	move.b	#0x18,d0                        	| [$73f8: ld   a,$18]
	move.b	d0,l_8F36(a6)                   	| [$73fa: ld   ($8F36),a]
	CLEAR_XC_FLAGS                         	| [$73fd: xor  a]
	clr.b	d0                               	| [$73fd: xor  a]
	lea	l_8F3A(a6),a0                      	| [$73fe: ld   hl,$8F3A]
	move.b	d0,(a0)                         	| [$7401: ld   (hl),a]
	rts                                    	| [$7402: ret]

l_7421:
	lea	l_8F36(a6),a0                          	| [$7421: ld   hl,$3621]
	move.b	(a0),d0                         	| [$7424: ld   a,(hl)]
	                               	| [$7425: and  a]
	jeq	l_742a                             	| [$7426: jr   z,$742A]
	subq.b	#1,(a0)                         	| [$7428: dec  (hl)]
	rts                                    	| [$7429: ret]
l_742a:
	lea	l_8F37(a6),a0                      	| [$742a: ld   hl,$8F37]
	move.b	#0x09,d1                        	| [$742d: ld   b,$09]
	jbsr	fill_area_0010                            	| [$742f: rst  $10]
	lea	l_8AE0(a6),a0                      	| [$7430: ld   hl,$8AE0]
	move.b	#0x48,d1                        	| [$7433: ld   b,$48]
	jbsr	fill_area_0010                            	| [$7435: rst  $10]
	move.b	d0,in_game_sub_state_880A(a6)   	| [$7436: ld   (in_game_sub_state_880A),a]
	move.b	d0,l_8F5B(a6)                   	| [$7439: ld   ($8F5B),a]
	move.b	#0x07,d0                        	| [$743c: ld   a,$07]
	move.b	d0,title_sub_state_8E51(a6)     	| [$743e: ld   (title_sub_state_8E51),a]
	rts                                    	| [$7441: ret]

pigs_arrive_during_title_7442:
	move.b	intro_anim_sub_state_8921(a6),d0                   	| [$7442: ld   a,($8921)]
	and.b	#0x03,d0                         	| [$7445: and  $03]
	jbsr	jump_from_table_below_0028                            	| [$7447: rst  $28]
	.long	init_intro_744e
	.long	display_intro_tiles_7517
	.long	init_intro_pigs_755d

init_intro_744e:
	clr.b	d0                               	| [$744e: xor  a]
	move.b	d0,written_column_index_88B7(a6)                   	| [$744f: ld   ($88B7),a]
	LOAD_ROM	0x4AF0,a1                          	| [$7452: ld   de,$4AF0]
	LOAD_ROM	0x43E1,a0                          	| [$7455: ld   hl,$43E1]
	STORE_ROM_POINTER	a0,rom_pointer_88BA(a6)            	| [$7458: ld   ($88BA),hl]
	
	STORE_ROM_POINTER	a1,rom_pointer_8f45(a6)            	| [$745b: ld   ($8F45),de]
	
	lea	l_8442(a6),a0                      	| [$745f: ld   hl,$8442]
	STORE_RAM_POINTER	a0,video_ram_pointer_88b8(a6)            	| [$7462: ld   ($88B8),hl]
	
	lea	l_8042(a6),a0                      	| [$7465: ld   hl,$8042]
	STORE_RAM_POINTER	a0,color_ram_pointerl_8F43(a6)            	| [$7468: ld   ($8F43),hl]
	
	lea	intro_anim_sub_state_8921(a6),a0                      	| [$746b: ld   hl,$8921]
	addq.b	#1,(a0)                         	| [$746e: inc  (hl)]
										| [$746f: ld   hl,$749A]
										| [$7472: ld   de,$0000] 0
										| [$7475: ld   b,$08]
								
										| [$7477: ld   a,(de)]
											| [$7478: cp   (hl)]
										| [$7479: jp   nz,$7486]
										| [$747c: inc  hl]
										| [$747d: inc  de]
										| [...]
										| [$747e: djnz $7477]
										| [$7480: ld   ix,bootup_0092]
										| [$7484: ld   b,$74]
					
										| [$7486: ld   a,(ix+$00)]
										| [$7489: cp   (hl)]
										| [$748a: jp   nz,$67DF]
										| [$748d: inc  hl]
										| [$748e: inc  ixl]
						| [$7490: ld   a,ixl]
								| [$7492: and  a]
							| [$7493: jr   nz,$7497]
						| [$7495: inc  ixh]
					
										| [...]
										| [$7497: djnz $7486]
	rts                                    	| [$7499: ret]
	
display_intro_tiles_7517:
	jbsr	write_column_to_screen_4381                            	| [$7517: call $4381]
	lea	written_column_index_88B7(a6),a0                      	| [$751a: ld   hl,$88B7]
	addq.b	#1,(a0)                         	| [$751d: inc  (hl)]
	move.b	(a0),d0                         	| [$751e: ld   a,(hl)]
	cmp.b	#0x1C,d0                         	| [$751f: cp   $1C]
	beq.b	0f                               	| [...]
	rts                                    	| [$7521: ret  nz] [...]
0:
	lea	tile_or_color_mode_8920(a6),a0                      	| [$7522: ld   hl,$8920]
	move.b	(a0),d0                         	| [$7525: ld   a,(hl)]
	addq.b	#1,(a0)                         	| [$7526: inc  (hl)]
	move.b	d0,written_column_index_88B7(a6)                   	| [$7528: ld   ($88B7),a]
	bne.b	0f                               	| [...]
	rts                                    	| [$752b: ret  z] [...]
0:
	lea	l_82BC(a6),a0                      	| [$752c: ld   hl,$82BC]
	move.w	#0x0000,d3                      	| [$752f: ld   de,$0000] 0
	move.b	#0x02,d2                        	| [$7532: ld   c,$02]
l_7534:
	move.b	#0x0E,d1                        	| [$7534: ld   b,$0E]
l_7536:
	move.b	(a0),d0                         	| [$7536: ld   a,(hl)]
	add.b	d4,d0                            	| [$7537: add  a,e]
	move.b	d0,d4                           	| [$7538: ld   e,a]
	SET_C_FROM_X
	jcc	l_753c                             	| [$7539: jr   nc,$753C]
	addq.b	#1,d3                           	| [$753b: inc  d]
l_753c:
	                           	| [$753c: ld   a,l]
	sub.w	#0x20,a0                         	| [$753d: sub  $20]
									| [$753f: ld   l,a]
			
									| [$7540: jr   nc,$7543]
									| [$7542: dec  h]
l_7543:
	subq.b	#1,d1                           	| [...]
	jne	l_7536                             	| [$7543: djnz $7536]
	lea	l_86BC(a6),a0                      	| [$7546: ld   hl,$86BC]
	subq.b	#1,d2                           	| [$7545: dec  c]
	jne	l_7534                             	| [$7549: jr   nz,$7534]
	move.b	d4,d0                           	| [$754b: ld   a,e]
	* rom/ram check again against copyright?                    	| [$754c: cp   $4F]
	                       	| [$754e: jp   nz,$43E1]
											| [$7551: dec  d]
											| [$7552: jp   nz,$462C]
	lea	intro_anim_sub_state_8921(a6),a0                      	| [$7555: ld   hl,$8921]
	addq.b	#1,(a0)                         	| [$7558: inc  (hl)]
	jbsr	l_0fb2                            	| [$7559: call $0FB2]
	rts                                    	| [$755c: ret]

init_intro_pigs_755d:
	jbsr	l_756d                            	| [$755d: call $756D]
	jbsr	l_7621                            	| [$7560: call $7621]
	jbsr	animate_pigs_in_house_intro_6b13                            	| [$7563: call $6B13]
	jbsr	l_76af                            	| [$7566: call $76AF]
	jbsr	update_sprite_shadows_02EF        	| [$7569: call update_sprite_shadows_02EF]
	rts                                    	| [$756c: ret]
l_756d:
	lea	intro_timer_8929(a6),a0                      	| [$756d: ld   hl,$8929]
	move.b	(a0),d0                         	| [$7570: ld   a,(hl)]
	                               	| [$7571: and  a]
	jeq	l_7576                             	| [$7572: jr   z,$7576]
	subq.b	#1,(a0)                         	| [$7574: dec  (hl)]
	rts                                    	| [$7575: ret]
l_7576:
	move.b	l_892D(a6),d0                   	| [$7576: ld   a,($892D)]
	cmp.b	#0x08,d0                         	| [$7579: cp   $08]
	bne.b	0f                               	| [...]
	rts                                    	| [$757b: ret  z] [...]
0:
	lea	l_8AE0(a6),a2                      	| [$757c: ld   ix,$8AE0]
	lea	l_8B70(a6),a3                      	| [$7580: ld   iy,$8B70]
	move.w	#0x0018,d3                      	| [$7584: ld   de,$0018] 24
	move.b	#0x08,d1                        	| [$7587: ld   b,$08]
l_7589:
	jbsr	exx                               	| [$7589: exx]
	jbsr	l_7595                            	| [$758a: call $7595]
	jbsr	exx                               	| [$758d: exx]
	add.w	d3,a2                            	| [$758e: add  ix,de]
	add.w	d3,a3                            	| [$7590: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_7589                             	| [$7592: djnz $7589]
	rts                                    	| [$7594: ret]
l_7595:
	move.b	(0x00,a2),d0                    	| [$7595: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$7598: or   (ix+$01)]
	ror.b	#1,d0                            	| [$759b: rrca]
	bcc.b	0f                               	| [...]
	rts                                    	| [$759c: ret  c] [...]
0:
	move.b	#0x01,(0x00,a2)                 	| [$759d: ld   (ix+$00),$01]
	                         	| [$75a1: xor  a]
	clr.b	d0                               	| [$75a1: xor  a]
	move.b	d0,(0x03,a2)                    	| [$75a2: ld   (ix+$03),a]
	move.b	d0,(0x05,a2)                    	| [$75a5: ld   (ix+$05),a]
	move.b	#0x15,(0x04,a2)                 	| [$75a8: ld   (ix+$04),$15]
	move.b	#0x1E,(0x06,a2)                 	| [$75ac: ld   (ix+$06),$1E]
	move.b	l_892D(a6),d0                   	| [$75b0: ld   a,($892D)]
	cmp.b	#0x02,d0                         	| [$75b3: cp   $02]
	jcs	l_75e8                             	| [$75b5: jr   c,$75E8]
	                         	| [$75b7: xor  a]
	clr.b	d0                               	| [$75b7: xor  a]
	move.b	d0,(0x03,a3)                    	| [$75b8: ld   (iy+$03),a]
	move.b	d0,(0x05,a3)                    	| [$75bb: ld   (iy+$05),a]
	move.b	#0x14,(0x04,a3)                 	| [$75be: ld   (iy+$04),$14]
	move.b	#0x1E,(0x06,a3)                 	| [$75c2: ld   (iy+$06),$1E]
	LOAD_ROM	0x7618,a0                          	| [$75c6: ld   hl,$7618]
	move.b	l_8922(a6),d0                   	| [$75c9: ld   a,($8922)]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$75cc: rst  $20]
	move.b	d0,(0x17,a3)                    	| [$75cd: ld   (iy+$17),a]
	LOAD_ROM	0x5657,a0                          	| [$75d0: ld   hl,$5657]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$75d3: call $0C45]
	LOAD_D3D4_FROM_D3_16
	move.b	d4,(0x0c,a3)                    	| [$75d6: ld   (iy+$0c),e]
	move.b	d3,(0x0d,a3)                    	| [$75d9: ld   (iy+$0d),d]
	move.b	#0x18,(0x09,a3)                 	| [$75dc: ld   (iy+$09),$18]
	move.b	#0x01,(0x00,a3)                 	| [$75e0: ld   (iy+$00),$01]
	lea	l_8922(a6),a0                      	| [$75e4: ld   hl,$8922]
	addq.b	#1,(a0)                         	| [$75e7: inc  (hl)]
l_75e8:
	move.b	#0x18,(0x09,a2)                 	| [$75e8: ld   (ix+$09),$18]
	move.b	l_892D(a6),d0                   	| [$75ec: ld   a,($892D)]
	cmp.b	#0x02,d0                         	| [$75ef: cp   $02]
	jcs	l_75f5                             	| [$75f1: jr   c,$75F5]
	move.b	#0x02,d0                        	| [$75f3: ld   a,$02]
l_75f5:
	LOAD_ROM	0x761E,a0                          	| [$75f5: ld   hl,$761E]
	jbsr	read_byte_a0_plus_d0_0020                            	| [$75f8: rst  $20]
	move.b	d0,intro_timer_8929(a6)                   	| [$75f9: ld   ($8929),a]
	lea	l_892D(a6),a0                      	| [$75fc: ld   hl,$892D]
	addq.b	#1,(a0)                         	| [$75ff: inc  (hl)]
	move.b	(a0),d0                         	| [$7600: ld   a,(hl)]
	LOAD_ROM	0x76DD,a1                          	| [$7603: ld   de,$76DD]
	cmp.b	#0x03,d0                         	| [$7601: cp   $03]
	jcc	l_760b                             	| [$7606: jr   nc,$760B]
	LOAD_ROM	0x76D4,a1                          	| [$7608: ld   de,$76D4]
l_760b:
	jbsr	store_de_in_struct_381e                            	| [$760b: call $381E]
	move.b	l_892D(a6),d0                   	| [$760e: ld   a,($892D)]
	add.b	d0,d0                            	| [$7611: add  a,a]
	add.b	d0,d0                            	| [$7612: add  a,a]
	move.b	d0,(0x11,a3)                    	| [$7613: ld   (iy+$11),a]
	addq.w	#4,a7                        	| [$7616: pop  af]	pop/skip caller!
	rts                                    	| [$7617: ret]

l_7621:
	move.b	#0x0E,d1                        	| [$7621: ld   b,$0E]
	jra	l_7627                             	| [$7623: jr   $7627]
l_7625:
	move.b	#0x08,d1                        	| [$7625: ld   b,$08]
l_7627:
	lea	l_8AE0(a6),a2                      	| [$7627: ld   ix,$8AE0]
	move.w	#0x0018,d3                      	| [$762b: ld   de,$0018] 24
l_762e:
	jbsr	exx                               	| [$762e: exx]
	jbsr	l_7638                            	| [$762f: call $7638]
	jbsr	exx                               	| [$7632: exx]
	add.w	d3,a2                            	| [$7633: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_762e                             	| [$7635: djnz $762E]
	rts                                    	| [$7637: ret]
	
l_7638:
	move.b	(0x02,a2),d0                    	| [$7638: ld   a,(ix+$02)]
	and.b	#0x03,d0                         	| [$763b: and  $03]
	jbsr	jump_from_table_below_0028                            	| [$763d: rst  $28]
jump_table_763E:
	.long	move_intro_pigs_to_left_7644
	.long	intro_balloons_related_7675
	.long	intro_balloons_related_76a6

move_intro_pigs_to_left_7644:
	move.b	(0x00,a2),d0                    	| [$7644: ld   a,(ix+$00)]
	                               	| [$7647: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$7648: ret  z] [...]
0:
	jbsr	l_4006                            	| [$7649: call $4006]
	move.b	(0x05,a2),d0                    	| [$764c: ld   a,(ix+$05)]
	sub.b	(0x09,a2),d0                     	| [$764f: sub  (ix+$09)]
	jcc	l_7657                             	| [$7652: jr   nc,$7657]
	subq.b	#1,(0x06,a2)                    	| [$7654: dec  (ix+$06)]
l_7657:
	move.b	d0,(0x05,a2)                    	| [$7657: ld   (ix+$05),a]
	move.b	(0x06,a2),d0                    	| [$765a: ld   a,(ix+$06)]
	cmp.b	#0x06,d0                         	| [$765d: cp   $06]
	bcs.b	0f                               	| [...]
	rts                                    	| [$765f: ret  nc] [...]
0:
	move.b	#0x20,d0                        	| [$7660: ld   a,$20]
	move.b	d0,l_892E(a6)                   	| [$7662: ld   ($892E),a]
	move.w	#0x0018,d3                      	| [$7665: ld   de,$0018] 24
	move.b	#0x0E,d1                        	| [$7668: ld   b,$0E]
	move.b	#0x01,d0                        	| [$766a: ld   a,$01]
l_766c:
	move.b	d0,(0x02,a2)                    	| [$766c: ld   (ix+$02),a]
	add.w	d3,a2                            	| [$766f: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_766c                             	| [$7671: djnz $766C]
	addq	#4,a7                        	| [$7673: pop  af] pop/skip caller
	rts                                    	| [$7674: ret]
intro_balloons_related_7675:
	jbsr	l_4006                            	| [$7675: call $4006]
	lea	l_892E(a6),a0                      	| [$7678: ld   hl,$892E]
	move.b	(a0),d0                         	| [$767b: ld   a,(hl)]
	                               	| [$767c: and  a]
	jeq	l_7681                             	| [$767d: jr   z,$7681]
	subq.b	#1,(a0)                         	| [$767f: dec  (hl)]
	rts                                    	| [$7680: ret]
l_7681:
	move.b	#0x02,d0                        	| [$7681: ld   a,$02]
	lea	l_8AE2(a6),a0                      	| [$7683: ld   hl,$8AE2]
	move.w	#0x0018,d3                      	| [$7686: ld   de,$0018] 24
	move.b	#0x08,d1                        	| [$7689: ld   b,$08]
l_768b:
	move.b	d0,(a0)                         	| [$768b: ld   (hl),a]
	add.w	d3,a0                            	| [$768c: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_768b                             	| [$768d: djnz $768B]
	clr.b	d0                               	| [$768f: xor  a]
	lea	l_8BA2(a6),a0                      	| [$7690: ld   hl,$8BA2]
	move.w	#0x0018,d3                      	| [$7693: ld   de,$0018] 24
	move.b	#0x06,d1                        	| [$7696: ld   b,$06]
l_7698:
	move.b	d0,(a0)                         	| [$7698: ld   (hl),a]
	add.w	d3,a0                            	| [$7699: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_7698                             	| [$769a: djnz $7698]
	move.b	d0,l_8D57(a6)                   	| [$769c: ld   ($8D57),a]
	move.b	#0x08,d0                        	| [$769f: ld   a,$08]
	move.b	d0,title_sub_state_8E51(a6)     	| [$76a1: ld   (title_sub_state_8E51),a]
	addq	#4,a7                        	| [$76a4: pop  af] pop/skip caller
	rts                                    	| [$76a5: ret]
intro_balloons_related_76a6:
	move.b	l_8D58(a6),d0                   	| [$76a6: ld   a,($8D58)]
	                               	| [$76a9: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$76aa: ret  nz] [...]
0:
	jbsr	l_4006                            	| [$76ab: call $4006]
	rts                                    	| [$76ae: ret]
l_76af:
	lea	l_892A(a6),a0                      	| [$76af: ld   hl,$892A]
	move.b	(a0),d0                         	| [$76b2: ld   a,(hl)]
	                               	| [$76b3: and  a]
	jeq	l_76b8                             	| [$76b4: jr   z,$76B8]
	subq.b	#1,(a0)                         	| [$76b6: dec  (hl)]
	rts                                    	| [$76b7: ret]
l_76b8:
	move.b	#0x16,(a0)+                      	| [$76b8: ld   (hl),$16]
	                           	| [$76ba: inc  hl]
	addq.b	#1,(a0)                         	| [$76bb: inc  (hl)]
	move.b	(a0),d0                         	| [$76bc: ld   a,(hl)]
	LOAD_ROM	0x76E6,a1                          	| [$76bf: ld   de,$76E6]
	and.b	#0x01,d0                         	| [$76bd: and  $01]
	jne	l_76c7                             	| [$76c2: jr   nz,$76C7]
	LOAD_ROM	0x76E8,a1                          	| [$76c4: ld   de,$76E8]
l_76c7:
	lea	l_8471(a6),a0                      	| [$76c7: ld   hl,$8471]
	move.w	#0x0040,d1                      	| [$76ca: ld   bc,$0040] 64
	move.b	(a1)+,d0                         	| [$76cd: ld   a,(de)]
	jbsr	osd_w_videoram                         	| [$76ce: ld   (hl),a]
												| [$76cf: inc  de]
	add.w	d1,a0                            	| [$76d0: add  hl,bc]
	move.b	(a1),d0                         	| [$76d1: ld   a,(de)]
	jbsr	osd_w_videoram                         	| [$76d2: ld   (hl),a]
	rts                                    	| [$76d3: ret]

intro_balloons_rise_76ea:
	jbsr	l_76f4                            	| [$76ea: call $76F4]
	jbsr	l_7625                            	| [$76ed: call $7625]
	jbsr	update_sprite_shadows_02EF        	| [$76f0: call update_sprite_shadows_02EF]
	rts                                    	| [$76f3: ret]
l_76f4:
	lea	l_8BA0(a6),a2                      	| [$76f4: ld   ix,$8BA0]
	move.w	#0x0018,d3                      	| [$76f8: ld   de,$0018] 24
	move.b	#0x06,d1                        	| [$76fb: ld   b,$06]
l_76fd:
	jbsr	exx                               	| [$76fd: exx]
	jbsr	l_7707                            	| [$76fe: call $7707]
	jbsr	exx                               	| [$7701: exx]
	add.w	d3,a2                            	| [$7702: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_76fd                             	| [$7704: djnz $76FD]
	rts                                    	| [$7706: ret]
l_7707:
	move.b	(0x00,a2),d0                    	| [$7707: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$770a: or   (ix+$01)]
	ror.b	#1,d0                            	| [$770d: rrca]
	bcs.b	0f                               	| [...]
	rts                                    	| [$770e: ret  nc] [...]
0:
	move.b	(0x02,a2),d0                    	| [$770f: ld   a,(ix+$02)]
	and.b	#0x03,d0                         	| [$7712: and  $03]
	jbsr	jump_from_table_below_0028                            	| [$7714: rst  $28]
jump_table_7715:
	.long	intro_wait_and_release_baloons_771D
	.long	intro_balloons_related_7740
	.long	intro_baloons_exploding_into_title_7790
	.long	wait_while_title_displayed_7881
	
intro_wait_and_release_baloons_771D:
	subq.b	#1,(0x11,a2)                    	| [$771d: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$7720: ret  nz] [...]
0:
	lea	l_8D57(a6),a0                      	| [$7721: ld   hl,$8D57]
	move.b	(a0),d0                         	| [$7724: ld   a,(hl)]
	move.b	d0,d2                           	| [$7725: ld   c,a]
	addq.b	#1,(a0)                         	| [$7726: inc  (hl)]
	move.b	d0,(0x13,a2)                    	| [$7727: ld   (ix+$13),a]
	move.b	d2,d0                           	| [$772a: ld   a,c]
	LOAD_ROM	0x7869,a0                          	| [$772b: ld   hl,$7869]
	add.b	d0,d0                            	| [$772e: add  a,a]
	jbsr	read_byte_a0_plus_d0_0020           | [$772f: rst  $20]
	* address of title letters where baloons explode
	move.b	d0,(0x15,a2)                    	| [$7730: ld   (ix+$15),a]
	addq.w	#1,a0                           	| [$7733: inc  hl]
	move.b	(a0),d0                         	| [$7734: ld   a,(hl)]
	move.b	d0,(0x16,a2)                    	| [$7735: ld   (ix+$16),a]
	move.b	#0xEC,d0                        	| [$7738: ld   a,$EC]
	move.b	d0,(0x0a,a2)                    	| [$773a: ld   (ix+$0a),a]
	addq.b	#1,(0x02,a2)                    	| [$773d: inc  (ix+$02)]
intro_balloons_related_7740:
	jbsr	l_4006                            	| [$7740: call $4006]
	move.b	(0x0a,a2),d0                    	| [$7743: ld   a,(ix+$0a)]
	neg.b	d0                               	| [$7746: neg]
	move.b	d0,d1                           	| [$7748: ld   b,a]
	move.b	(0x03,a2),d0                    	| [$7749: ld   a,(ix+$03)]
	cmp.b	d1,d0                            	| [$774c: cp   b]
	jcc	l_7752                             	| [$774d: jr   nc,$7752]
	subq.b	#1,(0x04,a2)                    	| [$774f: dec  (ix+$04)]
l_7752:
	add.b	(0x0a,a2),d0                     	| [$7752: add  a,(ix+$0a)]
	move.b	d0,(0x03,a2)                    	| [$7755: ld   (ix+$03),a]
	move.b	d0,d1                           	| [$7758: ld   b,a]
	move.b	(0x04,a2),d0                    	| [$7759: ld   a,(ix+$04)]
	and.b	#0x1F,d0                         	| [$775c: and  $1F]
	cmp.b	#0x09,d0                         	| [$775e: cp   $09]
	bcs.b	0f                               	| [...]
	rts                                    	| [$7760: ret  nc] [...]
0:
	addq.b	#1,(0x02,a2)                    	| [$7761: inc  (ix+$02)]
	move.b	#0x18,(0x11,a2)                 	| [$7764: ld   (ix+$11),$18]
	jbsr	l_0ef1                            	| [$7768: call $0EF1]
	move.b	(0x17,a2),d0                    	| [$776b: ld   a,(ix+$17)]
	LOAD_ROM	0x41B1,a0                          	| [$776e: ld   hl,$41B1]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$7771: call $0C45]
	jbsr	store_de_in_struct_381e                            	| [$7774: call $381E]
											| [$7777: ld   de,$0BB3]
										| [$777a: ld   b,$05]
										| [$777c: xor  a]
										| [$777d: ld   l,a]
										| [$777e: ld   h,a]
								
								
										| [$777f: ld   a,(de)]
										| [$7780: and  $1F]
															| [$7782: rst  $20]
										| [$7783: inc  de]
										| [...]
										| [$7784: djnz $777F]
										| [$7786: ld   a,l]
										| [$7787: add  a,h]
										| [$7788: add  a,$C7]
										| [...]
										| [$778a: ret  z] [...]
0:
											| [$778b: ld   hl,$89E9]
											| [$778e: inc  (hl)]
	rts                                    	| [$778f: ret]
intro_baloons_exploding_into_title_7790:
	jbsr	l_4006                            	| [$7790: call $4006]
	subq.b	#1,(0x11,a2)                    	| [$7793: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$7796: ret  nz] [...]
0:
	move.b	(0x13,a2),d0                    	| [$7797: ld   a,(ix+$13)]
	LOAD_ROM	0x7821,a0                       | [$779a: ld   hl,$7821]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$779d: call $0C45]
	move.b	(0x15,a2),D6                    	| [$77a0: ld   l,(ix+$15)]
	move.b	(0x16,a2),D5                    	| [$77a3: ld   h,(ix+$16)]
	LOAD_A0_FROM_D5D6
	jbsr	write_title_letter_780f             | [$77a6: call $780F]
	LOAD_ROM	0x7841,a0                          	| [$77a9: ld   hl,$7841]
	move.b	(0x13,a2),d0                    	| [$77ac: ld   a,(ix+$13)]
	jbsr	load_16bit_rom_pointer_0c45                            	| [$77af: call $0C45]
	move.b	(0x15,a2),D6                    	| [$77b2: ld   l,(ix+$15)]
	move.b	(0x16,a2),D5                    	| [$77b5: ld   h,(ix+$16)]
	LOAD_A0_FROM_D5D6
												| [$77b8: ld   bc,$FC00]
	sub.w	#0x400,a0                            	| [$77bb: add  hl,bc]
	jbsr	write_title_letter_colors_780f        	| [$77bc: call $780F]
	lea	l_8D58(a6),a0                      	| [$77bf: ld   hl,$8D58]
	move.b	(a0),d0                         	| [$77c2: ld   a,(hl)]
	                               	| [$77c3: and  a]
	jne	l_77c8                             	| [$77c4: jr   nz,$77C8]
	move.b	#0x01,(a0)                      	| [$77c6: ld   (hl),$01]
l_77c8:
	                               	| [$77c8: xor  a]
	clr.b	(0x00,a2)                    	| [$77c9: ld   (ix+$00),a]
	clr.b	(0x01,a2)                    	| [$77cc: ld   (ix+$01),a]
	clr.b	(0x02,a2)                    	| [$77cf: ld   (ix+$02),a]
	clr.b	(0x03,a2)                    	| [$77d2: ld   (ix+$03),a]
	clr.b	(0x04,a2)                    	| [$77d5: ld   (ix+$04),a]
	clr.b	(0x05,a2)                    	| [$77d8: ld   (ix+$05),a]
	clr.b	(0x06,a2)                    	| [$77db: ld   (ix+$06),a]
	clr.b	(0x16,a2)                    	| [$77de: ld   (ix+$16),a]
	move.b	(0x13,a2),d0                    	| [$77e1: ld   a,(ix+$13)]
	cmp.b	#0x05,d0                         	| [$77e4: cp   $05]
	bcc.b	0f                               	| [...]
	rts                                    	| [$77e6: ret  c] [...]
0:
	move.b	#0x01,(0x01,a2)                 	| [$77e7: ld   (ix+$01),$01]
	move.b	#0x03,(0x02,a2)                 	| [$77eb: ld   (ix+$02),$03]
	move.b	#0x80,(0x11,a2)                 	| [$77ef: ld   (ix+$11),$80]
											| [$77f3: ld   hl,$82BC]
													| [$77f6: ld   de,$FFE0]
													| [$77f9: ld   bc,$0A00]
										
										
												| [$77fc: ld   a,(hl)]
												| [$77fd: add  hl,de]
												| [$77fe: cp   (hl)]
															| [$77ff: jr   nz,$7875]
												| [$7801: add  a,c]
												| [$7802: ld   c,a]
												| [...]
											| [$7803: djnz $77FC]
												| [$7805: add  a,$83]
													| [$7807: ld   hl,$780E]
												| [$780a: cp   (hl)]
											| [$780b: jp   nz,$2334]
l_780e:
	rts                                    	| [$780e: ret]
	
write_title_letter_780f:
	move.w	#-0x20,d1                          	| [$780f: ld   bc,$FFE0]
	move.b	(a1)+,d0                         	| [$7812: ld   a,(de)]
	jbsr	osd_w_videoram                         	| [$7813: ld   (hl),a]
	                           	                | [$7814: inc  de]
	addq	#1,a0                           	| [$7815: inc  hl]
	move.b	(a1)+,d0                         	| [$7816: ld   a,(de)]
	jbsr	osd_w_videoram                         	| [$7817: ld   (hl),a]
	                           	               | [$7818: inc  de]
	add.w	d1,a0                            	| [$7819: add  hl,bc]
	move.b	(a1)+,d0                         	| [$781a: ld   a,(de)]
	jbsr	osd_w_videoram                         	| [$781b: ld   (hl),a]
	subq	#1,a0                           	| [$781c: dec  hl]
	                           	                | [$781d: inc  de]
	move.b	(a1),d0                         	| [$781e: ld   a,(de)]
	jbsr	osd_w_videoram                         	| [$781f: ld   (hl),a]
	rts                                    	| [$7820: ret]
write_title_letter_colors_780f:
	move.w	#-0x20,d1                          	| [$780f: ld   bc,$FFE0]
	move.b	(a1)+,d0                         	| [$7812: ld   a,(de)]
	jbsr	osd_w_colorram                         	| [$7813: ld   (hl),a]
	                           	| [$7814: inc  de]
	addq	#1,a0                           	| [$7815: inc  hl]
	move.b	(a1)+,d0                         	| [$7816: ld   a,(de)]
	jbsr	osd_w_colorram                         	| [$7817: ld   (hl),a]
	                           	| [$7818: inc  de]
	add.w	d1,a0                            	| [$7819: add  hl,bc]
	move.b	(a1)+,d0                         	| [$781a: ld   a,(de)]
	jbsr	osd_w_colorram                         	| [$781b: ld   (hl),a]
	subq	#1,a0                           	| [$781c: dec  hl]
	                           	| [$781d: inc  de]
	move.b	(a1),d0                         	| [$781e: ld   a,(de)]
	jbsr	osd_w_colorram                         	| [$781f: ld   (hl),a]
	rts                                    	| [$7820: ret]

wait_while_title_displayed_7881:
	subq.b	#1,(0x11,a2)                    	| [$7881: dec  (ix+$11)]
	beq.b	0f                               	| [...]
	rts                                    	| [$7884: ret  nz] [...]
0:
	* timeout: clear sprites and move on
										| [$7885: ld   iy,$7900]
										| [$7889: ld   hl,$0779]
											| [$788c: ld   de,$0000] 0
											| [$788f: ld   c,$09]
						
											| [$7891: ld   b,$20]
						
											| [$7893: ld   a,(hl)]
											| [$7894: add  a,e]
											| [$7895: ld   e,a]
						
										| [$7896: jr   nc,$7899]
											| [$7898: inc  d]
						
											| [$7899: inc  hl]
											| [...]
										| [$789a: djnz $7893]
											| [$789c: ld   a,(iy+$00)]
											| [$789f: cp   e]
										| [$78a0: jp   nz,$780E]
											| [$78a3: ld   a,(iy+$01)]
											| [$78a6: cp   d]
										| [$78a7: jp   nz,$780E]
							| [$78aa: ld   a,iyl]
											| [$78ac: add  a,$02]
							| [$78ae: jr   nc,$78B2]
							| [$78b0: inc  iyh]
						
								| [$78b2: ld   iyl,a]
											| [$78b4: dec  c]
										| [$78b5: jr   nz,$7891]
	move.b	#0x02,d0                        	| [$78b7: ld   a,$02]
	move.b	d0,title_sub_state_8E51(a6)     	| [$78b9: ld   (title_sub_state_8E51),a]
	lea	l_8548(a6),a3                      	| [$78bc: ld   iy,$8548]
	move.w	#0x0000,d5                      	| [$78c0: ld   hl,$0000] 0
	move.w	#0x0020,d3                      	| [$78c3: ld   de,$0020] 32
	move.b	#0x04,d2                        	| [$78c6: ld   c,$04]
l_78c8:
	move.b	#0x0C,d1                        	| [$78c8: ld   b,$0C]
l_78ca:
	move.b	(0x00,a3),d0                    	| [$78ca: ld   a,(iy+$00)]
	add.b	d6,d0                            	| [$78cd: add  a,l]
	jcc	l_78d1                             	| [$78ce: jr   nc,$78D1]
	addq.b	#1,d5                           	| [$78d0: inc  h]
l_78d1:
	move.b	d0,d6                           	| [$78d1: ld   l,a]
	add.w	d3,a3                            	| [$78d2: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_78ca                             	| [$78d4: djnz $78CA]
	btst.b	#0,d2                           	| [$78d6: bit  0,c]
	jne	l_78e2                             	| [$78d8: jr   nz,$78E2]
	move.w	#-0x20,d3                          	| [$78da: ld   de,$FFE0]
	addq.w	#1,a3                           	| [$78dd: inc  iy]
	subq.w	#1,d2                           	| [$78df: dec  c]
	jra	l_78c8                             	| [$78e0: jr   $78C8]
l_78e2:
	subq.w	#1,d2                           	| [$78e2: dec  c]
	jeq	l_78ec                             	| [$78e3: jr   z,$78EC]
	move.w	#0xFBFF,d3                          	| [$78e5: ld   de,$FBFF]
	add.w	d3,a3                            	| [$78e8: add  iy,de]
	jra	l_78e2                             	| [$78ea: jr   $78E2]
l_78ec:
	move.b	D6,d0                           	| [$78ec: ld   a,l]
	add.b	D5,d0                            	| [$78ed: add  a,h]
	add.b	#0xA6,d0                         	| [$78ee: add  a,$A6]
	jne	l_0320                             	| [$78f0: jp   nz,$0320]
	lea	l_8AE0(a6),a0                      	| [$78f3: ld   hl,$8AE0]
	CLEAR_XC_FLAGS                         	| [$78f6: xor  a]
	clr.b	d0                               	| [$78f6: xor  a]
	move.b	d0,d1                           	| [$78f7: ld   b,a]
	jbsr	fill_area_0010                            	| [$78f8: rst  $10]
	move.b	#0x37,d1                        	| [$78f9: ld   b,$37]
	jbsr	fill_area_0010                            	| [$78fb: rst  $10]
	jbsr	l_77c8                            	| [$78fc: call $77C8]
	rts                                    	| [$78ff: ret]
	
l_7900:
	cmp.b	d1,d0                            	| [$7900: cp   b]
	move.b	d0,(a4)+                         	| [$7901: ld   (bc),a]
	sub.b	d5,d0                            	| [$7902: sub  h]
	                           	| [$7903: inc  bc]
	                          	| [$7904: ld   hl,$EB05]
	subq.b	#1,d1                           	| [$7907: dec  b]
	move.w	#0x4009,d5                 	| [$7908: ld   hl,($4009)]
	LOAD_D5D6_FROM_D5_16
	move.b	(a4),d0                         	| [$790b: ld   a,(bc)]
	illegal
	move.b	d2,d1                           	| [$790c: ld   b,c]
												| [$790d: inc  c]
	and.b	d5,d0                            	| [$790e: and  h]
	addq.w	#2,a4                           	| [$790f: inc  c]
	*in   a,($0E)
l_7912:
	move.b	l_8806(a6),d0                   	| [$7912: ld   a,($8806)]
	                               	| [$7915: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$7916: ret  z] [...]
0:
	move.b	current_player_is_p2_880D(a6),d0                   	| [$7917: ld   a,($880D)]
	                               	| [$791a: and  a]
	lea	l_89E1(a6),a1                      	| [$791b: ld   de,$89E1]
	lea	l_8A30(a6),a0                      	| [$791e: ld   hl,$8A30]
	jeq	l_7927                             	| [$7921: jr   z,$7927]
	addq.w	#3,a0                        	| [$7923: ld   l,$33]
	addq.w	#1,a1                        	| [$7925: ld   e,$E2]
l_7927:
	move.b	(a1),d0                         	| [$7927: ld   a,(de)]
	                               	| [$7928: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$7929: ret  nz] [...]
0:
	                           	| [$792a: inc  hl]
	move.b	(1,a0),d0                         	| [$792b: ld   a,(hl)]
	                           	| [$792c: dec  hl]
	move.b	#0x3B,d1                        	| [$792f: ld   b,$3B]
	btst.b	#0,d0                           	| [$792d: bit  0,a]
	jeq	l_7934                             	| [$7931: jr   z,$7934]
	addq.b	#1,d1                           	| [$7933: inc  b]
l_7934:
	move.b	(a0),d0                         	| [$7934: ld   a,(hl)]
	cmp.b	d1,d0                            	| [$7935: cp   b]
	jeq	l_793a                             	| [$7936: jr   z,$793A]
	addq.b	#1,(a0)                         	| [$7938: inc  (hl)]
	rts                                    	| [$7939: ret]
l_793a:
	clr.b	(a0)+                             	| [$793a: ld   (hl),$00]
	                          	| [$793c: inc  hl]
	addq.b	#1,(a0)                         	| [$793d: inc  (hl)]
	move.b	(a0),d0                         	| [$793e: ld   a,(hl)]
	move.b	d0,d4                           	| [$793f: ld   e,a]
	and.b	#0x0F,d0                         	| [$7940: and  $0F]
	cmp.b	#0x0A,d0                         	| [$7942: cp   $0A]
	beq.b	0f                               	| [...]
	rts                                    	| [$7944: ret  nz] [...]
0:
	move.b	d4,d0                           	| [$7945: ld   a,e]
	and.b	#0xF0,d0                         	| [$7946: and  $F0]
	add.b	#0x10,d0                         	| [$7948: add  a,$10]
	move.b	d0,(a0)                         	| [$794c: ld   (hl),a]
	cmp.b	#0x60,d0                         	| [$794a: cp   $60]
	beq.b	0f                               	| [...]
	rts                                    	| [$794d: ret  nz] [...]
0:
	clr.b	(a0)+                             	| [$794e: ld   (hl),$00]
												| [$7950: inc  hl]
	addq.b	#1,(a0)                         	| [$7951: inc  (hl)]
	move.b	(a0),d0                         	| [$7952: ld   a,(hl)]
	move.b	d0,d4                           	| [$7953: ld   e,a]
	and.b	#0x0F,d0                         	| [$7954: and  $0F]
	cmp.b	#0x0A,d0                         	| [$7956: cp   $0A]
	beq.b	0f                               	| [...]
	rts                                    	| [$7958: ret  nz] [...]
0:
	move.b	d4,d0                           	| [$7959: ld   a,e]
	and.b	#0xF0,d0                         	| [$795a: and  $F0]
	add.b	#0x10,d0                         	| [$795c: add  a,$10]
	move.b	d0,(a0)                         	| [$795e: ld   (hl),a]
	rts                                    	| [$795f: ret]
l_7960:
	move.w	#0x0609,d3                          	| [$7960: ld   de,$0609]
	jbsr	update_88A0_0038                            	| [$7963: rst  $38]

													| [$7964: ld   ix,$2901]
											| [$7968: ld   hl,$0000] 0
											| [$7968: ld   hl,$0000] 0
											| [$796b: ld   e,l]
											| [$796c: ld   d,e]
											| [$796d: ld   b,$5B]
								
											| [$796f: ld   a,(ix+$00)]
											| [$7972: add  a,e]
											| [$7974: jr   nc,$7977]
											| [$7976: inc  d]
								
											| [$7973: ld   e,a]
											| [$7977: ld   c,a]
												| [$7978: ld   a,ixl]
											| [$797a: and  $01]
											| [$797c: jr   nz,$7984]
											| [$797e: ld   a,c]
											| [$797f: add  a,l]
											| [$7980: ld   l,a]
								
											| [$7981: jr   nc,$7984]
											| [$7983: inc  h]
								
											| [$7984: inc  ix]
											| [...]
											| [$7986: djnz $796F]
											| [$7988: ld   a,e]
											| [$7989: cp   (ix+$00)]
											| [$798c: jp   nz,$7A0B]
											| [$798f: ld   a,d]
											| [$7990: cp   (ix+$01)]
											| [$7993: jp   nz,$0FA0]
											| [$7996: ld   a,l]
											| [$7997: cp   (ix+$02)]
											| [$799a: jp   nz,$1388]
											| [$799d: ld   a,h]
											| [$799e: cp   (ix+$03)]
											| [$79a1: jp   nz,$1770]

	                               	| [$79a7: and  a]
	lea	l_8A32(a6),a2                      	| [$79a8: ld   ix,$8A32]
	move.b	current_player_is_p2_880D(a6),d0                   	| [$79a4: ld   a,($880D)]
	jeq	l_79b1                             	| [$79ac: jr   z,$79B1]
	lea	l_8A35(a6),a2                          	| [$79ae: ld   ixl,$35]
l_79b1:
	lea	l_862D(a6),a0                      	| [$79b1: ld   hl,$862D]
	move.w	#-0x20,d3                          	| [$79b4: ld   de,$FFE0]
	move.b	#0x02,d1                        	| [$79b7: ld   b,$02]
l_79b9:
	move.b	(0x00,a2),d0                    	| [$79b9: ld   a,(ix+$00)]
	move.b	d0,d2                           	| [$79bc: ld   c,a]
	and.b	#0xF0,d0                         	| [$79bd: and  $F0]
	ror.b	#4,d0                            	| [$79bf: rrca] * 4
	jbsr	osd_w_videoram                         	| [$79c3: ld   (hl),a]
	add.w	d3,a0                            	| [$79c4: add  hl,de]
	move.b	d2,d0                           	| [$79c5: ld   a,c]
	and.b	#0x0F,d0                         	| [$79c6: and  $0F]
	jbsr	osd_w_videoram                         	| [$79c8: ld   (hl),a]
	add.w	d3,a0                            	| [$79c9: add  hl,de]
	btst.b	#0,d1                           	| [$79ca: bit  0,b]
	jne	l_79d2                             	   | [$79cc: jr   nz,$79D2]
	move.b	#0x51,d0
	jbsr	osd_w_videoram                      	| [$79ce: ld   (hl),$51]
	add.w	d3,a0                            	| [$79d0: add  hl,de]
	subq.w	#1,a2                           	| [$79d1: dec  ix]
0:
	subq.b	#1,d1                           	| [...]
	jne	l_79b9                             	| [$79d3: djnz $79B9]
	jra		0f
l_79d2:
	subq	#1,a0		| [$79d2: dec hl]
	jra		0b
0:
	move.l	a2,a0                        	| [$79d5: push ix]
	                        	| [$79d7: pop  hl]
	CLEAR_XC_FLAGS                         	| [$79d8: xor  a]
	clr.b	d0                               	| [$79d8: xor  a]
	move.b	#0x03,d1                        	| [$79d9: ld   b,$03]
	jbsr	fill_area_0010                            	| [$79db: rst  $10]
									| [$79dc: ld   hl,$checksum_failed_89e7]
         	| [$79df: ld   b,$07]

         	| [$79e1: ld   a,(hl)]
	| [$79e2: and  a]
        	| [$79e3: jr   nz,$79EF]
         	| [$79e5: inc  hl]
         	| [...]
        	| [$79e6: djnz $79E1]
	rts                                    	| [$79e8: ret]

											| [$79e9: ld   hl,$68AC]
										| [$79ec: ld   de,$0000] 0
					
										| [$79ef: ld   a,(hl)]
										| [$79f0: cp   $C9]
									| [$79f2: jr   z,$79FC]
										| [$79f4: add  a,e]
									| [$79f5: jr   nc,$79F8]
										| [$79f7: inc  d]
					
										| [$79f8: ld   e,a]
										| [$79f9: inc  hl]
									| [$79fa: jr   $79EF]

                        	| [$79fc: ld   hl,$7A0B]
                 	| [$79ff: ld   a,e]
                  	| [$7a00: cp   (hl)]
                	| [$7a01: jp   nz,$07D0]
                 	| [$7a04: ld   a,d]
                 	| [$7a05: inc  hl]
                  	| [$7a06: cp   (hl)]
                	| [$7a07: jp   nz,$1A85]
                	| [$7a0a: ret]

string_table_7A0D:
	.long	str_00_7a8d
	.long	str_01_7a9a
	.long	str_02_7aae
	.long	str_03_7abb
	.long	str_04_7ac8
	.long	str_05_7ad5
	.long	str_06_7ae2
	.long	str_07_7af2
	.long	str_08_7b12
	.long	str_09_7b2e
	.long	str_0a_7b3f
	.long	str_0b_7b53
	.long	str_0c_7b5a
	.long	str_0d_7b69
	.long	str_0e_7b7b
	.long	str_0f_7b8b
	.long	str_10_7bc8
	.long	str_11_7be7
	.long	str_12_7bf8
	.long	str_13_7c08
	.long	str_14_7c14
	.long	str_15_7c1f
	.long	str_16_7c2b
	.long	str_17_7c3e
	.long	str_18_7c4a
	.long	str_19_7c5c
	.long	str_1a_7c71
	.long	str_1b_7c85
	.long	str_1c_7c8b
	.long	str_1d_7c91
	.long	str_1e_7c97
	.long	str_1f_7ca8
	.long	str_20_7cae
	.long	str_21_7cb4
	.long	str_22_7cba
	.long	str_23_7cc0
	.long	str_24_7cc6
	.long	str_25_7ccd
	.long	str_26_7cde
	.long	str_27_7cef
	.long	str_28_7cfe
	.long	str_29_7d0a
	.long	str_2a_7d26
	.long	str_2b_7d42
	.long	str_2c_7d53
	.long	str_2d_7d68
	.long	str_2e_7d76
	.long	str_2f_7d82
	.long	str_30_7d98
	.long	str_31_7dac
	.long	str_32_7dc4
	.long	str_33_7de2
	.long	str_34_7e0d
	.long	str_35_7e46
	.long	str_36_7e56
	.long	str_37_7e56
	.long	str_38_7e56
	.long	str_39_7e56
	.long	str_3a_7e56
	.long	str_3b_7e56
	.long	str_3c_7e56
	.long	str_3d_7e56
	.long	str_3e_7e56
	.long	str_3f_7e5a

* screen address (little endian), then string
str_00_7a8d:
	.byte	150,134	|	0x8696
	.ascii	"GAME@@OVER?"
str_01_7a9a:
	.byte	238,134	|	0x86ee
	.ascii	"PUSH@START@BUTTON?"
str_02_7aae:
	.byte	148,134	|	0x8694
	.ascii	"PLAYER@ONE?"
str_03_7abb:
	.byte	148,134	|	0x8694
	.ascii	"PLAYER@TWO?"
str_04_7ac8:
	.byte	128,134	|	0x8680
	.ascii	"HIGH@SCORE?"
str_05_7ad5:
	.byte	191,135	|	0x87bf
	.ascii	"@CREDIT@@@?"
str_06_7ae2:
	.byte	191,135	|	0x87bf
	.ascii	"@FREE@PLAY@@@?"
str_07_7af2:
	.byte	56,135	|	0x8738
	.ascii	"ONE@DAY\\\."
	.byte	218,134	|	0x86da
	.ascii	"IN@THE@FOREST\\\?"
str_08_7b12:
	.byte	209,134	|	0x86d1
	.ascii	"BONUS@POINT."
	.byte	180,134	|	0x86b4
	.ascii	"200X@@w@@00?"
str_09_7b2e:
	.byte	202,134	|	0x86ca
	.ascii	"YOUR@PLAY@TIME?"
str_0a_7b3f:
	.byte	25,135	|	0x8719
	.ascii	"NBR@OF@PIGS@TAKEN?"
str_0b_7b53:
	.byte	36,134	|	0x8624
	.ascii	"PLAY?"
str_0c_7b5a:
	.byte	169,134	|	0x86a9
	.ascii	"[@@POOYAN@@[?"
str_0d_7b69:
	.byte	196,134	|	0x86c4
	.ascii	"[@@CHARACTER@@[?"
str_0e_7b7b:
	.byte	163,134	|	0x86a3
	.ascii	"[@@POO@YAN@@[?"
str_0f_7b8b:
	.byte	43,135	|	0x872b
	.ascii	"WHEN@7@WOLVES@JOIN."
	.byte	45,135	|	0x872d
	.ascii	"ON@THE@CLIFFsTHEY."
	.byte	47,135	|	0x872f
	.ascii	"DROP@GIAHT@ROCK;;?"
str_10_7bc8:
	.byte	175,134	|	0x86af
	.ascii	"@NICE@@SHOOT."
	.byte	210,134	|	0x86d2
	.ascii	"@BONUS@@POINT?"
str_11_7be7:
	.byte	188,134	|	0x86bc
	.ascii	":@KONAMI@@1982?"
str_12_7bf8:
	.byte	174,134	|	0x86ae
	.ascii	"@MAMAs@HELP@;?"
str_13_7c08:
	.byte	230,133	|	0x85e6
	.ascii	"OHs@BOY@;?"
str_14_7c14:
	.byte	86,135	|	0x8756
	.ascii	"@MAMA@@;?"
str_15_7c1f:
	.byte	25,135	|	0x8719
	.ascii	"@MAMA@@;;?"
str_16_7c2b:
	.byte	117,135	|	0x8775
	.ascii	"1ST@BONUS@AFTER@?"
str_17_7c3e:
	.byte	117,133	|	0x8575
	.ascii	"50000@PTS?"
str_18_7c4a:
	.byte	209,134	|	0x86d1
	.ascii	"ONE@PLAYER@ONLY?"
str_19_7c5c:
	.byte	241,134	|	0x86f1
	.ascii	"ONE@OR@TWO@PLAYERS?"
str_1a_7c71:
	.byte	4,135	|	0x8704
	.ascii	"[@SCORE@RANKING@[?"
str_1b_7c85:
	.byte	39,135	|	0x8727
	.ascii	"1ST?"
str_1c_7c8b:
	.byte	41,135	|	0x8729
	.ascii	"2ND?"
str_1d_7c91:
	.byte	43,135	|	0x872b
	.ascii	"3RD?"
str_1e_7c97:
	.byte	45,135	|	0x872d
	.ascii	"4TH@@@@@@@@@@@?"
str_1f_7ca8:
	.byte	47,135	|	0x872f
	.ascii	"5TH?"
str_20_7cae:
	.byte	49,135	|	0x8731
	.ascii	"6TH?"
str_21_7cb4:
	.byte	51,135	|	0x8733
	.ascii	"7TH?"
str_22_7cba:
	.byte	53,135	|	0x8735
	.ascii	"8TH?"
str_23_7cc0:
	.byte	55,135	|	0x8737
	.ascii	"9TH?"
str_24_7cc6:
	.byte	89,135	|	0x8759
	.ascii	"10TH?"
str_25_7ccd:
	.byte	189,134	|	0x86bd
	.ascii	":@KONAMI@@1982?"
str_26_7cde:
	.byte	209,134	|	0x86d1
	.ascii	"@BONUS@@STAGE@?"
str_27_7cef:
	.byte	172,134	|	0x86ac
	.ascii	"@@PERFECT@@@?"
str_28_7cfe:
	.byte	117,133	|	0x8575
	.ascii	"30000@PTS?"
str_29_7d0a:
	.byte	120,135	|	0x8778
	.ascii	"AND@BONUS@EVERY@70000@PTS?"
str_2a_7d26:
	.byte	120,135	|	0x8778
	.ascii	"AND@BONUS@EVERY@80000@PTS?"
str_2b_7d42:
	.byte	208,134	|	0x86d0
	.ascii	"2ND@PHASE@GETS?"
str_2c_7d53:
	.byte	18,135	|	0x8712
	.ascii	"HARDER@AS@YOU@LOSE?"
str_2d_7d68:
	.byte	148,134	|	0x8694
	.ascii	"MORE@PIGS@;?"
str_2e_7d76:
	.byte	22,134	|	0x8616
	.ascii	"?"
str_2f_7d82:
	.byte	56,135	|	0x8738
	.ascii	"?"
str_30_7d98:
	.byte	117,135	|	0x8775
	.ascii	"ABOUT@10@SECONDS;?"
str_31_7dac:
	.byte	146,134	|	0x8692
	.ascii	"@ONE@WOLF."
	.byte	116,134	|	0x8674
	.ascii	"@@400@PTS?"
str_32_7dc4:
	.byte	146,134	|	0x8692
	.ascii	"@TWO@WOLVES."
	.byte	116,134	|	0x8674
	.ascii	"@@400800@PTS?"
str_33_7de2:
	.byte	146,134	|	0x8692
	.ascii	"@SOME@WOLVES."
	.byte	116,134	|	0x8674
	.ascii	"@@400800@."
	.byte	86,134	|	0x8656
	.ascii	"@@@1600@PTS?"
str_34_7e0d:
	.byte	205,134	|	0x86cd
	.ascii	"BONUS@@POINT."
	.byte	16,135	|	0x8710
	.ascii	"MEAT@@@@@@@@00@PTS."
	.byte	18,135	|	0x8712
	.ascii	"WOLF@@@@@@@@00@PTS?"
str_35_7e46:
	.byte	163,134	|	0x86a3
	.ascii	"BONUS@@STAGE@?"
str_36_7e56:
	.byte	0,132	|	0x8400
	.ascii	"@?"
str_37_7e56:
	.byte	0,132	|	0x8400
	.ascii	"@?"
str_38_7e56:
	.byte	0,132	|	0x8400
	.ascii	"@?"
str_39_7e56:
	.byte	0,132	|	0x8400
	.ascii	"@?"
str_3a_7e56:
	.byte	0,132	|	0x8400
	.ascii	"@?"
str_3b_7e56:
	.byte	0,132	|	0x8400
	.ascii	"@?"
str_3c_7e56:
	.byte	0,132	|	0x8400
	.ascii	"@?"
str_3d_7e56:
	.byte	0,132	|	0x8400
	.ascii	"@?"
str_3e_7e56:
	.byte	0,132	|	0x8400
	.ascii	"@?"
str_3f_7e5a:
	.byte	137,134	|	0x8689
	.ascii	"DOUBLE."
	.byte	77,134	|	0x864d
	.ascii	"PERFECT?"
	.align	2
	
* interleaved/hidden code in legit code!!
* condition never reached (and wrong!)
l_0fa0:
	illegal
l_1388:
	illegal
	
perform_rom_checksum_7e6d:
          	| [$7e6d: ld   a,($8988)]
           	| [$7e70: cp   $04]
           	| [...]
         	| [$7e72: ret  c] [...]

          	| [$7e73: ld   a,($8A5F)]
 	| [$7e76: and  a]
           	| [...]
         	| [$7e77: ret  nz] [...]

         	| [$7e78: ld   hl,$64BE]
           	| [$7e7b: ld   c,$00]
          	| [$7e7d: ld   e,c]

          	| [$7e7e: ld   a,(hl)]
          	| [$7e7f: dec  hl]
           	| [$7e80: add  a,c]
          	| [$7e81: ld   c,a]

         	| [$7e82: jr   nc,$7E85]
          	| [$7e84: inc  e]

          	| [$7e85: ld   a,$34]
           	| [$7e87: cp   (hl)]
         	| [$7e88: jr   nz,$7E7E]
          	| [$7e8a: ld   a,e]
           	| [$7e8b: add  a,c]
           	| [$7e8c: and  $B0]
           	| [...]
	rts                                    	| [$7e8e: ret  z] [...]
0:
											| [$7e8f: ld   hl,$89EF]
								| [$7e92: inc  (hl)]
								| [$7e93: ret]
l_7e94:
	LOAD_ROM	0x7FD6,a0                          	| [$7e94: ld   hl,$7FD6]

	move.l	a0,-(sp)                        	| [$7e97: push hl]
	move.b	l_8E2A(a6),d0                   	| [$7e98: ld   a,($8E2A)]
	                               	| [$7e9b: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$7e9c: ret  nz] [...]
0:
	move.b	l_89FC(a6),d0                   	| [$7e9d: ld   a,($89FC)]
	                               	| [$7ea0: and  a]
	jne	l_7ea8                             	| [$7ea1: jr   nz,$7EA8]
	addq.b	#1,d0                           	| [$7ea3: inc  a]
	move.b	d0,l_8E2A(a6)                   	| [$7ea4: ld   ($8E2A),a]
	rts                                    	| [$7ea7: ret]
l_7ea8:
	move.b	l_8E26(a6),d0                   	| [$7ea8: ld   a,($8E26)]
	jbsr	jump_from_table_below_0028                            	| [$7eab: rst  $28]
jump_table_7EAC:
	.long	l_7eb2
	.long	l_7f0e
	.long	l_7f5d

l_7eb2:
	lea	l_8565(a6),a0                      	| [$7eb2: ld   hl,$8565]
	STORE_RAM_POINTER	a0,video_ram_pointer_8e27(a6)            	| [$7eb5: ld   ($8E27),hl]
	
	move.b	#0x03,d0                        	| [$7eb8: ld   a,$03]
	move.b	d0,l_8E25(a6)                   	| [$7eba: ld   ($8E25),a]
	move.b	l_89FC(a6),d0                   	| [$7ebd: ld   a,($89FC)]
	move.w	#0x03A0,d5                          	| [$7ec0: ld   hl,$03A0]
	STORE_WORD	d5,timer_16bit_8e2b(a6)            	| [$7ec3: ld   ($8E2B),hl]
	
	lea	l_8DFD(a6),a2                      	| [$7ec6: ld   ix,$8DFD]
	move.b	d0,d1                           	| [$7eca: ld   b,a]
	move.w	#0x0003,d3                      	| [$7ecb: ld   de,$0003] 3
l_7ece:
	add.w	d3,a2                            	| [$7ece: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_7ece                             	| [$7ed0: djnz $7ECE]
	STORE_RAM_POINTER	a2,ram_pointer_8e1f(a6)            	| [$7ed2: ld   ($8E1F),ix]
	
	move.b	l_880F(a6),d0                   	| [$7ed6: ld   a,($880F)]
	                               	| [$7ed9: and  a]
	jne	l_7ee2                             	| [$7eda: jr   nz,$7EE2]
	move.b	current_player_is_p2_880D(a6),d0                   	| [$7edc: ld   a,($880D)]
	                               	| [$7edf: and  a]
	jne	l_7ee7                             	| [$7ee0: jr   nz,$7EE7]
l_7ee2:
	lea	l_8811(a6),a0                      	| [$7ee2: ld   hl,$8811]
	jra	l_7eea                             	| [$7ee5: jr   $7EEA]
l_7ee7:
	lea	l_8812(a6),a0                      	| [$7ee7: ld   hl,$8812]
l_7eea:
	STORE_RAM_POINTER	a0,ram_pointer_8e21(a6)            	| [$7eea: ld   ($8E21),hl]
	
	move.b	l_89FC(a6),d0                   	| [$7eed: ld   a,($89FC)]
	move.b	d0,d1                           	| [$7ef0: ld   b,a]
	LOAD_RAM_POINTER	video_ram_pointer_8e27(a6),a1             	| [$7ef1: ld   de,($8E27)]
l_7ef5:
	addq.w	#2,a1                           	| [$7ef5: inc  de]
	                                        	| [$7ef6: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_7ef5                             	| [$7ef7: djnz $7EF5]
	STORE_RAM_POINTER	a1,video_ram_pointer_8e27(a6)            	| [$7ef9: ld   ($8E27),de]
	
	move.b	#0x11,d0                        	| [$7efd: ld   a,$11]
	exg		a0,a1
	jbsr	osd_w_videoram                         	| [$7eff: ld   (de),a]
	exg		a0,a1
	move.b	d0,l_8E23(a6)                   	| [$7f00: ld   ($8E23),a]
	move.b	#0x01,d0                        	| [$7f03: ld   a,$01]
	move.b	d0,l_8E26(a6)                   	| [$7f05: ld   ($8E26),a]
	move.b	#0x0C,d0                        	| [$7f08: ld   a,$0C]
	move.b	d0,l_8E24(a6)                   	| [$7f0a: ld   ($8E24),a]
	rts                                    	| [$7f0d: ret]
l_7f0e:
	LOAD_WORD	timer_16bit_8e2b(a6),d5             	| [$7f0e: ld   hl,($8E2B)]
	subq.w	#1,d5                           	| [$7f11: dec  hl]
	STORE_WORD	d5,timer_16bit_8e2b(a6)            	| [$7f12: ld   ($8E2B),hl]
	
	move.b	d5,d0                           	| [$7f15: ld   a,h]
	                               	| [$7f16: and  a]
	jne	l_7f20                             	| [$7f17: jr   nz,$7F20]
	move.b	d6,d0                           	| [$7f19: ld   a,l]
	                               	| [$7f1a: and  a]
	jne	l_7f20                             	| [$7f1b: jr   nz,$7F20]
	jra	l_7fa8                             	| [$7f1d: jp   $7FA8]
l_7f20:
	LOAD_RAM_POINTER	ram_pointer_8e21(a6),a0             	| [$7f20: ld   hl,($8E21)]
	btst.b	#3,(a0)                         	| [$7f23: bit  3,(hl)]
	jne	l_7f42                             	| [$7f25: jr   nz,$7F42]
	btst.b	#2,(a0)                         	| [$7f27: bit  2,(hl)]
	jeq	l_7f5d                             	| [$7f29: jr   z,$7F5D]
	lea	l_8E24(a6),a0                      	| [$7f2b: ld   hl,$8E24]
	subq.b	#1,(a0)                         	| [$7f2e: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$7f2f: ret  nz] [...]
0:
	move.b	#0x0C,d0                        	| [$7f30: ld   a,$0C]
	move.b	d0,l_8E24(a6)                   	| [$7f32: ld   ($8E24),a]
	lea	l_8E23(a6),a0                      	| [$7f35: ld   hl,$8E23]
	addq.b	#1,(a0)                         	| [$7f38: inc  (hl)]
	move.b	(a0),d0                         	| [$7f39: ld   a,(hl)]
	cmp.b	#0x2D,d0                         	| [$7f3a: cp   $2D]
	jcs	l_7f57                             	| [$7f3c: jr   c,$7F57]
	move.b	#0x10,(a0)                      	| [$7f3e: ld   (hl),$10]
	jra	l_7f57                             	| [$7f40: jr   $7F57]
l_7f42:
	lea	l_8E24(a6),a0                      	| [$7f42: ld   hl,$8E24]
	subq.b	#1,(a0)                         	| [$7f45: dec  (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$7f46: ret  nz] [...]
0:
	move.b	#0x0C,d0                        	| [$7f47: ld   a,$0C]
	move.b	d0,l_8E24(a6)                   	| [$7f49: ld   ($8E24),a]
	lea	l_8E23(a6),a0                      	| [$7f4c: ld   hl,$8E23]
	subq.b	#1,(a0)                         	| [$7f4f: dec  (hl)]
	move.b	(a0),d0                         	| [$7f50: ld   a,(hl)]
	cmp.b	#0x10,d0                         	| [$7f51: cp   $10]
	jcc	l_7f57                             	| [$7f53: jr   nc,$7F57]
	move.b	#0x2C,(a0)                      	| [$7f55: ld   (hl),$2C]
l_7f57:
	LOAD_RAM_POINTER	video_ram_pointer_8e27(a6),a4             	| [$7f57: ld   bc,($8E27)]
	move.b	(a0),d0                         	| [$7f5b: ld   a,(hl)]
	move.b	d0,(a4)                         	| [$7f5c: ld   (bc),a]
l_7f5d:
	LOAD_RAM_POINTER	ram_pointer_8e21(a6),a0             	| [$7f5d: ld   hl,($8E21)]
	move.b	(a0),d0                         	| [$7f60: ld   a,(hl)]
	lea	l_8E29(a6),a0                      	| [$7f61: ld   hl,$8E29]
	rol.b	#4,d0                            	| [$7f64: rlca] * 4
	SET_X_FROM_C
	move.b	(a0),d7
	roxl.b	#1,d7                         	| [$7f68: rl   (hl)]
	move.b	d7,d0                         	| [$7f6a: ld   a,(hl)]
	move.b	d7,(a0)
	and.b	#0x07,d0                         	| [$7f6b: and  $07]
	cmp.b	#0x01,d0                         	| [$7f6d: cp   $01]
	beq.b	0f                               	| [...]
	rts                                    	| [$7f6f: ret  nz] [...]
0:
	move.w	#0x03A0,d5                          	| [$7f70: ld   hl,$03A0]
	STORE_WORD	d5,timer_16bit_8e2b(a6)            	| [$7f73: ld   ($8E2B),hl]
	
	move.b	l_8E23(a6),d0                   	| [$7f76: ld   a,($8E23)]
	LOAD_RAM_POINTER	ram_pointer_8e1f(a6),a0             	| [$7f79: ld   hl,($8E1F)]
	move.b	d0,(a0)+                         	| [$7f7c: ld   (hl),a]
	                           	| [$7f7d: inc  hl]
	STORE_RAM_POINTER	a0,ram_pointer_8e1f(a6)            	| [$7f7e: ld   ($8E1F),hl]
	
	lea	l_8E25(a6),a0                      	| [$7f81: ld   hl,$8E25]
	subq.b	#1,(a0)                         	| [$7f84: dec  (hl)]
	move.b	(a0),d0                         	| [$7f85: ld   a,(hl)]
	                               	| [$7f86: and  a]
	move.b	d0,l_8E25(a6)                   	| [$7f87: ld   ($8E25),a]
	jeq	l_7fa8                             	| [$7f8a: jr   z,$7FA8]
	move.b	l_8E23(a6),d0                   	| [$7f8c: ld   a,($8E23)]
	LOAD_RAM_POINTER	video_ram_pointer_8e27(a6),a0             	| [$7f8f: ld   hl,($8E27)]
	jbsr	osd_w_videoram                         	| [$7f92: ld   (hl),a]
	move.w	#-0x20,d1                          	| [$7f93: ld   bc,$FFE0]
	add.w	d1,a0                            	| [$7f96: add  hl,bc]
	STORE_RAM_POINTER	a0,video_ram_pointer_8e27(a6)            	| [$7f97: ld   ($8E27),hl]
	
	move.b	#0x11,d0                        	| [$7f9a: ld   a,$11]
	jbsr	osd_w_videoram                         	| [$7f9c: ld   (hl),a]
	move.b	#0x01,d0                        	| [$7f9d: ld   a,$01]
	move.b	d0,l_8E26(a6)                   	| [$7f9f: ld   ($8E26),a]
	move.b	#0x11,d0                        	| [$7fa2: ld   a,$11]
	move.b	d0,l_8E23(a6)                   	| [$7fa4: ld   ($8E23),a]
	rts                                    	| [$7fa7: ret]
l_7fa8:
	jbsr	l_0ecf                            	| [$7fa8: call $0ECF]
	move.b	l_8E25(a6),d0                   	| [$7fab: ld   a,($8E25)]
	                               	| [$7fae: and  a]
	jeq	l_7fc7                             	| [$7faf: jr   z,$7FC7]
	move.b	d0,d1                           	| [$7fb1: ld   b,a]
	move.b	#0x10,d0                        	| [$7fb2: ld   a,$10]
	LOAD_RAM_POINTER	video_ram_pointer_8e27(a6),a0             	| [$7fb4: ld   hl,($8E27)]

	move.w	#-0x20,a1                          	| [$7fb7: ld   de,$FFE0]
	LOAD_RAM_POINTER	ram_pointer_8e1f(a6),a2             	| [$7fba: ld   ix,($8E1F)]

l_7fbe:
	move.b	d0,(a0)                         	| [$7fbe: ld   (hl),a]
	move.b	d0,(0x00,a2)                    	| [$7fbf: ld   (ix+$00),a]
	add.w	d3,a0                            	| [$7fc2: add  hl,de]
	addq.w	#1,a2                           	| [$7fc3: inc  ix]
	subq.b	#1,d1                           	| [...]
	jne	l_7fbe                             	| [$7fc5: djnz $7FBE]
l_7fc7:
	lea	l_8808(a6),a0                      	| [$7fc7: ld   hl,$8808]
	move.b	#0x80,(a0)                      	| [$7fca: ld   (hl),$80]
	CLEAR_XC_FLAGS                         	| [$7fcc: xor  a]
	clr.b	d0                               	| [$7fcc: xor  a]
	move.b	d0,l_8E26(a6)                   	| [$7fcd: ld   ($8E26),a]
	move.b	#0x01,d0                        	| [$7fd0: ld   a,$01]
	move.b	d0,l_8E2A(a6)                   	| [$7fd2: ld   ($8E2A),a]
	rts                                    	| [$7fd5: ret]
	move.b	nb_credits_8802(a6),d0          	| [$7fd6: ld   a,(nb_credits_8802)]
	                               	| [$7fd9: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$7fda: ret  z] [...]
0:
	lea	two_player_mode_880E(a6),a0                      	| [$7fdb: ld   hl,$880E]
	move.b	(a0),d0                         	| [$7fde: ld   a,(hl)]
	                               	| [$7fdf: and  a]
	jeq	l_7fef                             	| [$7fe0: jr   z,$7FEF]
	                           	| [$7fe2: dec  hl]
	move.b	-(a0),d0                         	| [$7fe3: ld   a,(hl)]
	                               	| [$7fe4: and  a]
	move.b	nb_lives_8908(a6),d0            	| [$7fe5: ld   a,(nb_lives_8908)]
	lea	l_8948(a6),a0                      	| [$7fe8: ld   hl,$8948]
	jne	l_7fef                             	| [$7feb: jr   nz,$7FEF]
	add.w	#0x40,a0                       	| [$7fed: ld   l,$88]
l_7fef:
	or.b	(a0),d0                           	| [$7fef: or   (hl)]
	                               	| [$7ff0: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$7ff1: ret  nz] [...]
0:
	move.b	copy_of_inputs_8810(a6),d0                   	| [$7ff2: ld   a,($8810)]
	and.b	#0x18,d0                         	| [$7ff5: and  $18]
	                               	| [$7ff7: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$7ff8: ret  z] [...]
0:
	jbsr	l_0ecf                            	| [$7ff9: call $0ECF]
	jra	l_0d78                             	| [$7ffc: jp   $0D78]

* < D0: byte possibly containing lowernibble > 9
* > D0: value corrected to full BCD
daa:
    move.w    d1,-(a7)
    move.b    d0,d1
    and.w    #0xF,d1
    sub.b    #10,d1
    bcs.b    daa_out        | no need to do anything
    * D1 = A-F: correct
    add.b    #0x16,d0
daa_out:
    move.w    (a7)+,d1
    rts

* < a0: source (HL)
* < a1: destination (DE)
* < d1: decremented (16 bit)
lddr:
    subq.w    #1,d1
    addq.w  #1,a0
    addq.w  #1,a1
0:
    move.b    -(a0),-(a1)
    dbf        d1,0b

    subq.w  #1,a0
    subq.w  #1,a1
    clr.w    d1
    rts

* < A0: source (HL)
* < A1: destination (DE)
* < D1: length (16 bit)
ldir:
    subq.w    #1,d1
0:
    move.b    (a0)+,(a1)+
    dbf        d1,0b
    clr.w    d1
    rts

* < A0: source (HL)
* < A1: destination (DE)
* < D1: length (16 bit)
ldir_video:
	exg	a0,a1
	move.w	d0,-(a7)
    subq.w    #1,d1
0:
    move.b    (a1)+,d0
	jbsr	osd_w_videoram
	addq	#1,a0
    dbf        d1,0b
    clr.w    d1
	move.w	(a7)+,d0
 	exg	a0,a1
    rts

* < all registers d1-d4/a0/a1/a4
* > all registers swapped
*: note regscopy must be defined somewhere in RAM
*: with a size of 56
exx:
	move.l	a6,-(a7)
    lea     regscopy+28,a6
    * save current regs in region 1
    movem.l d1-d4/a0/a1/a4,-(a6)
    * restore old regs from region 2
    lea     regscopy+28,a6
    movem.l (a6),d1-d4/a0/a1/a4
    * now copy region 1 to region 2
    movem.l d1-d4/a0/a1/a4,-(a7)
    lea     regscopy,a6
    movem.l (a6)+,d1-d4/a0/a1/a4
    movem.l d1-d4/a0/a1/a4,(a6)
    movem.l (a7)+,d1-d4/a0/a1/a4
	move.l	(a7)+,a6
    rts
